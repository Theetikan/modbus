
Modbus1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d9c  08005d9c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da4  08005da4  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  2000010c  08005eb8  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  08005eb8  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015413  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002895  00000000  00000000  00035592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00037e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d68  00000000  00000000  00038f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263c8  00000000  00000000  00039ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014589  00000000  00000000  00060070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc10d  00000000  00000000  000745f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048b4  00000000  00000000  00170708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00174fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000010c 	.word	0x2000010c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005d44 	.word	0x08005d44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000110 	.word	0x20000110
 8000214:	08005d44 	.word	0x08005d44

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
//end of package flag set
hModbus->Flag_T15TimeOut = 1;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	751a      	strb	r2, [r3, #20]
//set 3t5 Timer
__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
__HAL_TIM_ENABLE(hModbus->htim);
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000128 	.word	0x20000128

08000554 <modbus_3t5_Timeout>:
void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
//return package flag set
hModbus->Flag_T35TimeOut = 1;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <modbus_3t5_Timeout+0x1c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2201      	movs	r2, #1
 8000562:	755a      	strb	r2, [r3, #21]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000128 	.word	0x20000128

08000574 <modbus_ErrorTimeout>:
void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f004 fa7f 	bl	8004a80 <HAL_UART_GetError>
 8000582:	4603      	mov	r3, r0
 8000584:	2b20      	cmp	r3, #32
 8000586:	d101      	bne.n	800058c <modbus_ErrorTimeout+0x18>
{
modbus_1t5_Timeout();
 8000588:	f7ff ffc4 	bl	8000514 <modbus_1t5_Timeout>
}

}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Modbus_init>:

void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
hModbus = hmodbus;
 800059e:	4a25      	ldr	r2, [pc, #148]	; (8000634 <Modbus_init+0xa0>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6013      	str	r3, [r2, #0]
hModbus->RegisterAddress = RegisterStartAddress;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <Modbus_init+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	605a      	str	r2, [r3, #4]
//config timer interrupt
HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <Modbus_init+0xa4>)
 80005b2:	210e      	movs	r1, #14
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f997 	bl	80038e8 <HAL_TIM_RegisterCallback>
//config UART interrupt
HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2110      	movs	r1, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 fa07 	bl	80049d4 <HAL_UART_ReceiverTimeout_Config>
HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fa1e 	bl	8004a0c <HAL_UART_EnableReceiverTimeout>
HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <Modbus_init+0xa8>)
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fce5 	bl	8003fa8 <HAL_UART_RegisterCallback>
//start Receive
HAL_UART_Receive_DMA(hModbus->huart,
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <Modbus_init+0xa0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68d8      	ldr	r0, [r3, #12]
&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <Modbus_init+0xa0>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <Modbus_init+0xa0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
HAL_UART_Receive_DMA(hModbus->huart,
 80005f0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80005f4:	4413      	add	r3, r2
 80005f6:	3302      	adds	r3, #2
 80005f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005fc:	4619      	mov	r1, r3
 80005fe:	f003 fe0d 	bl	800421c <HAL_UART_Receive_DMA>
MODBUS_UART_BUFFER_SIZE );
if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <Modbus_init+0xa0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b01      	cmp	r3, #1
 8000610:	d10c      	bne.n	800062c <Modbus_init+0x98>
{
HAL_TIM_Base_Start_IT(hModbus->htim);
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fe19 	bl	8003250 <HAL_TIM_Base_Start_IT>
HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <Modbus_init+0xa0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fef2 	bl	8003410 <HAL_TIM_OnePulse_Start_IT>
}
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000128 	.word	0x20000128
 8000638:	08000555 	.word	0x08000555
 800063c:	08000575 	.word	0x08000575

08000640 <CRC16>:
} ;
unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the
CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000640:	b480      	push	{r7}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	803b      	strh	r3, [r7, #0]
unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800064c:	23ff      	movs	r3, #255	; 0xff
 800064e:	75fb      	strb	r3, [r7, #23]
unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	; 0xff
 8000652:	75bb      	strb	r3, [r7, #22]
char *auchCRCLo;
unsigned uIndex ; /* will index into CRC lookup table */
while (usDataLen--) /* pass through message buffer */
 8000654:	e013      	b.n	800067e <CRC16+0x3e>
{
	uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	7dbb      	ldrb	r3, [r7, #22]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	613b      	str	r3, [r7, #16]
	uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <CRC16+0x64>)
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	4053      	eors	r3, r2
 8000672:	75bb      	strb	r3, [r7, #22]
	uchCRCHi = auchCRCLo[uIndex] ;
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	75fb      	strb	r3, [r7, #23]
while (usDataLen--) /* pass through message buffer */
 800067e:	883b      	ldrh	r3, [r7, #0]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	803a      	strh	r2, [r7, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e6      	bne.n	8000656 <CRC16+0x16>
}
return (uchCRCHi << 8 | uchCRCLo) ;
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7dbb      	ldrb	r3, [r7, #22]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	371c      	adds	r7, #28
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000000 	.word	0x20000000

080006a8 <Modbus_Protocal_Worker>:

void Modbus_Protocal_Worker()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006ae:	4b7e      	ldr	r3, [pc, #504]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	7ddb      	ldrb	r3, [r3, #23]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d80a      	bhi.n	80006d0 <Modbus_Protocal_Worker+0x28>
 80006ba:	a201      	add	r2, pc, #4	; (adr r2, 80006c0 <Modbus_Protocal_Worker+0x18>)
 80006bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c0:	080006db 	.word	0x080006db
 80006c4:	0800086f 	.word	0x0800086f
 80006c8:	08000767 	.word	0x08000767
 80006cc:	080007ab 	.word	0x080007ab
	{
	default:
		case Modbus_state_Init:
			/*init Modbus protocal*/
			hModbus->Mstatus = Modbus_state_Idle;
 80006d0:	4b75      	ldr	r3, [pc, #468]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2201      	movs	r2, #1
 80006d6:	75da      	strb	r2, [r3, #23]
		break;
 80006d8:	e0e1      	b.n	800089e <Modbus_Protocal_Worker+0x1f6>

		case Modbus_state_Idle:
			/*Idle state*/
			//check that we have response message
			if(hModbus->TxCount)
 80006da:	4b73      	ldr	r3, [pc, #460]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <Modbus_Protocal_Worker+0x4c>
			{
				/*set state*/
				hModbus->Mstatus= Modbus_state_Emission;
 80006e6:	4b70      	ldr	r3, [pc, #448]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2202      	movs	r2, #2
 80006ec:	75da      	strb	r2, [r3, #23]
				Modbus_Emission();
 80006ee:	f000 f9d3 	bl	8000a98 <Modbus_Emission>
 80006f2:	e018      	b.n	8000726 <Modbus_Protocal_Worker+0x7e>
			}
			// Received character
			else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006f4:	4b6c      	ldr	r3, [pc, #432]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80006fe:	4b6a      	ldr	r3, [pc, #424]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000708:	b29b      	uxth	r3, r3
 800070a:	429a      	cmp	r2, r3
 800070c:	d00b      	beq.n	8000726 <Modbus_Protocal_Worker+0x7e>
			{
				/*reset Timer flag*/
				hModbus->Flag_T15TimeOut = 0;
 800070e:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	751a      	strb	r2, [r3, #20]
				hModbus->Flag_T35TimeOut = 0;
 8000716:	4b64      	ldr	r3, [pc, #400]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2200      	movs	r2, #0
 800071c:	755a      	strb	r2, [r3, #21]
				/*set state*/
				hModbus->Mstatus= Modbus_state_Reception;
 800071e:	4b62      	ldr	r3, [pc, #392]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2203      	movs	r2, #3
 8000724:	75da      	strb	r2, [r3, #23]
			}
			//check that if UART RX not start, start receiving
			if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000726:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000730:	2b20      	cmp	r3, #32
 8000732:	f040 80ad 	bne.w	8000890 <Modbus_Protocal_Worker+0x1e8>
			{
				hModbus->modbusUartStructure.RxTail =0;
 8000736:	4b5c      	ldr	r3, [pc, #368]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2200      	movs	r2, #0
 800073c:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
				HAL_UART_Receive_DMA(hModbus->huart,
 8000740:	4b59      	ldr	r3, [pc, #356]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	68d8      	ldr	r0, [r3, #12]
				&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000746:	4b58      	ldr	r3, [pc, #352]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b57      	ldr	r3, [pc, #348]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
				HAL_UART_Receive_DMA(hModbus->huart,
 8000752:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000756:	4413      	add	r3, r2
 8000758:	3302      	adds	r3, #2
 800075a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800075e:	4619      	mov	r1, r3
 8000760:	f003 fd5c 	bl	800421c <HAL_UART_Receive_DMA>
				MODBUS_UART_BUFFER_SIZE );
			}
		break;
 8000764:	e094      	b.n	8000890 <Modbus_Protocal_Worker+0x1e8>

		case Modbus_state_Reception:
			if(hModbus->Flag_T15TimeOut)
 8000766:	4b50      	ldr	r3, [pc, #320]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	7d1b      	ldrb	r3, [r3, #20]
 800076c:	2b00      	cmp	r3, #0
 800076e:	f000 8091 	beq.w	8000894 <Modbus_Protocal_Worker+0x1ec>
			{
				/*reset received flag*/
				hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000772:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	22fe      	movs	r2, #254	; 0xfe
 8000778:	759a      	strb	r2, [r3, #22]
				hModbus->modbusUartStructure.RxTail =
				hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 800077a:	4b4b      	ldr	r3, [pc, #300]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8000784:	4b48      	ldr	r3, [pc, #288]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	b29a      	uxth	r2, r3
				hModbus->modbusUartStructure.RxTail =
 8000794:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000796:	681b      	ldr	r3, [r3, #0]
				hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); /*compute CRC and Slave address*/
 8000798:	1a8a      	subs	r2, r1, r2
 800079a:	b292      	uxth	r2, r2
				hModbus->modbusUartStructure.RxTail =
 800079c:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
				hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80007a0:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2204      	movs	r2, #4
 80007a6:	75da      	strb	r2, [r3, #23]
			}
		break;
 80007a8:	e074      	b.n	8000894 <Modbus_Protocal_Worker+0x1ec>

		case Modbus_state_ControlAndWaiting:
		/*Frame Calculation , calculate once*/
			if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007b2:	f113 0f02 	cmn.w	r3, #2
 80007b6:	d150      	bne.n	800085a <Modbus_Protocal_Worker+0x1b2>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b8:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	759a      	strb	r2, [r3, #22]
				// check CRC
				u16u8_t CalculateCRC;
				CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f203 2272 	addw	r2, r3, #626	; 0x272
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007d0:	3b02      	subs	r3, #2
 80007d2:	4619      	mov	r1, r3
 80007d4:	4610      	mov	r0, r2
 80007d6:	f7ff ff33 	bl	8000640 <CRC16>
 80007da:	4603      	mov	r3, r0
 80007dc:	80bb      	strh	r3, [r7, #4]
				if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007de:	793a      	ldrb	r2, [r7, #4]
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007e2:	6819      	ldr	r1, [r3, #0]
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007ec:	3b02      	subs	r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d10c      	bne.n	8000812 <Modbus_Protocal_Worker+0x16a>
				&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f8:	797a      	ldrb	r2, [r7, #5]
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 80007fc:	6819      	ldr	r1, [r3, #0]
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000806:	3b01      	subs	r3, #1
 8000808:	440b      	add	r3, r1
 800080a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
				if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800080e:	429a      	cmp	r2, r3
 8000810:	d004      	beq.n	800081c <Modbus_Protocal_Worker+0x174>
				{
					// communication unsuccessful
					hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	759a      	strb	r2, [r3, #22]
					break;
 800081a:	e040      	b.n	800089e <Modbus_Protocal_Worker+0x1f6>
				}
				//check Slave Address
				if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	d113      	bne.n	8000856 <Modbus_Protocal_Worker+0x1ae>
					break;
				//copy recivced frame
				memcpy(hModbus->Rxframe,
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f103 0018 	add.w	r0, r3, #24
						hModbus->modbusUartStructure.MessageBufferRx+1,
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f203 2372 	addw	r3, r3, #626	; 0x272
				memcpy(hModbus->Rxframe,
 800083e:	1c59      	adds	r1, r3, #1
						hModbus->modbusUartStructure.RxTail-3);
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000848:	3b03      	subs	r3, #3
				memcpy(hModbus->Rxframe,
 800084a:	461a      	mov	r2, r3
 800084c:	f005 fa6c 	bl	8005d28 <memcpy>
				//execute command
				Modbus_frame_response();
 8000850:	f000 f82c 	bl	80008ac <Modbus_frame_response>
 8000854:	e001      	b.n	800085a <Modbus_Protocal_Worker+0x1b2>
					break;
 8000856:	bf00      	nop
				hModbus->Mstatus = Modbus_state_Idle;
			}
		break;

	}//end switch
}//end function
 8000858:	e021      	b.n	800089e <Modbus_Protocal_Worker+0x1f6>
			if(hModbus->Flag_T35TimeOut)
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	7d5b      	ldrb	r3, [r3, #21]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d019      	beq.n	8000898 <Modbus_Protocal_Worker+0x1f0>
				hModbus->Mstatus = Modbus_state_Idle;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2201      	movs	r2, #1
 800086a:	75da      	strb	r2, [r3, #23]
		break;
 800086c:	e014      	b.n	8000898 <Modbus_Protocal_Worker+0x1f0>
			if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000878:	2b20      	cmp	r3, #32
 800087a:	d10f      	bne.n	800089c <Modbus_Protocal_Worker+0x1f4>
				hModbus->TxCount=0;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
				hModbus->Mstatus = Modbus_state_Idle;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <Modbus_Protocal_Worker+0x200>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2201      	movs	r2, #1
 800088c:	75da      	strb	r2, [r3, #23]
		break;
 800088e:	e005      	b.n	800089c <Modbus_Protocal_Worker+0x1f4>
		break;
 8000890:	bf00      	nop
 8000892:	e004      	b.n	800089e <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
 8000896:	e002      	b.n	800089e <Modbus_Protocal_Worker+0x1f6>
		break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <Modbus_Protocal_Worker+0x1f6>
		break;
 800089c:	bf00      	nop
}//end function
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000128 	.word	0x20000128

080008ac <Modbus_frame_response>:

void Modbus_frame_response()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check function
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <Modbus_frame_response+0x2c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7e1b      	ldrb	r3, [r3, #24]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d004      	beq.n	80008c4 <Modbus_frame_response+0x18>
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d105      	bne.n	80008ca <Modbus_frame_response+0x1e>
	{
		case Modbus_function_Write_SingleRegister:
			modbusWrite1Register();
 80008be:	f000 f80d 	bl	80008dc <modbusWrite1Register>
		break;
 80008c2:	e006      	b.n	80008d2 <Modbus_frame_response+0x26>
		case Modbus_function_Read_Holding_Register:
			modbusRead1Register();
 80008c4:	f000 f84c 	bl	8000960 <modbusRead1Register>
		break;
 80008c8:	e003      	b.n	80008d2 <Modbus_frame_response+0x26>
		default:
			ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 f8c2 	bl	8000a54 <ModbusErrorReply>
		break;
 80008d0:	bf00      	nop
	}
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000128 	.word	0x20000128

080008dc <modbusWrite1Register>:

void modbusWrite1Register() //function 06
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
//write data to register
uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <modbusWrite1Register+0x80>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	7e5b      	ldrb	r3, [r3, #25]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <modbusWrite1Register+0x80>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	7e9b      	ldrb	r3, [r3, #26]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]
if(startAddress > hModbus->RegisterSize)
 80008fa:	88fa      	ldrh	r2, [r7, #6]
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <modbusWrite1Register+0x80>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	429a      	cmp	r2, r3
 8000904:	d903      	bls.n	800090e <modbusWrite1Register+0x32>
{
ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000906:	2002      	movs	r0, #2
 8000908:	f000 f8a4 	bl	8000a54 <ModbusErrorReply>
return;
 800090c:	e023      	b.n	8000956 <modbusWrite1Register+0x7a>
}
hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <modbusWrite1Register+0x80>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <modbusWrite1Register+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6859      	ldr	r1, [r3, #4]
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	440b      	add	r3, r1
 800091e:	7ed2      	ldrb	r2, [r2, #27]
 8000920:	705a      	strb	r2, [r3, #1]
hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <modbusWrite1Register+0x80>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <modbusWrite1Register+0x80>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6859      	ldr	r1, [r3, #4]
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	7f12      	ldrb	r2, [r2, #28]
 8000934:	701a      	strb	r2, [r3, #0]
//generate response
memcpy(hModbus->Txframe,
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <modbusWrite1Register+0x80>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
hModbus->Rxframe,
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <modbusWrite1Register+0x80>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3318      	adds	r3, #24
memcpy(hModbus->Txframe,
 8000944:	2208      	movs	r2, #8
 8000946:	4619      	mov	r1, r3
 8000948:	f005 f9ee 	bl	8005d28 <memcpy>
8);
//set number of byte to sent
hModbus->TxCount=5;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <modbusWrite1Register+0x80>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2205      	movs	r2, #5
 8000952:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000128 	.word	0x20000128

08000960 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <modbusRead1Register+0xf0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	7edb      	ldrb	r3, [r3, #27]
 800096c:	b29b      	uxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <modbusRead1Register+0xf0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7f1b      	ldrb	r3, [r3, #28]
 8000978:	b29b      	uxth	r3, r3
 800097a:	4413      	add	r3, r2
 800097c:	80fb      	strh	r3, [r7, #6]
uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <modbusRead1Register+0xf0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	7e5b      	ldrb	r3, [r3, #25]
 8000984:	b29b      	uxth	r3, r3
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <modbusRead1Register+0xf0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	7e9b      	ldrb	r3, [r3, #26]
 8000990:	b29b      	uxth	r3, r3
 8000992:	4413      	add	r3, r2
 8000994:	80bb      	strh	r3, [r7, #4]
//check quantity and address range
if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <modbusRead1Register+0x42>
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	2b7d      	cmp	r3, #125	; 0x7d
 80009a0:	d903      	bls.n	80009aa <modbusRead1Register+0x4a>
{
ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 f856 	bl	8000a54 <ModbusErrorReply>
return;
 80009a8:	e04e      	b.n	8000a48 <modbusRead1Register+0xe8>
}
if(startAddress > hModbus->RegisterSize
 80009aa:	88ba      	ldrh	r2, [r7, #4]
 80009ac:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <modbusRead1Register+0xf0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d808      	bhi.n	80009c8 <modbusRead1Register+0x68>
|| (startAddress + numberOfDataToRead) > hModbus->RegisterSize)
 80009b6:	88ba      	ldrh	r2, [r7, #4]
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	4413      	add	r3, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <modbusRead1Register+0xf0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d903      	bls.n	80009d0 <modbusRead1Register+0x70>
{
ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80009c8:	2002      	movs	r0, #2
 80009ca:	f000 f843 	bl	8000a54 <ModbusErrorReply>
return;
 80009ce:	e03b      	b.n	8000a48 <modbusRead1Register+0xe8>
}
//generate response
hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <modbusRead1Register+0xf0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2203      	movs	r2, #3
 80009d6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <modbusRead1Register+0xf0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
register int i;
for(i=0; i<numberOfDataToRead;i++)
 80009ea:	2400      	movs	r4, #0
 80009ec:	e020      	b.n	8000a30 <modbusRead1Register+0xd0>
{
hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <modbusRead1Register+0xf0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	4423      	add	r3, r4
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <modbusRead1Register+0xf0>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	1c63      	adds	r3, r4, #1
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	7849      	ldrb	r1, [r1, #1]
 8000a06:	4413      	add	r3, r2
 8000a08:	460a      	mov	r2, r1
 8000a0a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <modbusRead1Register+0xf0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	4423      	add	r3, r4
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	18d1      	adds	r1, r2, r3
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <modbusRead1Register+0xf0>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	0063      	lsls	r3, r4, #1
 8000a22:	3303      	adds	r3, #3
 8000a24:	7809      	ldrb	r1, [r1, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	460a      	mov	r2, r1
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
for(i=0; i<numberOfDataToRead;i++)
 8000a2e:	3401      	adds	r4, #1
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	429c      	cmp	r4, r3
 8000a34:	dbdb      	blt.n	80009ee <modbusRead1Register+0x8e>
}
hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <modbusRead1Register+0xf0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000128 	.word	0x20000128

08000a54 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	7e1a      	ldrb	r2, [r3, #24]
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
hModbus->Txframe[1] = Errorcode;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
hModbus->TxCount = 2;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2202      	movs	r2, #2
 8000a82:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000128 	.word	0x20000128

08000a98 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a9e:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <Modbus_Emission+0xe8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa8:	2b20      	cmp	r3, #32
 8000aaa:	d15d      	bne.n	8000b68 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000aac:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <Modbus_Emission+0xe8>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
		memcpy
		(
			hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <Modbus_Emission+0xe8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8000ac2:	1c58      	adds	r0, r3, #1
			hModbus->Txframe,
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <Modbus_Emission+0xe8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
			hModbus->TxCount
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <Modbus_Emission+0xe8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
		memcpy
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f005 f927 	bl	8005d28 <memcpy>
		);
		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <Modbus_Emission+0xe8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3203      	adds	r2, #3
 8000aea:	b292      	uxth	r2, r2
 8000aec:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
		u16u8_t CalculateCRC;

		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <Modbus_Emission+0xe8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
		hModbus->modbusUartStructure.TxTail - 2);
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <Modbus_Emission+0xe8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b00:	3b02      	subs	r3, #2
 8000b02:	4619      	mov	r1, r3
 8000b04:	4610      	mov	r0, r2
 8000b06:	f7ff fd9b 	bl	8000640 <CRC16>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b1a:	3b02      	subs	r3, #2
		=CalculateCRC.U8[0];
 8000b1c:	7939      	ldrb	r1, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	460a      	mov	r2, r1
 8000b22:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b32:	3b01      	subs	r3, #1
		=CalculateCRC.U8[1];
 8000b34:	7979      	ldrb	r1, [r7, #5]
 8000b36:	4413      	add	r3, r2
 8000b38:	460a      	mov	r2, r1
 8000b3a:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		//sent modbus
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b48:	2b20      	cmp	r3, #32
 8000b4a:	d10d      	bne.n	8000b68 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68d8      	ldr	r0, [r3, #12]
			,hModbus->modbusUartStructure.MessageBufferTx
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
			,hModbus->modbusUartStructure.TxTail);
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b5e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b62:	461a      	mov	r2, r3
 8000b64:	f003 fada 	bl	800411c <HAL_UART_Transmit_DMA>
		}
	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <Modbus_Emission+0xe8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	755a      	strb	r2, [r3, #21]
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000128 	.word	0x20000128

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b88:	f000 fc5d 	bl	8001446 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8c:	f000 f826 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f000 f988 	bl	8000ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b94:	f000 f938 	bl	8000e08 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000b98:	f000 f86c 	bl	8000c74 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000b9c:	f000 f8b6 	bl	8000d0c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000ba0:	f000 f902 	bl	8000da8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &hlpuart1;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <main+0x48>)
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <main+0x4c>)
 8000ba8:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <main+0x48>)
 8000bac:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <main+0x50>)
 8000bae:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <main+0x48>)
 8000bb2:	2215      	movs	r2, #21
 8000bb4:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <main+0x48>)
 8000bb8:	22c8      	movs	r2, #200	; 0xc8
 8000bba:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000bbc:	4906      	ldr	r1, [pc, #24]	; (8000bd8 <main+0x54>)
 8000bbe:	4803      	ldr	r0, [pc, #12]	; (8000bcc <main+0x48>)
 8000bc0:	f7ff fce8 	bl	8000594 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000bc4:	f7ff fd70 	bl	80006a8 <Modbus_Protocal_Worker>
 8000bc8:	e7fc      	b.n	8000bc4 <main+0x40>
 8000bca:	bf00      	nop
 8000bcc:	20000510 	.word	0x20000510
 8000bd0:	2000012c 	.word	0x2000012c
 8000bd4:	20000444 	.word	0x20000444
 8000bd8:	200009e8 	.word	0x200009e8

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b094      	sub	sp, #80	; 0x50
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2238      	movs	r2, #56	; 0x38
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 f870 	bl	8005cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f001 fa92 	bl	8002128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c16:	2302      	movs	r3, #2
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c1e:	2355      	movs	r3, #85	; 0x55
 8000c20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fb2c 	bl	8002290 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c3e:	f000 f99f 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fe2a 	bl	80028b4 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c66:	f000 f98b 	bl	8000f80 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <MX_LPUART1_UART_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000c88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cba:	4812      	ldr	r0, [pc, #72]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000cbc:	f003 f914 	bl	8003ee8 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000cc6:	f000 f95b 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000cce:	f004 ff34 	bl	8005b3a <HAL_UARTEx_SetTxFifoThreshold>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000cd8:	f000 f952 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000ce0:	f004 ff69 	bl	8005bb6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000cea:	f000 f949 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_LPUART1_UART_Init+0x90>)
 8000cf0:	f004 feea 	bl	8005ac8 <HAL_UARTEx_DisableFifoMode>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000cfa:	f000 f941 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000012c 	.word	0x2000012c
 8000d08:	40008000 	.word	0x40008000

08000d0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d12:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <MX_USART1_UART_Init+0x98>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d18:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d5a:	f003 f8c5 	bl	8003ee8 <HAL_UART_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f000 f90c 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d6c:	f004 fee5 	bl	8005b3a <HAL_UARTEx_SetTxFifoThreshold>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f000 f903 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d7e:	f004 ff1a 	bl	8005bb6 <HAL_UARTEx_SetRxFifoThreshold>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000d88:	f000 f8fa 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_USART1_UART_Init+0x94>)
 8000d8e:	f004 fe9b 	bl	8005ac8 <HAL_UARTEx_DisableFifoMode>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000d98:	f000 f8f2 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001f8 	.word	0x200001f8
 8000da4:	40013800 	.word	0x40013800

08000da8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MX_TIM16_Init+0x5c>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000db4:	22a9      	movs	r2, #169	; 0xa9
 8000db6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dc0:	f240 4279 	movw	r2, #1145	; 0x479
 8000dc4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dda:	f002 f9d5 	bl	8003188 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000de4:	f000 f8cc 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000de8:	2108      	movs	r1, #8
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM16_Init+0x58>)
 8000dec:	f002 faa8 	bl	8003340 <HAL_TIM_OnePulse_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000df6:	f000 f8c3 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000444 	.word	0x20000444
 8000e04:	40014400 	.word	0x40014400

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6493      	str	r3, [r2, #72]	; 0x48
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6493      	str	r3, [r2, #72]	; 0x48
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6493      	str	r3, [r2, #72]	; 0x48
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_DMA_Init+0x98>)
 8000e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	200b      	movs	r0, #11
 8000e5c:	f000 fc3f 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e60:	200b      	movs	r0, #11
 8000e62:	f000 fc56 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	200c      	movs	r0, #12
 8000e6c:	f000 fc37 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e70:	200c      	movs	r0, #12
 8000e72:	f000 fc4e 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	200d      	movs	r0, #13
 8000e7c:	f000 fc2f 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e80:	200d      	movs	r0, #13
 8000e82:	f000 fc46 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2038      	movs	r0, #56	; 0x38
 8000e8c:	f000 fc27 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000e90:	2038      	movs	r0, #56	; 0x38
 8000e92:	f000 fc3e 	bl	8001712 <HAL_NVIC_EnableIRQ>

}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ed8:	f043 0320 	orr.w	r3, r3, #32
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f001 f8c5 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480f      	ldr	r0, [pc, #60]	; (8000f7c <MX_GPIO_Init+0xd8>)
 8000f3e:	f000 ff35 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f42:	2320      	movs	r3, #32
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f000 ff26 	bl	8001dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2028      	movs	r0, #40	; 0x28
 8000f66:	f000 fbba 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f6a:	2028      	movs	r0, #40	; 0x28
 8000f6c:	f000 fbd1 	bl	8001712 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000800 	.word	0x48000800

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fc2:	f001 f955 	bl	8002270 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0a0      	sub	sp, #128	; 0x80
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	2254      	movs	r2, #84	; 0x54
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 fe6b 	bl	8005cd0 <memset>
  if(huart->Instance==LPUART1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a99      	ldr	r2, [pc, #612]	; (8001264 <HAL_UART_MspInit+0x290>)
 8001000:	4293      	cmp	r3, r2
 8001002:	f040 8093 	bne.w	800112c <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001006:	2320      	movs	r3, #32
 8001008:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fe6a 	bl	8002cec <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800101e:	f7ff ffaf 	bl	8000f80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001022:	4b91      	ldr	r3, [pc, #580]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	4a90      	ldr	r2, [pc, #576]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800102e:	4b8e      	ldr	r3, [pc, #568]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b8b      	ldr	r3, [pc, #556]	; (8001268 <HAL_UART_MspInit+0x294>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a8a      	ldr	r2, [pc, #552]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001052:	230c      	movs	r3, #12
 8001054:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001062:	230c      	movs	r3, #12
 8001064:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f000 fe9c 	bl	8001dac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001074:	4b7d      	ldr	r3, [pc, #500]	; (800126c <HAL_UART_MspInit+0x298>)
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <HAL_UART_MspInit+0x29c>)
 8001078:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800107a:	4b7c      	ldr	r3, [pc, #496]	; (800126c <HAL_UART_MspInit+0x298>)
 800107c:	2222      	movs	r2, #34	; 0x22
 800107e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001080:	4b7a      	ldr	r3, [pc, #488]	; (800126c <HAL_UART_MspInit+0x298>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001086:	4b79      	ldr	r3, [pc, #484]	; (800126c <HAL_UART_MspInit+0x298>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800108c:	4b77      	ldr	r3, [pc, #476]	; (800126c <HAL_UART_MspInit+0x298>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <HAL_UART_MspInit+0x298>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001098:	4b74      	ldr	r3, [pc, #464]	; (800126c <HAL_UART_MspInit+0x298>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800109e:	4b73      	ldr	r3, [pc, #460]	; (800126c <HAL_UART_MspInit+0x298>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <HAL_UART_MspInit+0x298>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80010aa:	4870      	ldr	r0, [pc, #448]	; (800126c <HAL_UART_MspInit+0x298>)
 80010ac:	f000 fb4c 	bl	8001748 <HAL_DMA_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80010b6:	f7ff ff63 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a6b      	ldr	r2, [pc, #428]	; (800126c <HAL_UART_MspInit+0x298>)
 80010be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80010c2:	4a6a      	ldr	r2, [pc, #424]	; (800126c <HAL_UART_MspInit+0x298>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010ca:	4a6b      	ldr	r2, [pc, #428]	; (8001278 <HAL_UART_MspInit+0x2a4>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010d0:	2223      	movs	r2, #35	; 0x23
 80010d2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010d6:	2210      	movs	r2, #16
 80010d8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010da:	4b66      	ldr	r3, [pc, #408]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e0:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e6:	4b63      	ldr	r3, [pc, #396]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ec:	4b61      	ldr	r3, [pc, #388]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80010f2:	4b60      	ldr	r3, [pc, #384]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f8:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80010fe:	485d      	ldr	r0, [pc, #372]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 8001100:	f000 fb22 	bl	8001748 <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800110a:	f7ff ff39 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a58      	ldr	r2, [pc, #352]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 8001112:	67da      	str	r2, [r3, #124]	; 0x7c
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_UART_MspInit+0x2a0>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	205b      	movs	r0, #91	; 0x5b
 8001120:	f000 fadd 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001124:	205b      	movs	r0, #91	; 0x5b
 8001126:	f000 faf4 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800112a:	e096      	b.n	800125a <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_UART_MspInit+0x2a8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	f040 8091 	bne.w	800125a <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fdd1 	bl	8002cec <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001150:	f7ff ff16 	bl	8000f80 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001158:	4a43      	ldr	r2, [pc, #268]	; (8001268 <HAL_UART_MspInit+0x294>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6613      	str	r3, [r2, #96]	; 0x60
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <HAL_UART_MspInit+0x294>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <HAL_UART_MspInit+0x294>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_UART_MspInit+0x294>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001184:	2330      	movs	r3, #48	; 0x30
 8001186:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001194:	2307      	movs	r3, #7
 8001196:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800119c:	4619      	mov	r1, r3
 800119e:	4838      	ldr	r0, [pc, #224]	; (8001280 <HAL_UART_MspInit+0x2ac>)
 80011a0:	f000 fe04 	bl	8001dac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011a6:	4a38      	ldr	r2, [pc, #224]	; (8001288 <HAL_UART_MspInit+0x2b4>)
 80011a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80011aa:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011ac:	2218      	movs	r2, #24
 80011ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b6:	4b33      	ldr	r3, [pc, #204]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011da:	482a      	ldr	r0, [pc, #168]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011dc:	f000 fab4 	bl	8001748 <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_UART_MspInit+0x216>
      Error_Handler();
 80011e6:	f7ff fecb 	bl	8000f80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011f2:	4a24      	ldr	r2, [pc, #144]	; (8001284 <HAL_UART_MspInit+0x2b0>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA2_Channel1;
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_UART_MspInit+0x2b8>)
 80011fa:	4a25      	ldr	r2, [pc, #148]	; (8001290 <HAL_UART_MspInit+0x2bc>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001200:	2219      	movs	r2, #25
 8001202:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001206:	2210      	movs	r2, #16
 8001208:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_UART_MspInit+0x2b8>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_UART_MspInit+0x2b8>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_UART_MspInit+0x2b8>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800122e:	4817      	ldr	r0, [pc, #92]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001230:	f000 fa8a 	bl	8001748 <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_UART_MspInit+0x26a>
      Error_Handler();
 800123a:	f7ff fea1 	bl	8000f80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001242:	67da      	str	r2, [r3, #124]	; 0x7c
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_UART_MspInit+0x2b8>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	2025      	movs	r0, #37	; 0x25
 8001250:	f000 fa45 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001254:	2025      	movs	r0, #37	; 0x25
 8001256:	f000 fa5c 	bl	8001712 <HAL_NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3780      	adds	r7, #128	; 0x80
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40008000 	.word	0x40008000
 8001268:	40021000 	.word	0x40021000
 800126c:	200002c4 	.word	0x200002c4
 8001270:	4002001c 	.word	0x4002001c
 8001274:	20000324 	.word	0x20000324
 8001278:	40020008 	.word	0x40020008
 800127c:	40013800 	.word	0x40013800
 8001280:	48000800 	.word	0x48000800
 8001284:	20000384 	.word	0x20000384
 8001288:	40020030 	.word	0x40020030
 800128c:	200003e4 	.word	0x200003e4
 8001290:	40020408 	.word	0x40020408

08001294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_TIM_Base_MspInit+0x44>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d113      	bne.n	80012ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_TIM_Base_MspInit+0x48>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <HAL_TIM_Base_MspInit+0x48>)
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	6613      	str	r3, [r2, #96]	; 0x60
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_TIM_Base_MspInit+0x48>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2019      	movs	r0, #25
 80012c4:	f000 fa0b 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012c8:	2019      	movs	r0, #25
 80012ca:	f000 fa22 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40014400 	.word	0x40014400
 80012dc:	40021000 	.word	0x40021000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f8de 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <DMA1_Channel1_IRQHandler+0x10>)
 800133a:	f000 fbe8 	bl	8001b0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000324 	.word	0x20000324

08001348 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <DMA1_Channel2_IRQHandler+0x10>)
 800134e:	f000 fbde 	bl	8001b0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002c4 	.word	0x200002c4

0800135c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <DMA1_Channel3_IRQHandler+0x10>)
 8001362:	f000 fbd4 	bl	8001b0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000384 	.word	0x20000384

08001370 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001376:	f002 f8d9 	bl	800352c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000444 	.word	0x20000444

08001384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USART1_IRQHandler+0x10>)
 800138a:	f002 ff93 	bl	80042b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200001f8 	.word	0x200001f8

08001398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800139c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a0:	f000 fe9e 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Channel1_IRQHandler+0x10>)
 80013ae:	f000 fbae 	bl	8001b0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200003e4 	.word	0x200003e4

080013bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <LPUART1_IRQHandler+0x10>)
 80013c2:	f002 ff77 	bl	80042b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000012c 	.word	0x2000012c

080013d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f8:	f7ff ffea 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <LoopForever+0x6>)
  ldr r1, =_edata
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <LoopForever+0xe>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001414:	4c0a      	ldr	r4, [pc, #40]	; (8001440 <LoopForever+0x16>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f004 fc5d 	bl	8005ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001426:	f7ff fbad 	bl	8000b84 <main>

0800142a <LoopForever>:

LoopForever:
    b LoopForever
 800142a:	e7fe      	b.n	800142a <LoopForever>
  ldr   r0, =_estack
 800142c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001438:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 800143c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001440:	20000b7c 	.word	0x20000b7c

08001444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_2_IRQHandler>

08001446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f939 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f80e 	bl	8001478 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e001      	b.n	800146c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001468:	f7ff fd90 	bl	8000f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800146c:	79fb      	ldrb	r3, [r7, #7]

}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_InitTick+0x68>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d022      	beq.n	80014d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_InitTick+0x6c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_InitTick+0x68>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001498:	fbb1 f3f3 	udiv	r3, r1, r3
 800149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f944 	bl	800172e <HAL_SYSTICK_Config>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10f      	bne.n	80014cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	d809      	bhi.n	80014c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b2:	2200      	movs	r2, #0
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	f04f 30ff 	mov.w	r0, #4294967295
 80014ba:	f000 f910 	bl	80016de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_InitTick+0x70>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e007      	b.n	80014d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e004      	b.n	80014d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e001      	b.n	80014d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000108 	.word	0x20000108
 80014e4:	20000100 	.word	0x20000100
 80014e8:	20000104 	.word	0x20000104

080014ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_IncTick+0x1c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_IncTick+0x20>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a03      	ldr	r2, [pc, #12]	; (8001508 <HAL_IncTick+0x1c>)
 80014fc:	6013      	str	r3, [r2, #0]
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	20000b78 	.word	0x20000b78
 800150c:	20000108 	.word	0x20000108

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000b78 	.word	0x20000b78

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff40 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff33 	bl	800158c <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa4 	bl	8001684 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e08d      	b.n	8001876 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_DMA_Init+0x138>)
 8001762:	429a      	cmp	r2, r3
 8001764:	d80f      	bhi.n	8001786 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	4b45      	ldr	r3, [pc, #276]	; (8001884 <HAL_DMA_Init+0x13c>)
 800176e:	4413      	add	r3, r2
 8001770:	4a45      	ldr	r2, [pc, #276]	; (8001888 <HAL_DMA_Init+0x140>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	009a      	lsls	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a42      	ldr	r2, [pc, #264]	; (800188c <HAL_DMA_Init+0x144>)
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
 8001784:	e00e      	b.n	80017a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <HAL_DMA_Init+0x148>)
 800178e:	4413      	add	r3, r2
 8001790:	4a3d      	ldr	r2, [pc, #244]	; (8001888 <HAL_DMA_Init+0x140>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	009a      	lsls	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <HAL_DMA_Init+0x14c>)
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fa76 	bl	8001ce8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001804:	d102      	bne.n	800180c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001820:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d010      	beq.n	800184c <HAL_DMA_Init+0x104>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b04      	cmp	r3, #4
 8001830:	d80c      	bhi.n	800184c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fa96 	bl	8001d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	e008      	b.n	800185e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020407 	.word	0x40020407
 8001884:	bffdfff8 	.word	0xbffdfff8
 8001888:	cccccccd 	.word	0xcccccccd
 800188c:	40020000 	.word	0x40020000
 8001890:	bffdfbf8 	.word	0xbffdfbf8
 8001894:	40020400 	.word	0x40020400

08001898 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Start_IT+0x20>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e066      	b.n	8001986 <HAL_DMA_Start_IT+0xee>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d155      	bne.n	8001978 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0201 	bic.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f9bb 	bl	8001c6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 020e 	orr.w	r2, r2, #14
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e00f      	b.n	8001930 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0204 	bic.w	r2, r2, #4
 800191e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 020a 	orr.w	r2, r2, #10
 800192e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001964:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e005      	b.n	8001984 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001980:	2302      	movs	r3, #2
 8001982:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001984:	7dfb      	ldrb	r3, [r7, #23]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d005      	beq.n	80019b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2204      	movs	r2, #4
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e037      	b.n	8001a22 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 020e 	bic.w	r2, r2, #14
 80019c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f003 021f 	and.w	r2, r3, #31
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00c      	beq.n	8001a22 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a16:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a20:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d00d      	beq.n	8001a74 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	e047      	b.n	8001b04 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 020e 	bic.w	r2, r2, #14
 8001a82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ac0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ae2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
    }
  }
  return status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2204      	movs	r2, #4
 8001b30:	409a      	lsls	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d026      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x7a>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d021      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0204 	bic.w	r2, r2, #4
 8001b60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2104      	movs	r1, #4
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d071      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b86:	e06c      	b.n	8001c62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2202      	movs	r2, #2
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d02e      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d029      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10b      	bne.n	8001bcc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 020a 	bic.w	r2, r2, #10
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2102      	movs	r1, #2
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d038      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001bf8:	e033      	b.n	8001c62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	2208      	movs	r2, #8
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02a      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d025      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 020e 	bic.w	r2, r2, #14
 8001c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
}
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f003 021f 	and.w	r2, r3, #31
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d108      	bne.n	8001ccc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cca:	e007      	b.n	8001cdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	60da      	str	r2, [r3, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d802      	bhi.n	8001d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e001      	b.n	8001d06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001d04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3b08      	subs	r3, #8
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	009a      	lsls	r2, r3, #2
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40020407 	.word	0x40020407
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020820 	.word	0x40020820
 8001d5c:	cccccccd 	.word	0xcccccccd
 8001d60:	40020880 	.word	0x40020880

08001d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2201      	movs	r2, #1
 8001d92:	409a      	lsls	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	1000823f 	.word	0x1000823f
 8001da8:	40020940 	.word	0x40020940

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dba:	e15a      	b.n	8002072 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 814c 	beq.w	800206c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d005      	beq.n	8001dec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d130      	bne.n	8001e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e22:	2201      	movs	r2, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 0201 	and.w	r2, r3, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d017      	beq.n	8001e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d123      	bne.n	8001ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	6939      	ldr	r1, [r7, #16]
 8001eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0203 	and.w	r2, r3, #3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80a6 	beq.w	800206c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f20:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_GPIO_Init+0x2e4>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f24:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_GPIO_Init+0x2e4>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2c:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_GPIO_Init+0x2e4>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f38:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f62:	d01f      	beq.n	8001fa4 <HAL_GPIO_Init+0x1f8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_GPIO_Init+0x2ec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d019      	beq.n	8001fa0 <HAL_GPIO_Init+0x1f4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a4b      	ldr	r2, [pc, #300]	; (800209c <HAL_GPIO_Init+0x2f0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1f0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a4a      	ldr	r2, [pc, #296]	; (80020a0 <HAL_GPIO_Init+0x2f4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1ec>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a49      	ldr	r2, [pc, #292]	; (80020a4 <HAL_GPIO_Init+0x2f8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1e8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_GPIO_Init+0x2fc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1e4>
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	e00a      	b.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001f90:	2306      	movs	r3, #6
 8001f92:	e008      	b.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e006      	b.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e004      	b.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_GPIO_Init+0x1fa>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	f002 0203 	and.w	r2, r2, #3
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	4093      	lsls	r3, r2
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb6:	4937      	ldr	r1, [pc, #220]	; (8002094 <HAL_GPIO_Init+0x2e8>)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc4:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fe8:	4a30      	ldr	r2, [pc, #192]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fee:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_GPIO_Init+0x300>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002012:	4a26      	ldr	r2, [pc, #152]	; (80020ac <HAL_GPIO_Init+0x300>)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_GPIO_Init+0x300>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_GPIO_Init+0x300>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_GPIO_Init+0x300>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_GPIO_Init+0x300>)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	f47f ae9d 	bne.w	8001dbc <HAL_GPIO_Init+0x10>
  }
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	48000400 	.word	0x48000400
 800209c:	48000800 	.word	0x48000800
 80020a0:	48000c00 	.word	0x48000c00
 80020a4:	48001000 	.word	0x48001000
 80020a8:	48001400 	.word	0x48001400
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f806 	bl	8002110 <HAL_GPIO_EXTI_Callback>
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d141      	bne.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002136:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d131      	bne.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800214a:	4a46      	ldr	r2, [pc, #280]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002154:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800215c:	4a41      	ldr	r2, [pc, #260]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2232      	movs	r2, #50	; 0x32
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	4a3f      	ldr	r2, [pc, #252]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217a:	e002      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3b01      	subs	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d102      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f2      	bne.n	800217c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a2:	d158      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e057      	b.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021a8:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ae:	4a2d      	ldr	r2, [pc, #180]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021b8:	e04d      	b.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c0:	d141      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	d131      	bne.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d6:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e8:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2232      	movs	r2, #50	; 0x32
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002206:	e002      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3b01      	subs	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d102      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f2      	bne.n	8002208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	d112      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e011      	b.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002244:	e007      	b.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002254:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40007000 	.word	0x40007000
 8002268:	20000100 	.word	0x20000100
 800226c:	431bde83 	.word	0x431bde83

08002270 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800227a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227e:	6093      	str	r3, [r2, #8]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40007000 	.word	0x40007000

08002290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e2fe      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d075      	beq.n	800239a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ae:	4b97      	ldr	r3, [pc, #604]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b8:	4b94      	ldr	r3, [pc, #592]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d102      	bne.n	80022ce <HAL_RCC_OscConfig+0x3e>
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_OscConfig+0x44>
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b8d      	ldr	r3, [pc, #564]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05b      	beq.n	8002398 <HAL_RCC_OscConfig+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e2d9      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x74>
 80022f6:	4b85      	ldr	r3, [pc, #532]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a84      	ldr	r2, [pc, #528]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7e      	ldr	r2, [pc, #504]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7b      	ldr	r2, [pc, #492]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002328:	4b78      	ldr	r3, [pc, #480]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a77      	ldr	r2, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b75      	ldr	r3, [pc, #468]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a74      	ldr	r2, [pc, #464]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f8e2 	bl	8001510 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff f8de 	bl	8001510 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e29e      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xc0>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff f8ce 	bl	8001510 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff f8ca 	bl	8001510 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e28a      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238a:	4b60      	ldr	r3, [pc, #384]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0xe8>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d075      	beq.n	8002492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b0:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0x136>
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_OscConfig+0x13c>
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d11f      	bne.n	800240c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023cc:	4b4f      	ldr	r3, [pc, #316]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_OscConfig+0x154>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e25d      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	4946      	ldr	r1, [pc, #280]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023f8:	4b45      	ldr	r3, [pc, #276]	; (8002510 <HAL_RCC_OscConfig+0x280>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f83b 	bl	8001478 <HAL_InitTick>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d043      	beq.n	8002490 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e249      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3c      	ldr	r2, [pc, #240]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f876 	bl	8001510 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff f872 	bl	8001510 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e232      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243a:	4b34      	ldr	r3, [pc, #208]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	492d      	ldr	r1, [pc, #180]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
 800245a:	e01a      	b.n	8002492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2a      	ldr	r2, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff f852 	bl	8001510 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002470:	f7ff f84e 	bl	8001510 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e20e      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1e0>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d041      	beq.n	8002522 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80024a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff f82b 	bl	8001510 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024be:	f7ff f827 	bl	8001510 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1e7      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ef      	beq.n	80024be <HAL_RCC_OscConfig+0x22e>
 80024de:	e020      	b.n	8002522 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff f80e 	bl	8001510 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f6:	e00d      	b.n	8002514 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff f80a 	bl	8001510 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d906      	bls.n	8002514 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1ca      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	20000104 	.word	0x20000104
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ea      	bne.n	80024f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80a6 	beq.w	800267c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002534:	4b84      	ldr	r3, [pc, #528]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_OscConfig+0x2b4>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x2b6>
 8002544:	2300      	movs	r3, #0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	4a7e      	ldr	r2, [pc, #504]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6593      	str	r3, [r2, #88]	; 0x58
 8002556:	4b7c      	ldr	r3, [pc, #496]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002562:	2301      	movs	r3, #1
 8002564:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002566:	4b79      	ldr	r3, [pc, #484]	; (800274c <HAL_RCC_OscConfig+0x4bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d118      	bne.n	80025a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x4bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a75      	ldr	r2, [pc, #468]	; (800274c <HAL_RCC_OscConfig+0x4bc>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257e:	f7fe ffc7 	bl	8001510 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002586:	f7fe ffc3 	bl	8001510 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e183      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002598:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x4bc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_RCC_OscConfig+0x32e>
 80025ac:	4b66      	ldr	r3, [pc, #408]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	4a65      	ldr	r2, [pc, #404]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025bc:	e024      	b.n	8002608 <HAL_RCC_OscConfig+0x378>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d110      	bne.n	80025e8 <HAL_RCC_OscConfig+0x358>
 80025c6:	4b60      	ldr	r3, [pc, #384]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	4a5e      	ldr	r2, [pc, #376]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	4a5a      	ldr	r2, [pc, #360]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_OscConfig+0x378>
 80025e8:	4b57      	ldr	r3, [pc, #348]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a56      	ldr	r2, [pc, #344]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d016      	beq.n	800263e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe ff7e 	bl	8001510 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe ff7a 	bl	8001510 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e138      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ed      	beq.n	8002618 <HAL_RCC_OscConfig+0x388>
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe ff67 	bl	8001510 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe ff63 	bl	8001510 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e121      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ed      	bne.n	8002646 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002670:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a34      	ldr	r2, [pc, #208]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d03c      	beq.n	8002702 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01c      	beq.n	80026ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002696:	4a2c      	ldr	r2, [pc, #176]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe ff36 	bl	8001510 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a8:	f7fe ff32 	bl	8001510 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0f2      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ba:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80026bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ef      	beq.n	80026a8 <HAL_RCC_OscConfig+0x418>
 80026c8:	e01b      	b.n	8002702 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80026cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fe ff19 	bl	8001510 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e2:	f7fe ff15 	bl	8001510 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0d5      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 80026f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ef      	bne.n	80026e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80c9 	beq.w	800289e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b0c      	cmp	r3, #12
 8002716:	f000 8083 	beq.w	8002820 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d15e      	bne.n	80027e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_RCC_OscConfig+0x4b8>)
 8002728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe feef 	bl	8001510 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002734:	e00c      	b.n	8002750 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7fe feeb 	bl	8001510 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d905      	bls.n	8002750 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0ab      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002750:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ec      	bne.n	8002736 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	4b52      	ldr	r3, [pc, #328]	; (80028ac <HAL_RCC_OscConfig+0x61c>)
 8002762:	4013      	ands	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6a11      	ldr	r1, [r2, #32]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276c:	3a01      	subs	r2, #1
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002776:	0212      	lsls	r2, r2, #8
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0552      	lsls	r2, r2, #21
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0652      	lsls	r2, r2, #25
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002796:	06d2      	lsls	r2, r2, #27
 8002798:	430a      	orrs	r2, r1
 800279a:	4943      	ldr	r1, [pc, #268]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 800279c:	4313      	orrs	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a40      	ldr	r2, [pc, #256]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ac:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe feaa 	bl	8001510 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fea6 	bl	8001510 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e066      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x530>
 80027de:	e05e      	b.n	800289e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a30      	ldr	r2, [pc, #192]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 80027e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fe90 	bl	8001510 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fe8c 	bl	8001510 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e04c      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002812:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4924      	ldr	r1, [pc, #144]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_OscConfig+0x620>)
 800281a:	4013      	ands	r3, r2
 800281c:	60cb      	str	r3, [r1, #12]
 800281e:	e03e      	b.n	800289e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e039      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_OscConfig+0x618>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	429a      	cmp	r2, r3
 800283e:	d12c      	bne.n	800289a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	3b01      	subs	r3, #1
 800284c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d123      	bne.n	800289a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d11b      	bne.n	800289a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d113      	bne.n	800289a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d109      	bne.n	800289a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	019f800c 	.word	0x019f800c
 80028b0:	feeefffc 	.word	0xfeeefffc

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e11e      	b.n	8002b0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b91      	ldr	r3, [pc, #580]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d910      	bls.n	80028fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 020f 	bic.w	r2, r3, #15
 80028e2:	498c      	ldr	r1, [pc, #560]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b8a      	ldr	r3, [pc, #552]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e106      	b.n	8002b0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d073      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d129      	bne.n	8002964 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002910:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0f4      	b.n	8002b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002920:	f000 f99e 	bl	8002c60 <RCC_GetSysClockFreqFromPLLSource>
 8002924:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4a7c      	ldr	r2, [pc, #496]	; (8002b1c <HAL_RCC_ClockConfig+0x268>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d93f      	bls.n	80029ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800292e:	4b7a      	ldr	r3, [pc, #488]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d033      	beq.n	80029ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12f      	bne.n	80029ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800294e:	4b72      	ldr	r3, [pc, #456]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002956:	4a70      	ldr	r2, [pc, #448]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e024      	b.n	80029ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d107      	bne.n	800297c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0c6      	b.n	8002b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0be      	b.n	8002b0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800298c:	f000 f8ce 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002990:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4a61      	ldr	r2, [pc, #388]	; (8002b1c <HAL_RCC_ClockConfig+0x268>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d909      	bls.n	80029ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a2:	4a5d      	ldr	r2, [pc, #372]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4957      	ldr	r1, [pc, #348]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c0:	f7fe fda6 	bl	8001510 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fda2 	bl	8001510 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e095      	b.n	8002b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b4e      	ldr	r3, [pc, #312]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4936      	ldr	r1, [pc, #216]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b80      	cmp	r3, #128	; 0x80
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a4a:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d21d      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 020f 	bic.w	r2, r3, #15
 8002a6c:	4929      	ldr	r1, [pc, #164]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fd4c 	bl	8001510 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fd48 	bl	8001510 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e03b      	b.n	8002b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1ed      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4917      	ldr	r1, [pc, #92]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490f      	ldr	r1, [pc, #60]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ade:	f000 f825 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490c      	ldr	r1, [pc, #48]	; (8002b20 <HAL_RCC_ClockConfig+0x26c>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fcb8 	bl	8001478 <HAL_InitTick>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	04c4b400 	.word	0x04c4b400
 8002b20:	08005d5c 	.word	0x08005d5c
 8002b24:	20000100 	.word	0x20000100
 8002b28:	20000104 	.word	0x20000104

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	e047      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b44:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e03e      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d136      	bne.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3301      	adds	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b80:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8a:	68d2      	ldr	r2, [r2, #12]
 8002b8c:	0a12      	lsrs	r2, r2, #8
 8002b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	617b      	str	r3, [r7, #20]
      break;
 8002b98:	e00c      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	0a12      	lsrs	r2, r2, #8
 8002ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0e5b      	lsrs	r3, r3, #25
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	e001      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bd4:	693b      	ldr	r3, [r7, #16]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	016e3600 	.word	0x016e3600

08002bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000100 	.word	0x20000100

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c0c:	f7ff fff0 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08005d6c 	.word	0x08005d6c

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c38:	f7ff ffda 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0adb      	lsrs	r3, r3, #11
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4904      	ldr	r1, [pc, #16]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08005d6c 	.word	0x08005d6c

08002c60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d10c      	bne.n	8002c9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c84:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c8e:	68d2      	ldr	r2, [r2, #12]
 8002c90:	0a12      	lsrs	r2, r2, #8
 8002c92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	617b      	str	r3, [r7, #20]
    break;
 8002c9c:	e00c      	b.n	8002cb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ca8:	68d2      	ldr	r2, [r2, #12]
 8002caa:	0a12      	lsrs	r2, r2, #8
 8002cac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    break;
 8002cb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0e5b      	lsrs	r3, r3, #25
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cd2:	687b      	ldr	r3, [r7, #4]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	016e3600 	.word	0x016e3600
 8002ce8:	00f42400 	.word	0x00f42400

08002cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8098 	beq.w	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a3f      	ldr	r2, [pc, #252]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d36:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d42:	f7fe fbe5 	bl	8001510 <HAL_GetTick>
 8002d46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d48:	e009      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe fbe1 	bl	8001510 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d902      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d5c:	e005      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d5e:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ef      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d159      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d70:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01e      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d019      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a1b      	ldr	r2, [pc, #108]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002db8:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fba1 	bl	8001510 <HAL_GetTick>
 8002dce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd0:	e00b      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe fb9d 	bl	8001510 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d902      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	74fb      	strb	r3, [r7, #19]
            break;
 8002de8:	e006      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ec      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e14:	e008      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	74bb      	strb	r3, [r7, #18]
 8002e1a:	e005      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e28:	7c7b      	ldrb	r3, [r7, #17]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2e:	4ba7      	ldr	r3, [pc, #668]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	4aa6      	ldr	r2, [pc, #664]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e46:	4ba1      	ldr	r3, [pc, #644]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f023 0203 	bic.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	499d      	ldr	r1, [pc, #628]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e68:	4b98      	ldr	r3, [pc, #608]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f023 020c 	bic.w	r2, r3, #12
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4995      	ldr	r1, [pc, #596]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e8a:	4b90      	ldr	r3, [pc, #576]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	498c      	ldr	r1, [pc, #560]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eac:	4b87      	ldr	r3, [pc, #540]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	4984      	ldr	r1, [pc, #528]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ece:	4b7f      	ldr	r3, [pc, #508]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	497b      	ldr	r1, [pc, #492]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ef0:	4b76      	ldr	r3, [pc, #472]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	4973      	ldr	r1, [pc, #460]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f12:	4b6e      	ldr	r3, [pc, #440]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	496a      	ldr	r1, [pc, #424]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f34:	4b65      	ldr	r3, [pc, #404]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4962      	ldr	r1, [pc, #392]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	4959      	ldr	r1, [pc, #356]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f78:	4b54      	ldr	r3, [pc, #336]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	4951      	ldr	r1, [pc, #324]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	4948      	ldr	r1, [pc, #288]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d015      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fbc:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4940      	ldr	r1, [pc, #256]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d015      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	4932      	ldr	r1, [pc, #200]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003012:	d105      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a2c      	ldr	r2, [pc, #176]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800301e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	4924      	ldr	r1, [pc, #144]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304a:	d105      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003056:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	4916      	ldr	r1, [pc, #88]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003082:	d105      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800308e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d019      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4908      	ldr	r1, [pc, #32]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ba:	d109      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a02      	ldr	r2, [pc, #8]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c6:	60d3      	str	r3, [r2, #12]
 80030c8:	e002      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030dc:	4b29      	ldr	r3, [pc, #164]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4926      	ldr	r1, [pc, #152]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030fa:	d105      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d015      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003122:	4918      	ldr	r1, [pc, #96]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d105      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800313a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800314e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800316a:	d105      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003176:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003178:	7cbb      	ldrb	r3, [r7, #18]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000

08003188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e054      	b.n	8003244 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d111      	bne.n	80031ca <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fdd4 	bl	8003d5c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a23      	ldr	r2, [pc, #140]	; (800324c <HAL_TIM_Base_Init+0xc4>)
 80031c0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fce3 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	08001295 	.word	0x08001295

08003250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d001      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e054      	b.n	8003312 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a26      	ldr	r2, [pc, #152]	; (8003320 <HAL_TIM_Base_Start_IT+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d01d      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a22      	ldr	r2, [pc, #136]	; (8003324 <HAL_TIM_Base_Start_IT+0xd4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a21      	ldr	r2, [pc, #132]	; (8003328 <HAL_TIM_Base_Start_IT+0xd8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_TIM_Base_Start_IT+0xdc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <HAL_TIM_Base_Start_IT+0xe0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <HAL_TIM_Base_Start_IT+0xe4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x80>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <HAL_TIM_Base_Start_IT+0xe8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d115      	bne.n	80032fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_TIM_Base_Start_IT+0xec>)
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d015      	beq.n	800330e <HAL_TIM_Base_Start_IT+0xbe>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d011      	beq.n	800330e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fa:	e008      	b.n	800330e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e000      	b.n	8003310 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00
 8003330:	40013400 	.word	0x40013400
 8003334:	40014000 	.word	0x40014000
 8003338:	40015000 	.word	0x40015000
 800333c:	00010007 	.word	0x00010007

08003340 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e04c      	b.n	80033ee <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d111      	bne.n	8003384 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fcf7 	bl	8003d5c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <HAL_TIM_OnePulse_Init+0xb8>)
 800337a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fc06 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0208 	bic.w	r2, r2, #8
 80033aa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	080033fd 	.word	0x080033fd

080033fc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003420:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003428:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003430:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003438:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d108      	bne.n	8003452 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003446:	7b7b      	ldrb	r3, [r7, #13]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d102      	bne.n	8003452 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800344c:	7b3b      	ldrb	r3, [r7, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e059      	b.n	800350a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0202 	orr.w	r2, r2, #2
 8003484:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0204 	orr.w	r2, r2, #4
 8003494:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fc36 	bl	8003d10 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	2104      	movs	r1, #4
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fc2f 	bl	8003d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a15      	ldr	r2, [pc, #84]	; (8003518 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a11      	ldr	r2, [pc, #68]	; (8003524 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_TIM_OnePulse_Start_IT+0xde>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40013400 	.word	0x40013400
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400
 8003524:	40014800 	.word	0x40014800
 8003528:	40015000 	.word	0x40015000

0800352c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d026      	beq.n	800359c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d021      	beq.n	800359c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0202 	mvn.w	r2, #2
 8003560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
 8003580:	e009      	b.n	8003596 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d026      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d021      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0204 	mvn.w	r2, #4
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e009      	b.n	80035ee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d026      	beq.n	800364c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d021      	beq.n	800364c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0208 	mvn.w	r2, #8
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
 8003630:	e009      	b.n	8003646 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d026      	beq.n	80036a4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0210 	mvn.w	r2, #16
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2208      	movs	r2, #8
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
 8003688:	e009      	b.n	800369e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0201 	mvn.w	r2, #1
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80036f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00e      	beq.n	800374e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0220 	mvn.w	r2, #32
 800376a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00e      	beq.n	800379e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80037e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	460b      	mov	r3, r1
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e14a      	b.n	8003b9a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 80dd 	bne.w	8003acc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	2b1f      	cmp	r3, #31
 8003916:	f200 80d6 	bhi.w	8003ac6 <HAL_TIM_RegisterCallback+0x1de>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <HAL_TIM_RegisterCallback+0x38>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	080039a1 	.word	0x080039a1
 8003924:	080039a9 	.word	0x080039a9
 8003928:	080039b1 	.word	0x080039b1
 800392c:	080039b9 	.word	0x080039b9
 8003930:	080039c1 	.word	0x080039c1
 8003934:	080039c9 	.word	0x080039c9
 8003938:	080039d1 	.word	0x080039d1
 800393c:	080039d9 	.word	0x080039d9
 8003940:	080039e1 	.word	0x080039e1
 8003944:	080039e9 	.word	0x080039e9
 8003948:	080039f1 	.word	0x080039f1
 800394c:	080039f9 	.word	0x080039f9
 8003950:	08003a01 	.word	0x08003a01
 8003954:	08003a09 	.word	0x08003a09
 8003958:	08003a13 	.word	0x08003a13
 800395c:	08003a1d 	.word	0x08003a1d
 8003960:	08003a27 	.word	0x08003a27
 8003964:	08003a31 	.word	0x08003a31
 8003968:	08003a3b 	.word	0x08003a3b
 800396c:	08003a45 	.word	0x08003a45
 8003970:	08003a4f 	.word	0x08003a4f
 8003974:	08003a59 	.word	0x08003a59
 8003978:	08003a63 	.word	0x08003a63
 800397c:	08003a6d 	.word	0x08003a6d
 8003980:	08003a77 	.word	0x08003a77
 8003984:	08003a81 	.word	0x08003a81
 8003988:	08003a8b 	.word	0x08003a8b
 800398c:	08003a95 	.word	0x08003a95
 8003990:	08003a9f 	.word	0x08003a9f
 8003994:	08003aa9 	.word	0x08003aa9
 8003998:	08003ab3 	.word	0x08003ab3
 800399c:	08003abd 	.word	0x08003abd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80039a6:	e0f7      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80039ae:	e0f3      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80039b6:	e0ef      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80039be:	e0eb      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80039c6:	e0e7      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80039ce:	e0e3      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80039d6:	e0df      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80039de:	e0db      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80039e6:	e0d7      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80039ee:	e0d3      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80039f6:	e0cf      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80039fe:	e0cb      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003a06:	e0c7      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003a10:	e0c2      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003a1a:	e0bd      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003a24:	e0b8      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003a2e:	e0b3      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003a38:	e0ae      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003a42:	e0a9      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003a4c:	e0a4      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003a56:	e09f      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003a60:	e09a      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003a6a:	e095      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003a74:	e090      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003a7e:	e08b      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003a88:	e086      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8003a92:	e081      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003a9c:	e07c      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8003aa6:	e077      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8003ab0:	e072      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003aba:	e06d      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003ac4:	e068      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
        break;
 8003aca:	e065      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d15d      	bne.n	8003b94 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003ad8:	7afb      	ldrb	r3, [r7, #11]
 8003ada:	2b0d      	cmp	r3, #13
 8003adc:	d857      	bhi.n	8003b8e <HAL_TIM_RegisterCallback+0x2a6>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <HAL_TIM_RegisterCallback+0x1fc>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b1d 	.word	0x08003b1d
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003b2d 	.word	0x08003b2d
 8003af0:	08003b35 	.word	0x08003b35
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b4d 	.word	0x08003b4d
 8003b00:	08003b55 	.word	0x08003b55
 8003b04:	08003b5d 	.word	0x08003b5d
 8003b08:	08003b65 	.word	0x08003b65
 8003b0c:	08003b6d 	.word	0x08003b6d
 8003b10:	08003b75 	.word	0x08003b75
 8003b14:	08003b7d 	.word	0x08003b7d
 8003b18:	08003b85 	.word	0x08003b85
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003b22:	e039      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003b2a:	e035      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003b32:	e031      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003b3a:	e02d      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003b42:	e029      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003b4a:	e025      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003b52:	e021      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003b5a:	e01d      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003b62:	e019      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003b6a:	e015      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003b72:	e011      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003b7a:	e00d      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003b82:	e009      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003b8c:	e004      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
        break;
 8003b92:	e001      	b.n	8003b98 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a4c      	ldr	r2, [pc, #304]	; (8003cec <TIM_Base_SetConfig+0x144>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d017      	beq.n	8003bf0 <TIM_Base_SetConfig+0x48>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d013      	beq.n	8003bf0 <TIM_Base_SetConfig+0x48>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a49      	ldr	r2, [pc, #292]	; (8003cf0 <TIM_Base_SetConfig+0x148>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x48>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a48      	ldr	r2, [pc, #288]	; (8003cf4 <TIM_Base_SetConfig+0x14c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x48>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a47      	ldr	r2, [pc, #284]	; (8003cf8 <TIM_Base_SetConfig+0x150>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x48>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a46      	ldr	r2, [pc, #280]	; (8003cfc <TIM_Base_SetConfig+0x154>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x48>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a45      	ldr	r2, [pc, #276]	; (8003d00 <TIM_Base_SetConfig+0x158>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a39      	ldr	r2, [pc, #228]	; (8003cec <TIM_Base_SetConfig+0x144>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d023      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d01f      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <TIM_Base_SetConfig+0x148>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01b      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a35      	ldr	r2, [pc, #212]	; (8003cf4 <TIM_Base_SetConfig+0x14c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d017      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a34      	ldr	r2, [pc, #208]	; (8003cf8 <TIM_Base_SetConfig+0x150>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a33      	ldr	r2, [pc, #204]	; (8003cfc <TIM_Base_SetConfig+0x154>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a33      	ldr	r2, [pc, #204]	; (8003d04 <TIM_Base_SetConfig+0x15c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a32      	ldr	r2, [pc, #200]	; (8003d08 <TIM_Base_SetConfig+0x160>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a31      	ldr	r2, [pc, #196]	; (8003d0c <TIM_Base_SetConfig+0x164>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0xaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <TIM_Base_SetConfig+0x158>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a18      	ldr	r2, [pc, #96]	; (8003cec <TIM_Base_SetConfig+0x144>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <TIM_Base_SetConfig+0x110>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <TIM_Base_SetConfig+0x154>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_Base_SetConfig+0x110>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <TIM_Base_SetConfig+0x15c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_Base_SetConfig+0x110>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <TIM_Base_SetConfig+0x160>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_Base_SetConfig+0x110>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <TIM_Base_SetConfig+0x164>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_Base_SetConfig+0x110>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <TIM_Base_SetConfig+0x158>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d103      	bne.n	8003cc0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f023 0201 	bic.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	611a      	str	r2, [r3, #16]
  }
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40013400 	.word	0x40013400
 8003d00:	40015000 	.word	0x40015000
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2201      	movs	r2, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	401a      	ands	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <TIM_ResetCallback+0xa4>)
 8003d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <TIM_ResetCallback+0xa8>)
 8003d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <TIM_ResetCallback+0xac>)
 8003d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <TIM_ResetCallback+0xb0>)
 8003d80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <TIM_ResetCallback+0xb4>)
 8003d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <TIM_ResetCallback+0xb8>)
 8003d90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <TIM_ResetCallback+0xbc>)
 8003d98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <TIM_ResetCallback+0xc0>)
 8003da0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <TIM_ResetCallback+0xc4>)
 8003da8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <TIM_ResetCallback+0xc8>)
 8003db0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <TIM_ResetCallback+0xcc>)
 8003db8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <TIM_ResetCallback+0xd0>)
 8003dc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <TIM_ResetCallback+0xd4>)
 8003dc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <TIM_ResetCallback+0xd8>)
 8003dd0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <TIM_ResetCallback+0xdc>)
 8003dd8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <TIM_ResetCallback+0xe0>)
 8003de0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <TIM_ResetCallback+0xe4>)
 8003de8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <TIM_ResetCallback+0xe8>)
 8003df0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	0800381f 	.word	0x0800381f
 8003e04:	08003833 	.word	0x08003833
 8003e08:	080038ab 	.word	0x080038ab
 8003e0c:	080038bf 	.word	0x080038bf
 8003e10:	0800385b 	.word	0x0800385b
 8003e14:	0800386f 	.word	0x0800386f
 8003e18:	08003847 	.word	0x08003847
 8003e1c:	08003883 	.word	0x08003883
 8003e20:	08003897 	.word	0x08003897
 8003e24:	080038d3 	.word	0x080038d3
 8003e28:	08003e49 	.word	0x08003e49
 8003e2c:	08003e5d 	.word	0x08003e5d
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e85 	.word	0x08003e85
 8003e38:	08003e99 	.word	0x08003e99
 8003e3c:	08003ead 	.word	0x08003ead
 8003e40:	08003ec1 	.word	0x08003ec1
 8003e44:	08003ed5 	.word	0x08003ed5

08003e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e050      	b.n	8003f9c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d114      	bne.n	8003f2e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fdc5 	bl	8004a9c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <HAL_UART_Init+0xbc>)
 8003f20:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2224      	movs	r2, #36	; 0x24
 8003f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f001 f8f2 	bl	8005138 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fdf3 	bl	8004b40 <UART_SetConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e01b      	b.n	8003f9c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f001 f971 	bl	800527c <UART_CheckIdleState>
 8003f9a:	4603      	mov	r3, r0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	08000fd5 	.word	0x08000fd5

08003fa8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e09c      	b.n	800410e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d16c      	bne.n	80040b8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8003fde:	7afb      	ldrb	r3, [r7, #11]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d85e      	bhi.n	80040a2 <HAL_UART_RegisterCallback+0xfa>
 8003fe4:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <HAL_UART_RegisterCallback+0x44>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	0800402b 	.word	0x0800402b
 8003ff4:	08004035 	.word	0x08004035
 8003ff8:	0800403f 	.word	0x0800403f
 8003ffc:	08004049 	.word	0x08004049
 8004000:	08004053 	.word	0x08004053
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004067 	.word	0x08004067
 800400c:	08004071 	.word	0x08004071
 8004010:	0800407b 	.word	0x0800407b
 8004014:	08004085 	.word	0x08004085
 8004018:	0800408f 	.word	0x0800408f
 800401c:	08004099 	.word	0x08004099
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004028:	e070      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004032:	e06b      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800403c:	e066      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004046:	e061      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004050:	e05c      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800405a:	e057      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004064:	e052      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800406e:	e04d      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8004078:	e048      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8004082:	e043      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 800408c:	e03e      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8004096:	e039      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 80040a0:	e034      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	75fb      	strb	r3, [r7, #23]
        break;
 80040b6:	e029      	b.n	800410c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11a      	bne.n	80040f8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80040c2:	7afb      	ldrb	r3, [r7, #11]
 80040c4:	2b0b      	cmp	r3, #11
 80040c6:	d002      	beq.n	80040ce <HAL_UART_RegisterCallback+0x126>
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	d005      	beq.n	80040d8 <HAL_UART_RegisterCallback+0x130>
 80040cc:	e009      	b.n	80040e2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 80040d6:	e019      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 80040e0:	e014      	b.n	800410c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
        break;
 80040f6:	e009      	b.n	800410c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
}
 800410e:	4618      	mov	r0, r3
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop

0800411c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	2b20      	cmp	r3, #32
 8004132:	d167      	bne.n	8004204 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Transmit_DMA+0x24>
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e060      	b.n	8004206 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2221      	movs	r2, #33	; 0x21
 8004166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d028      	beq.n	80041c4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004176:	4a26      	ldr	r2, [pc, #152]	; (8004210 <HAL_UART_Transmit_DMA+0xf4>)
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417e:	4a25      	ldr	r2, [pc, #148]	; (8004214 <HAL_UART_Transmit_DMA+0xf8>)
 8004180:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004186:	4a24      	ldr	r2, [pc, #144]	; (8004218 <HAL_UART_Transmit_DMA+0xfc>)
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800418e:	2200      	movs	r2, #0
 8004190:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	4619      	mov	r1, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3328      	adds	r3, #40	; 0x28
 80041a2:	461a      	mov	r2, r3
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	f7fd fb77 	bl	8001898 <HAL_DMA_Start_IT>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2210      	movs	r2, #16
 80041b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e020      	b.n	8004206 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	613b      	str	r3, [r7, #16]
   return(result);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	623a      	str	r2, [r7, #32]
 80041ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	69f9      	ldr	r1, [r7, #28]
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3728      	adds	r7, #40	; 0x28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	08005747 	.word	0x08005747
 8004214:	080057e5 	.word	0x080057e5
 8004218:	0800597f 	.word	0x0800597f

0800421c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004230:	2b20      	cmp	r3, #32
 8004232:	d137      	bne.n	80042a4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Receive_DMA+0x24>
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e030      	b.n	80042a6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <HAL_UART_Receive_DMA+0x94>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01f      	beq.n	8004294 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69f9      	ldr	r1, [r7, #28]
 8004286:	6a3a      	ldr	r2, [r7, #32]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	61bb      	str	r3, [r7, #24]
   return(result);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	461a      	mov	r2, r3
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f001 f906 	bl	80054ac <UART_Start_Receive_DMA>
 80042a0:	4603      	mov	r3, r0
 80042a2:	e000      	b.n	80042a6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3728      	adds	r7, #40	; 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40008000 	.word	0x40008000

080042b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b0ba      	sub	sp, #232	; 0xe8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80042de:	f640 030f 	movw	r3, #2063	; 0x80f
 80042e2:	4013      	ands	r3, r2
 80042e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80042e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11b      	bne.n	8004328 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 82f3 	beq.w	8004904 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
      }
      return;
 8004326:	e2ed      	b.n	8004904 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8129 	beq.w	8004584 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004332:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004336:	4b90      	ldr	r3, [pc, #576]	; (8004578 <HAL_UART_IRQHandler+0x2c4>)
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800433e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004342:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_UART_IRQHandler+0x2c8>)
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 811c 	beq.w	8004584 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800434c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d011      	beq.n	800437c <HAL_UART_IRQHandler+0xc8>
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2201      	movs	r2, #1
 800436a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d011      	beq.n	80043ac <HAL_UART_IRQHandler+0xf8>
 8004388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2202      	movs	r2, #2
 800439a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d011      	beq.n	80043dc <HAL_UART_IRQHandler+0x128>
 80043b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2204      	movs	r2, #4
 80043ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f043 0202 	orr.w	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80043f8:	4b5f      	ldr	r3, [pc, #380]	; (8004578 <HAL_UART_IRQHandler+0x2c4>)
 80043fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2208      	movs	r2, #8
 8004406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	f043 0208 	orr.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004420:	2b00      	cmp	r3, #0
 8004422:	d012      	beq.n	800444a <HAL_UART_IRQHandler+0x196>
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00c      	beq.n	800444a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8259 	beq.w	8004908 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d013      	beq.n	800448a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800446e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d058      	beq.n	8004560 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 f8e3 	bl	800567a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d148      	bne.n	8004554 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1d9      	bne.n	80044c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d017      	beq.n	8004548 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_UART_IRQHandler+0x2cc>)
 8004520:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd fa89 	bl	8001a40 <HAL_DMA_Abort_IT>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01f      	beq.n	8004574 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004542:	4610      	mov	r0, r2
 8004544:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004546:	e015      	b.n	8004574 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004552:	e00f      	b.n	8004574 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455e:	e009      	b.n	8004574 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004572:	e1c9      	b.n	8004908 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	bf00      	nop
    return;
 8004576:	e1c7      	b.n	8004908 <HAL_UART_IRQHandler+0x654>
 8004578:	10000001 	.word	0x10000001
 800457c:	04000120 	.word	0x04000120
 8004580:	08005a03 	.word	0x08005a03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 8157 	bne.w	800483c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8150 	beq.w	800483c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8149 	beq.w	800483c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2210      	movs	r2, #16
 80045b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	f040 80bd 	bne.w	800473c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8199 	beq.w	800490c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e4:	429a      	cmp	r2, r3
 80045e6:	f080 8191 	bcs.w	800490c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	f040 8087 	bne.w	8004716 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800461c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004636:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800463e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800464a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1da      	bne.n	8004608 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800467a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800467e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e1      	bne.n	8004652 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800469e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e3      	bne.n	800468e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80046f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e4      	bne.n	80046d4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004710:	4618      	mov	r0, r3
 8004712:	f7fd f93c 	bl	800198e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800472e:	b292      	uxth	r2, r2
 8004730:	1a8a      	subs	r2, r1, r2
 8004732:	b292      	uxth	r2, r2
 8004734:	4611      	mov	r1, r2
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800473a:	e0e7      	b.n	800490c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004748:	b29b      	uxth	r3, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80d9 	beq.w	8004910 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800475e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80d4 	beq.w	8004910 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800477c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800478a:	647b      	str	r3, [r7, #68]	; 0x44
 800478c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e4      	bne.n	8004768 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	623b      	str	r3, [r7, #32]
   return(result);
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047c6:	633a      	str	r2, [r7, #48]	; 0x30
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e1      	bne.n	800479e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0310 	bic.w	r3, r3, #16
 8004802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	617b      	str	r3, [r7, #20]
   return(result);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e4      	bne.n	80047ee <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004830:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004834:	4611      	mov	r1, r2
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800483a:	e069      	b.n	8004910 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_UART_IRQHandler+0x5b6>
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800485c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004868:	e055      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d014      	beq.n	80048a0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004892:	2b00      	cmp	r3, #0
 8004894:	d03e      	beq.n	8004914 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
    }
    return;
 800489e:	e039      	b.n	8004914 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <HAL_UART_IRQHandler+0x60c>
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f001 f8ba 	bl	8005a32 <UART_EndTransmit_IT>
    return;
 80048be:	e02a      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80048c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_UART_IRQHandler+0x630>
 80048cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048e2:	e018      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <HAL_UART_IRQHandler+0x662>
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da0e      	bge.n	8004916 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004902:	e008      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
      return;
 8004904:	bf00      	nop
 8004906:	e006      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
    return;
 8004908:	bf00      	nop
 800490a:	e004      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
      return;
 800490c:	bf00      	nop
 800490e:	e002      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
      return;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <HAL_UART_IRQHandler+0x662>
    return;
 8004914:	bf00      	nop
  }
}
 8004916:	37e8      	adds	r7, #232	; 0xe8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	615a      	str	r2, [r3, #20]
  }
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40008000 	.word	0x40008000

08004a0c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <HAL_UART_EnableReceiverTimeout+0x70>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d027      	beq.n	8004a6e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d120      	bne.n	8004a6a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_EnableReceiverTimeout+0x2a>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e01c      	b.n	8004a70 <HAL_UART_EnableReceiverTimeout+0x64>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2224      	movs	r2, #36	; 0x24
 8004a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a54:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e002      	b.n	8004a70 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e000      	b.n	8004a70 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40008000 	.word	0x40008000

08004a80 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a1a      	ldr	r2, [pc, #104]	; (8004b10 <UART_InitCallbacksToDefault+0x74>)
 8004aa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <UART_InitCallbacksToDefault+0x78>)
 8004ab0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <UART_InitCallbacksToDefault+0x7c>)
 8004ab8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <UART_InitCallbacksToDefault+0x80>)
 8004ac0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <UART_InitCallbacksToDefault+0x84>)
 8004ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <UART_InitCallbacksToDefault+0x88>)
 8004ad0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <UART_InitCallbacksToDefault+0x8c>)
 8004ad8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <UART_InitCallbacksToDefault+0x90>)
 8004ae0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <UART_InitCallbacksToDefault+0x94>)
 8004ae8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a11      	ldr	r2, [pc, #68]	; (8004b34 <UART_InitCallbacksToDefault+0x98>)
 8004af0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <UART_InitCallbacksToDefault+0x9c>)
 8004af8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0f      	ldr	r2, [pc, #60]	; (8004b3c <UART_InitCallbacksToDefault+0xa0>)
 8004b00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	08004931 	.word	0x08004931
 8004b14:	0800491d 	.word	0x0800491d
 8004b18:	08004959 	.word	0x08004959
 8004b1c:	08004945 	.word	0x08004945
 8004b20:	0800496d 	.word	0x0800496d
 8004b24:	08004981 	.word	0x08004981
 8004b28:	08004995 	.word	0x08004995
 8004b2c:	080049a9 	.word	0x080049a9
 8004b30:	08005a8d 	.word	0x08005a8d
 8004b34:	08005aa1 	.word	0x08005aa1
 8004b38:	08005ab5 	.word	0x08005ab5
 8004b3c:	080049bd 	.word	0x080049bd

08004b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b08c      	sub	sp, #48	; 0x30
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4baa      	ldr	r3, [pc, #680]	; (8004e18 <UART_SetConfig+0x2d8>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a9f      	ldr	r2, [pc, #636]	; (8004e1c <UART_SetConfig+0x2dc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004bb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f023 010f 	bic.w	r1, r3, #15
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a90      	ldr	r2, [pc, #576]	; (8004e20 <UART_SetConfig+0x2e0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d125      	bne.n	8004c30 <UART_SetConfig+0xf0>
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d81a      	bhi.n	8004c28 <UART_SetConfig+0xe8>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0xb8>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0e:	e116      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c16:	e112      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1e:	e10e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c26:	e10a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2e:	e106      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a7c      	ldr	r2, [pc, #496]	; (8004e28 <UART_SetConfig+0x2e8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d138      	bne.n	8004cac <UART_SetConfig+0x16c>
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d82d      	bhi.n	8004ca4 <UART_SetConfig+0x164>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x110>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004ca5 	.word	0x08004ca5
 8004c5c:	08004ca5 	.word	0x08004ca5
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004ca5 	.word	0x08004ca5
 8004c68:	08004ca5 	.word	0x08004ca5
 8004c6c:	08004ca5 	.word	0x08004ca5
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8a:	e0d8      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c92:	e0d4      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e0d0      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca2:	e0cc      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004caa:	e0c8      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	; (8004e2c <UART_SetConfig+0x2ec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d125      	bne.n	8004d02 <UART_SetConfig+0x1c2>
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d016      	beq.n	8004cf2 <UART_SetConfig+0x1b2>
 8004cc4:	2b30      	cmp	r3, #48	; 0x30
 8004cc6:	d818      	bhi.n	8004cfa <UART_SetConfig+0x1ba>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d00a      	beq.n	8004ce2 <UART_SetConfig+0x1a2>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d814      	bhi.n	8004cfa <UART_SetConfig+0x1ba>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <UART_SetConfig+0x19a>
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d008      	beq.n	8004cea <UART_SetConfig+0x1aa>
 8004cd8:	e00f      	b.n	8004cfa <UART_SetConfig+0x1ba>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce0:	e0ad      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce8:	e0a9      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cea:	2304      	movs	r3, #4
 8004cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf0:	e0a5      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf8:	e0a1      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d00:	e09d      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <UART_SetConfig+0x2f0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d125      	bne.n	8004d58 <UART_SetConfig+0x218>
 8004d0c:	4b45      	ldr	r3, [pc, #276]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d16:	2bc0      	cmp	r3, #192	; 0xc0
 8004d18:	d016      	beq.n	8004d48 <UART_SetConfig+0x208>
 8004d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1c:	d818      	bhi.n	8004d50 <UART_SetConfig+0x210>
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d00a      	beq.n	8004d38 <UART_SetConfig+0x1f8>
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d814      	bhi.n	8004d50 <UART_SetConfig+0x210>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <UART_SetConfig+0x1f0>
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d008      	beq.n	8004d40 <UART_SetConfig+0x200>
 8004d2e:	e00f      	b.n	8004d50 <UART_SetConfig+0x210>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d36:	e082      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3e:	e07e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d46:	e07a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e076      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d56:	e072      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <UART_SetConfig+0x2f4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d12a      	bne.n	8004db8 <UART_SetConfig+0x278>
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d70:	d01a      	beq.n	8004da8 <UART_SetConfig+0x268>
 8004d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d76:	d81b      	bhi.n	8004db0 <UART_SetConfig+0x270>
 8004d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7c:	d00c      	beq.n	8004d98 <UART_SetConfig+0x258>
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d82:	d815      	bhi.n	8004db0 <UART_SetConfig+0x270>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <UART_SetConfig+0x250>
 8004d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8c:	d008      	beq.n	8004da0 <UART_SetConfig+0x260>
 8004d8e:	e00f      	b.n	8004db0 <UART_SetConfig+0x270>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e052      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e04e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e04a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e046      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e042      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <UART_SetConfig+0x2dc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d13a      	bne.n	8004e38 <UART_SetConfig+0x2f8>
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd0:	d01a      	beq.n	8004e08 <UART_SetConfig+0x2c8>
 8004dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd6:	d81b      	bhi.n	8004e10 <UART_SetConfig+0x2d0>
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ddc:	d00c      	beq.n	8004df8 <UART_SetConfig+0x2b8>
 8004dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de2:	d815      	bhi.n	8004e10 <UART_SetConfig+0x2d0>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <UART_SetConfig+0x2b0>
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dec:	d008      	beq.n	8004e00 <UART_SetConfig+0x2c0>
 8004dee:	e00f      	b.n	8004e10 <UART_SetConfig+0x2d0>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df6:	e022      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	e01e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e06:	e01a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e016      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e012      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e18:	cfff69f3 	.word	0xcfff69f3
 8004e1c:	40008000 	.word	0x40008000
 8004e20:	40013800 	.word	0x40013800
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	40004800 	.word	0x40004800
 8004e30:	40004c00 	.word	0x40004c00
 8004e34:	40005000 	.word	0x40005000
 8004e38:	2310      	movs	r3, #16
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4aae      	ldr	r2, [pc, #696]	; (80050fc <UART_SetConfig+0x5bc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	f040 8097 	bne.w	8004f78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d823      	bhi.n	8004e9a <UART_SetConfig+0x35a>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x318>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e9b 	.word	0x08004e9b
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e9b 	.word	0x08004e9b
 8004e68:	08004e8b 	.word	0x08004e8b
 8004e6c:	08004e9b 	.word	0x08004e9b
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004e9b 	.word	0x08004e9b
 8004e78:	08004e93 	.word	0x08004e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fd fec4 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8004e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e82:	e010      	b.n	8004ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e84:	4b9e      	ldr	r3, [pc, #632]	; (8005100 <UART_SetConfig+0x5c0>)
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e88:	e00d      	b.n	8004ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8a:	f7fd fe4f 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e90:	e009      	b.n	8004ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e98:	e005      	b.n	8004ea6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8130 	beq.w	800510e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	4a94      	ldr	r2, [pc, #592]	; (8005104 <UART_SetConfig+0x5c4>)
 8004eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d305      	bcc.n	8004ede <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d903      	bls.n	8004ee6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ee4:	e113      	b.n	800510e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	60fa      	str	r2, [r7, #12]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	4a84      	ldr	r2, [pc, #528]	; (8005104 <UART_SetConfig+0x5c4>)
 8004ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2200      	movs	r2, #0
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f08:	f7fb f986 	bl	8000218 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	020b      	lsls	r3, r1, #8
 8004f1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f22:	0202      	lsls	r2, r0, #8
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	6849      	ldr	r1, [r1, #4]
 8004f28:	0849      	lsrs	r1, r1, #1
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	4605      	mov	r5, r0
 8004f30:	eb12 0804 	adds.w	r8, r2, r4
 8004f34:	eb43 0905 	adc.w	r9, r3, r5
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	469a      	mov	sl, r3
 8004f40:	4693      	mov	fp, r2
 8004f42:	4652      	mov	r2, sl
 8004f44:	465b      	mov	r3, fp
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f7fb f965 	bl	8000218 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4613      	mov	r3, r2
 8004f54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5c:	d308      	bcc.n	8004f70 <UART_SetConfig+0x430>
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f64:	d204      	bcs.n	8004f70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a3a      	ldr	r2, [r7, #32]
 8004f6c:	60da      	str	r2, [r3, #12]
 8004f6e:	e0ce      	b.n	800510e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f76:	e0ca      	b.n	800510e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f80:	d166      	bne.n	8005050 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d827      	bhi.n	8004fda <UART_SetConfig+0x49a>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x450>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	08004fdb 	.word	0x08004fdb
 8004fa0:	08004fcb 	.word	0x08004fcb
 8004fa4:	08004fdb 	.word	0x08004fdb
 8004fa8:	08004fdb 	.word	0x08004fdb
 8004fac:	08004fdb 	.word	0x08004fdb
 8004fb0:	08004fd3 	.word	0x08004fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb4:	f7fd fe28 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fba:	e014      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fd fe3a 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc2:	e010      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc4:	4b4e      	ldr	r3, [pc, #312]	; (8005100 <UART_SetConfig+0x5c0>)
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fc8:	e00d      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fca:	f7fd fdaf 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fd0:	e009      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fd8:	e005      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8090 	beq.w	800510e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	4a44      	ldr	r2, [pc, #272]	; (8005104 <UART_SetConfig+0x5c4>)
 8004ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005000:	005a      	lsls	r2, r3, #1
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	441a      	add	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d916      	bls.n	8005048 <UART_SetConfig+0x508>
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d212      	bcs.n	8005048 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f023 030f 	bic.w	r3, r3, #15
 800502a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	b29a      	uxth	r2, r3
 8005038:	8bfb      	ldrh	r3, [r7, #30]
 800503a:	4313      	orrs	r3, r2
 800503c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	8bfa      	ldrh	r2, [r7, #30]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	e062      	b.n	800510e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800504e:	e05e      	b.n	800510e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005054:	2b08      	cmp	r3, #8
 8005056:	d828      	bhi.n	80050aa <UART_SetConfig+0x56a>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0x520>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	080050ab 	.word	0x080050ab
 8005070:	0800509b 	.word	0x0800509b
 8005074:	080050ab 	.word	0x080050ab
 8005078:	080050ab 	.word	0x080050ab
 800507c:	080050ab 	.word	0x080050ab
 8005080:	080050a3 	.word	0x080050a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005084:	f7fd fdc0 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800508a:	e014      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800508c:	f7fd fdd2 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8005090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005092:	e010      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <UART_SetConfig+0x5c0>)
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005098:	e00d      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509a:	f7fd fd47 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050a0:	e009      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050a8:	e005      	b.n	80050b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050b4:	bf00      	nop
    }

    if (pclk != 0U)
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d028      	beq.n	800510e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	4a10      	ldr	r2, [pc, #64]	; (8005104 <UART_SetConfig+0x5c4>)
 80050c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	441a      	add	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	2b0f      	cmp	r3, #15
 80050e4:	d910      	bls.n	8005108 <UART_SetConfig+0x5c8>
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d20c      	bcs.n	8005108 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e009      	b.n	800510e <UART_SetConfig+0x5ce>
 80050fa:	bf00      	nop
 80050fc:	40008000 	.word	0x40008000
 8005100:	00f42400 	.word	0x00f42400
 8005104:	08005d74 	.word	0x08005d74
      }
      else
      {
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2201      	movs	r2, #1
 8005112:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2201      	movs	r2, #1
 800511a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800512a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800512e:	4618      	mov	r0, r3
 8005130:	3730      	adds	r7, #48	; 0x30
 8005132:	46bd      	mov	sp, r7
 8005134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01a      	beq.n	800524e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	d10a      	bne.n	800524e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b098      	sub	sp, #96	; 0x60
 8005280:	af02      	add	r7, sp, #8
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800528c:	f7fc f940 	bl	8001510 <HAL_GetTick>
 8005290:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d12f      	bne.n	8005300 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f88e 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d022      	beq.n	8005300 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ce:	653b      	str	r3, [r7, #80]	; 0x50
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
 80052da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e6      	bne.n	80052ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e063      	b.n	80053c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d149      	bne.n	80053a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800530e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005316:	2200      	movs	r2, #0
 8005318:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f857 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d03c      	beq.n	80053a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	623b      	str	r3, [r7, #32]
   return(result);
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
 8005348:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800534c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	60fb      	str	r3, [r7, #12]
   return(result);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	64bb      	str	r3, [r7, #72]	; 0x48
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800537a:	61fa      	str	r2, [r7, #28]
 800537c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	69b9      	ldr	r1, [r7, #24]
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	617b      	str	r3, [r7, #20]
   return(result);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e5      	bne.n	800535a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e012      	b.n	80053c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3758      	adds	r7, #88	; 0x58
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e0:	e04f      	b.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d04b      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fc f891 	bl	8001510 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <UART_WaitOnFlagUntilTimeout+0x30>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e04e      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d037      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d034      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d031      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d110      	bne.n	800544e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2208      	movs	r2, #8
 8005432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f920 	bl	800567a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2208      	movs	r2, #8
 800543e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e029      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545c:	d111      	bne.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f906 	bl	800567a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e00f      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	429a      	cmp	r2, r3
 800549e:	d0a0      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b096      	sub	sp, #88	; 0x58
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2222      	movs	r2, #34	; 0x22
 80054d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02d      	beq.n	800553e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e8:	4a40      	ldr	r2, [pc, #256]	; (80055ec <UART_Start_Receive_DMA+0x140>)
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	4a3f      	ldr	r2, [pc, #252]	; (80055f0 <UART_Start_Receive_DMA+0x144>)
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fc:	4a3d      	ldr	r2, [pc, #244]	; (80055f4 <UART_Start_Receive_DMA+0x148>)
 80054fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005506:	2200      	movs	r2, #0
 8005508:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3324      	adds	r3, #36	; 0x24
 8005516:	4619      	mov	r1, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	461a      	mov	r2, r3
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	f7fc f9ba 	bl	8001898 <HAL_DMA_Start_IT>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2210      	movs	r2, #16
 800552e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e051      	b.n	80055e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d018      	beq.n	8005578 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555a:	657b      	str	r3, [r7, #84]	; 0x54
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005564:	64bb      	str	r3, [r7, #72]	; 0x48
 8005566:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800556a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3308      	adds	r3, #8
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	653b      	str	r3, [r7, #80]	; 0x50
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005598:	637a      	str	r2, [r7, #52]	; 0x34
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800559e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e5      	bne.n	8005578 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3308      	adds	r3, #8
 80055b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	613b      	str	r3, [r7, #16]
   return(result);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3308      	adds	r3, #8
 80055ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055cc:	623a      	str	r2, [r7, #32]
 80055ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	69f9      	ldr	r1, [r7, #28]
 80055d2:	6a3a      	ldr	r2, [r7, #32]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3758      	adds	r7, #88	; 0x58
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	08005805 	.word	0x08005805
 80055f0:	08005939 	.word	0x08005939
 80055f4:	0800597f 	.word	0x0800597f

080055f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b08f      	sub	sp, #60	; 0x3c
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	61fb      	str	r3, [r7, #28]
   return(result);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005620:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e6      	bne.n	8005600 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3308      	adds	r3, #8
 8005638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	60bb      	str	r3, [r7, #8]
   return(result);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005648:	633b      	str	r3, [r7, #48]	; 0x30
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	61ba      	str	r2, [r7, #24]
 8005654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6979      	ldr	r1, [r7, #20]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	613b      	str	r3, [r7, #16]
   return(result);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800566e:	bf00      	nop
 8005670:	373c      	adds	r7, #60	; 0x3c
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800567a:	b480      	push	{r7}
 800567c:	b095      	sub	sp, #84	; 0x54
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a0:	643b      	str	r3, [r7, #64]	; 0x40
 80056a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e6      	bne.n	8005682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e3      	bne.n	80056b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d118      	bne.n	8005726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	60bb      	str	r3, [r7, #8]
   return(result);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f023 0310 	bic.w	r3, r3, #16
 8005708:	647b      	str	r3, [r7, #68]	; 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6979      	ldr	r1, [r7, #20]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	613b      	str	r3, [r7, #16]
   return(result);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e6      	bne.n	80056f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	675a      	str	r2, [r3, #116]	; 0x74
}
 800573a:	bf00      	nop
 800573c:	3754      	adds	r7, #84	; 0x54
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b090      	sub	sp, #64	; 0x40
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d137      	bne.n	80057d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005764:	2200      	movs	r2, #0
 8005766:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800576a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	623b      	str	r3, [r7, #32]
   return(result);
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
 8005782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578a:	633a      	str	r2, [r7, #48]	; 0x30
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e6      	bne.n	800579e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057d0:	e004      	b.n	80057dc <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057da:	4798      	blx	r3
}
 80057dc:	bf00      	nop
 80057de:	3740      	adds	r7, #64	; 0x40
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b09c      	sub	sp, #112	; 0x70
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d171      	bne.n	8005904 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800583c:	66bb      	str	r3, [r7, #104]	; 0x68
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005846:	65bb      	str	r3, [r7, #88]	; 0x58
 8005848:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800584c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	667b      	str	r3, [r7, #100]	; 0x64
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800587a:	647a      	str	r2, [r7, #68]	; 0x44
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3308      	adds	r3, #8
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	623b      	str	r3, [r7, #32]
   return(result);
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a4:	663b      	str	r3, [r7, #96]	; 0x60
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3308      	adds	r3, #8
 80058ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058ae:	633a      	str	r2, [r7, #48]	; 0x30
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c4:	2220      	movs	r2, #32
 80058c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d118      	bne.n	8005904 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	617b      	str	r3, [r7, #20]
   return(result);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e6      	bne.n	80058d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	2200      	movs	r2, #0
 8005908:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d109      	bne.n	8005926 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800591a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800591e:	4611      	mov	r1, r2
 8005920:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005922:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005924:	e004      	b.n	8005930 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8005926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800592c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800592e:	4798      	blx	r3
}
 8005930:	bf00      	nop
 8005932:	3770      	adds	r7, #112	; 0x70
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10b      	bne.n	800596c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8005960:	0852      	lsrs	r2, r2, #1
 8005962:	b292      	uxth	r2, r2
 8005964:	4611      	mov	r1, r2
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800596a:	e004      	b.n	8005976 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	4798      	blx	r3
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b086      	sub	sp, #24
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d109      	bne.n	80059be <UART_DMAError+0x40>
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b21      	cmp	r3, #33	; 0x21
 80059ae:	d106      	bne.n	80059be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80059b8:	6978      	ldr	r0, [r7, #20]
 80059ba:	f7ff fe1d 	bl	80055f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d109      	bne.n	80059e0 <UART_DMAError+0x62>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b22      	cmp	r3, #34	; 0x22
 80059d0:	d106      	bne.n	80059e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7ff fe4d 	bl	800567a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	f043 0210 	orr.w	r2, r3, #16
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059f6:	6978      	ldr	r0, [r7, #20]
 80059f8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b088      	sub	sp, #32
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6979      	ldr	r1, [r7, #20]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	613b      	str	r3, [r7, #16]
   return(result);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a84:	bf00      	nop
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UARTEx_DisableFifoMode+0x16>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e027      	b.n	8005b2e <HAL_UARTEx_DisableFifoMode+0x66>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2224      	movs	r2, #36	; 0x24
 8005aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e02d      	b.n	8005bae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2224      	movs	r2, #36	; 0x24
 8005b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f850 	bl	8005c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e02d      	b.n	8005c2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	; 0x24
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f812 	bl	8005c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d108      	bne.n	8005c56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c54:	e031      	b.n	8005cba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c56:	2308      	movs	r3, #8
 8005c58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	0e5b      	lsrs	r3, r3, #25
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	0f5b      	lsrs	r3, r3, #29
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	7b3a      	ldrb	r2, [r7, #12]
 8005c82:	4911      	ldr	r1, [pc, #68]	; (8005cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8005c84:	5c8a      	ldrb	r2, [r1, r2]
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c8a:	7b3a      	ldrb	r2, [r7, #12]
 8005c8c:	490f      	ldr	r1, [pc, #60]	; (8005ccc <UARTEx_SetNbDataToProcess+0x98>)
 8005c8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	7b7a      	ldrb	r2, [r7, #13]
 8005ca0:	4909      	ldr	r1, [pc, #36]	; (8005cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ca2:	5c8a      	ldrb	r2, [r1, r2]
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ca8:	7b7a      	ldrb	r2, [r7, #13]
 8005caa:	4908      	ldr	r1, [pc, #32]	; (8005ccc <UARTEx_SetNbDataToProcess+0x98>)
 8005cac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cae:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	08005d8c 	.word	0x08005d8c
 8005ccc:	08005d94 	.word	0x08005d94

08005cd0 <memset>:
 8005cd0:	4402      	add	r2, r0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d100      	bne.n	8005cda <memset+0xa>
 8005cd8:	4770      	bx	lr
 8005cda:	f803 1b01 	strb.w	r1, [r3], #1
 8005cde:	e7f9      	b.n	8005cd4 <memset+0x4>

08005ce0 <__libc_init_array>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4d0d      	ldr	r5, [pc, #52]	; (8005d18 <__libc_init_array+0x38>)
 8005ce4:	4c0d      	ldr	r4, [pc, #52]	; (8005d1c <__libc_init_array+0x3c>)
 8005ce6:	1b64      	subs	r4, r4, r5
 8005ce8:	10a4      	asrs	r4, r4, #2
 8005cea:	2600      	movs	r6, #0
 8005cec:	42a6      	cmp	r6, r4
 8005cee:	d109      	bne.n	8005d04 <__libc_init_array+0x24>
 8005cf0:	4d0b      	ldr	r5, [pc, #44]	; (8005d20 <__libc_init_array+0x40>)
 8005cf2:	4c0c      	ldr	r4, [pc, #48]	; (8005d24 <__libc_init_array+0x44>)
 8005cf4:	f000 f826 	bl	8005d44 <_init>
 8005cf8:	1b64      	subs	r4, r4, r5
 8005cfa:	10a4      	asrs	r4, r4, #2
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	42a6      	cmp	r6, r4
 8005d00:	d105      	bne.n	8005d0e <__libc_init_array+0x2e>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d08:	4798      	blx	r3
 8005d0a:	3601      	adds	r6, #1
 8005d0c:	e7ee      	b.n	8005cec <__libc_init_array+0xc>
 8005d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d12:	4798      	blx	r3
 8005d14:	3601      	adds	r6, #1
 8005d16:	e7f2      	b.n	8005cfe <__libc_init_array+0x1e>
 8005d18:	08005da4 	.word	0x08005da4
 8005d1c:	08005da4 	.word	0x08005da4
 8005d20:	08005da4 	.word	0x08005da4
 8005d24:	08005da8 	.word	0x08005da8

08005d28 <memcpy>:
 8005d28:	440a      	add	r2, r1
 8005d2a:	4291      	cmp	r1, r2
 8005d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d30:	d100      	bne.n	8005d34 <memcpy+0xc>
 8005d32:	4770      	bx	lr
 8005d34:	b510      	push	{r4, lr}
 8005d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d3e:	4291      	cmp	r1, r2
 8005d40:	d1f9      	bne.n	8005d36 <memcpy+0xe>
 8005d42:	bd10      	pop	{r4, pc}

08005d44 <_init>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr

08005d50 <_fini>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr
