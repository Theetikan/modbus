
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e74  08005e74  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e7c  08005e7c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08005e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000904  20000218  0800609c  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800609c  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154c9  00000000  00000000  0002028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288b  00000000  00000000  00035754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00037fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8a  00000000  00000000  00039128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263ba  00000000  00000000  00039eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014641  00000000  00000000  0006026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc14b  00000000  00000000  000748ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000497c  00000000  00000000  001709f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00175374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e1c 	.word	0x08005e1c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	08005e1c 	.word	0x08005e1c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000234 	.word	0x20000234

08000554 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <modbus_3t5_Timeout+0x1c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2201      	movs	r2, #1
 8000562:	755a      	strb	r2, [r3, #21]

}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000234 	.word	0x20000234

08000574 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f004 faeb 	bl	8004b58 <HAL_UART_GetError>
 8000582:	4603      	mov	r3, r0
 8000584:	2b20      	cmp	r3, #32
 8000586:	d101      	bne.n	800058c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000588:	f7ff ffc4 	bl	8000514 <modbus_1t5_Timeout>

	}
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800059e:	4a25      	ldr	r2, [pc, #148]	; (8000634 <Modbus_init+0xa0>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <Modbus_init+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <Modbus_init+0xa4>)
 80005b2:	210e      	movs	r1, #14
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fa03 	bl	80039c0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2110      	movs	r1, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 fa73 	bl	8004aac <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fa8a 	bl	8004ae4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <Modbus_init+0xa8>)
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fd51 	bl	8004080 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <Modbus_init+0xa0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <Modbus_init+0xa0>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <Modbus_init+0xa0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005f0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80005f4:	4413      	add	r3, r2
 80005f6:	3302      	adds	r3, #2
 80005f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005fc:	4619      	mov	r1, r3
 80005fe:	f003 fe79 	bl	80042f4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <Modbus_init+0xa0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b01      	cmp	r3, #1
 8000610:	d10c      	bne.n	800062c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fe85 	bl	8003328 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <Modbus_init+0xa0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 ff5e 	bl	80034e8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000234 	.word	0x20000234
 8000638:	08000555 	.word	0x08000555
 800063c:	08000575 	.word	0x08000575

08000640 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800064c:	23ff      	movs	r3, #255	; 0xff
 800064e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	; 0xff
 8000652:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000654:	e013      	b.n	800067e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <CRC16+0x64>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4053      	eors	r3, r2
 8000672:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <CRC16+0x68>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800067e:	883b      	ldrh	r3, [r7, #0]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	803a      	strh	r2, [r7, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e6      	bne.n	8000656 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000100 	.word	0x20000100
 80006a8:	20000000 	.word	0x20000000

080006ac <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006b2:	4b7e      	ldr	r3, [pc, #504]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	7ddb      	ldrb	r3, [r3, #23]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d80a      	bhi.n	80006d4 <Modbus_Protocal_Worker+0x28>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <Modbus_Protocal_Worker+0x18>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006df 	.word	0x080006df
 80006c8:	08000873 	.word	0x08000873
 80006cc:	0800076b 	.word	0x0800076b
 80006d0:	080007af 	.word	0x080007af
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006d4:	4b75      	ldr	r3, [pc, #468]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2201      	movs	r2, #1
 80006da:	75da      	strb	r2, [r3, #23]
		break;
 80006dc:	e0e1      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006de:	4b73      	ldr	r3, [pc, #460]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006ea:	4b70      	ldr	r3, [pc, #448]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2202      	movs	r2, #2
 80006f0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006f2:	f000 f9d3 	bl	8000a9c <Modbus_Emission>
 80006f6:	e018      	b.n	800072a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006f8:	4b6c      	ldr	r3, [pc, #432]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000702:	4b6a      	ldr	r3, [pc, #424]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800070c:	b29b      	uxth	r3, r3
 800070e:	429a      	cmp	r2, r3
 8000710:	d00b      	beq.n	800072a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000712:	4b66      	ldr	r3, [pc, #408]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800071a:	4b64      	ldr	r3, [pc, #400]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2200      	movs	r2, #0
 8000720:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000722:	4b62      	ldr	r3, [pc, #392]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2203      	movs	r2, #3
 8000728:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800072a:	4b60      	ldr	r3, [pc, #384]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000734:	2b20      	cmp	r3, #32
 8000736:	f040 80ad 	bne.w	8000894 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800073a:	4b5c      	ldr	r3, [pc, #368]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000744:	4b59      	ldr	r3, [pc, #356]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800074a:	4b58      	ldr	r3, [pc, #352]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b57      	ldr	r3, [pc, #348]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000756:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800075a:	4413      	add	r3, r2
 800075c:	3302      	adds	r3, #2
 800075e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000762:	4619      	mov	r1, r3
 8000764:	f003 fdc6 	bl	80042f4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8000768:	e094      	b.n	8000894 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7d1b      	ldrb	r3, [r3, #20]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	22fe      	movs	r2, #254	; 0xfe
 800077c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8000798:	4b44      	ldr	r3, [pc, #272]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800079c:	1a8a      	subs	r2, r1, r2
 800079e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80007a0:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2204      	movs	r2, #4
 80007aa:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007ac:	e074      	b.n	8000898 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007b6:	f113 0f02 	cmn.w	r3, #2
 80007ba:	d150      	bne.n	800085e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007bc:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2200      	movs	r2, #0
 80007c2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80007cc:	4b37      	ldr	r3, [pc, #220]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007d4:	3b02      	subs	r3, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff ff31 	bl	8000640 <CRC16>
 80007de:	4603      	mov	r3, r0
 80007e0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007e2:	793a      	ldrb	r2, [r7, #4]
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007e6:	6819      	ldr	r1, [r3, #0]
 80007e8:	4b30      	ldr	r3, [pc, #192]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007f0:	3b02      	subs	r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d10c      	bne.n	8000816 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007fc:	797a      	ldrb	r2, [r7, #5]
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800080a:	3b01      	subs	r3, #1
 800080c:	440b      	add	r3, r1
 800080e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000812:	429a      	cmp	r2, r3
 8000814:	d004      	beq.n	8000820 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	759a      	strb	r2, [r3, #22]
				break;
 800081e:	e040      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d113      	bne.n	800085a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8000842:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800084c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800084e:	461a      	mov	r2, r3
 8000850:	f005 fad6 	bl	8005e00 <memcpy>

			//execute command
			Modbus_frame_response();
 8000854:	f000 f90a 	bl	8000a6c <Modbus_frame_response>
 8000858:	e001      	b.n	800085e <Modbus_Protocal_Worker+0x1b2>
				break;
 800085a:	bf00      	nop
					}
		break;


	}
}
 800085c:	e021      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	7d5b      	ldrb	r3, [r3, #21]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d019      	beq.n	800089c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2201      	movs	r2, #1
 800086e:	75da      	strb	r2, [r3, #23]
		break;
 8000870:	e014      	b.n	800089c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087c:	2b20      	cmp	r3, #32
 800087e:	d10f      	bne.n	80008a0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2201      	movs	r2, #1
 8000890:	75da      	strb	r2, [r3, #23]
		break;
 8000892:	e005      	b.n	80008a0 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000894:	bf00      	nop
 8000896:	e004      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000898:	bf00      	nop
 800089a:	e002      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 800089c:	bf00      	nop
 800089e:	e000      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80008a0:	bf00      	nop
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000234 	.word	0x20000234

080008b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <modbusWrite1Register+0x80>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	7e5b      	ldrb	r3, [r3, #25]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <modbusWrite1Register+0x80>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7e9b      	ldrb	r3, [r3, #26]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <modbusWrite1Register+0x80>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d903      	bls.n	80008e2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 f8a4 	bl	8000a28 <ModbusErrorReply>
			 return;
 80008e0:	e023      	b.n	800092a <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <modbusWrite1Register+0x80>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <modbusWrite1Register+0x80>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6859      	ldr	r1, [r3, #4]
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	440b      	add	r3, r1
 80008f2:	7ed2      	ldrb	r2, [r2, #27]
 80008f4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <modbusWrite1Register+0x80>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <modbusWrite1Register+0x80>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6859      	ldr	r1, [r3, #4]
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	440b      	add	r3, r1
 8000906:	7f12      	ldrb	r2, [r2, #28]
 8000908:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <modbusWrite1Register+0x80>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			hModbus->Rxframe,
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <modbusWrite1Register+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000918:	2208      	movs	r2, #8
 800091a:	4619      	mov	r1, r3
 800091c:	f005 fa70 	bl	8005e00 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <modbusWrite1Register+0x80>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2205      	movs	r2, #5
 8000926:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270



}
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000234 	.word	0x20000234

08000934 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <modbusRead1Register+0xf0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	7edb      	ldrb	r3, [r3, #27]
 8000940:	b29b      	uxth	r3, r3
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <modbusRead1Register+0xf0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	7f1b      	ldrb	r3, [r3, #28]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <modbusRead1Register+0xf0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	7e5b      	ldrb	r3, [r3, #25]
 8000958:	b29b      	uxth	r3, r3
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <modbusRead1Register+0xf0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	7e9b      	ldrb	r3, [r3, #26]
 8000964:	b29b      	uxth	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <modbusRead1Register+0x42>
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	2b7d      	cmp	r3, #125	; 0x7d
 8000974:	d903      	bls.n	800097e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000976:	2003      	movs	r0, #3
 8000978:	f000 f856 	bl	8000a28 <ModbusErrorReply>
		 return;
 800097c:	e04e      	b.n	8000a1c <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800097e:	88ba      	ldrh	r2, [r7, #4]
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <modbusRead1Register+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	429a      	cmp	r2, r3
 8000988:	d808      	bhi.n	800099c <modbusRead1Register+0x68>
 800098a:	88ba      	ldrh	r2, [r7, #4]
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <modbusRead1Register+0xf0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	429a      	cmp	r2, r3
 800099a:	d903      	bls.n	80009a4 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800099c:	2002      	movs	r0, #2
 800099e:	f000 f843 	bl	8000a28 <ModbusErrorReply>
		 return;
 80009a2:	e03b      	b.n	8000a1c <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <modbusRead1Register+0xf0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2203      	movs	r2, #3
 80009aa:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <modbusRead1Register+0xf0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009be:	2400      	movs	r4, #0
 80009c0:	e020      	b.n	8000a04 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <modbusRead1Register+0xf0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4423      	add	r3, r4
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	18d1      	adds	r1, r2, r3
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <modbusRead1Register+0xf0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	1c63      	adds	r3, r4, #1
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	7849      	ldrb	r1, [r1, #1]
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <modbusRead1Register+0xf0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	4423      	add	r3, r4
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	18d1      	adds	r1, r2, r3
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <modbusRead1Register+0xf0>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	0063      	lsls	r3, r4, #1
 80009f6:	3303      	adds	r3, #3
 80009f8:	7809      	ldrb	r1, [r1, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8000a02:	3401      	adds	r4, #1
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	429c      	cmp	r4, r3
 8000a08:	dbdb      	blt.n	80009c2 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <modbusRead1Register+0xf0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	0052      	lsls	r2, r2, #1
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270

}
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000234 	.word	0x20000234

08000a28 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	7e1a      	ldrb	r2, [r3, #24]
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->TxCount = 2;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2202      	movs	r2, #2
 8000a56:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000234 	.word	0x20000234

08000a6c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <Modbus_frame_response+0x2c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	7e1b      	ldrb	r3, [r3, #24]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d004      	beq.n	8000a84 <Modbus_frame_response+0x18>
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d105      	bne.n	8000a8a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a7e:	f7ff ff17 	bl	80008b0 <modbusWrite1Register>
		break;
 8000a82:	e006      	b.n	8000a92 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a84:	f7ff ff56 	bl	8000934 <modbusRead1Register>
		break;
 8000a88:	e003      	b.n	8000a92 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff ffcc 	bl	8000a28 <ModbusErrorReply>
		break;
 8000a90:	bf00      	nop

	}
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000234 	.word	0x20000234

08000a9c <Modbus_Emission>:

void Modbus_Emission()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aac:	2b20      	cmp	r3, #32
 8000aae:	d15d      	bne.n	8000b6c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8000ac6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
				hModbus->TxCount
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
		memcpy
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f005 f991 	bl	8005e00 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3203      	adds	r2, #3
 8000aee:	b292      	uxth	r2, r2
 8000af0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <Modbus_Emission+0xe8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <Modbus_Emission+0xe8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b04:	3b02      	subs	r3, #2
 8000b06:	4619      	mov	r1, r3
 8000b08:	4610      	mov	r0, r2
 8000b0a:	f7ff fd99 	bl	8000640 <CRC16>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b1e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b20:	7939      	ldrb	r1, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b36:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b38:	7979      	ldrb	r1, [r7, #5]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4c:	2b20      	cmp	r3, #32
 8000b4e:	d10d      	bne.n	8000b6c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b62:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b66:	461a      	mov	r2, r3
 8000b68:	f003 fb44 	bl	80041f4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	755a      	strb	r2, [r3, #21]

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000234 	.word	0x20000234

08000b88 <Heartbeat>:
uint16_t ShelvePosition_4 = 4;
uint16_t ShelvePosition_5 = 5;
uint16_t PickOder;
uint16_t PlaceOder;

void Heartbeat(){
 8000b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b8c:	af00      	add	r7, sp, #0
	static uint64_t timestamp = 0;
		 	  if(HAL_GetTick() >= timestamp)
 8000b8e:	f000 fd09 	bl	80015a4 <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2200      	movs	r2, #0
 8000b96:	461c      	mov	r4, r3
 8000b98:	4615      	mov	r5, r2
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <Heartbeat+0x44>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	4294      	cmp	r4, r2
 8000ba2:	eb75 0303 	sbcs.w	r3, r5, r3
 8000ba6:	d30d      	bcc.n	8000bc4 <Heartbeat+0x3c>
		 	  {
		 		  timestamp += 200;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <Heartbeat+0x44>)
 8000baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bae:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000bb2:	f143 0900 	adc.w	r9, r3, #0
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <Heartbeat+0x44>)
 8000bb8:	e9c3 8900 	strd	r8, r9, [r3]
				  //if (registerFrame[0].U16 == 18537) {
		 		 //registerFrame[0].U16 = 0x00;
		 		  registerFrame[0x00].U16 = 22881;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <Heartbeat+0x48>)
 8000bbe:	f645 1261 	movw	r2, #22881	; 0x5961
 8000bc2:	801a      	strh	r2, [r3, #0]
				  //}
		 	  }
}
 8000bc4:	bf00      	nop
 8000bc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000b08 	.word	0x20000b08
 8000bd0:	20000710 	.word	0x20000710

08000bd4 <Routine>:

void Routine(){
 8000bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bd8:	af00      	add	r7, sp, #0
	static uint64_t timestamp2 = 0;
		if(HAL_GetTick() >= timestamp2) //ส่งค่าพวกนี้หลังจาก BaseSytem อ่าน Heartbeat ทุกๆ 200 ms
 8000bda:	f000 fce3 	bl	80015a4 <HAL_GetTick>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2200      	movs	r2, #0
 8000be2:	461c      	mov	r4, r3
 8000be4:	4615      	mov	r5, r2
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <Routine+0x78>)
 8000be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bec:	4294      	cmp	r4, r2
 8000bee:	eb75 0303 	sbcs.w	r3, r5, r3
 8000bf2:	d328      	bcc.n	8000c46 <Routine+0x72>
		{
		timestamp2 += 200;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <Routine+0x78>)
 8000bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfa:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000bfe:	f143 0900 	adc.w	r9, r3, #0
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <Routine+0x78>)
 8000c04:	e9c3 8900 	strd	r8, r9, [r3]
		if (registerFrame[0x00].U16 == 18537){
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <Routine+0x7c>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	f644 0269 	movw	r2, #18537	; 0x4869
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d118      	bne.n	8000c46 <Routine+0x72>
			HeartFlag = 1 ; // ได้รับค่าจาก Heartbeat Protocal
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <Routine+0x80>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	801a      	strh	r2, [r3, #0]
		//BaseSytem Read
		registerFrame[0x04].U16 = 0b0000;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <Routine+0x7c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	811a      	strh	r2, [r3, #8]
		registerFrame[0x04].U16 = 0b0001;//Gripper Movement Actual Status = 'Lead Switch 2 Status'
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <Routine+0x7c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = 1; //Z-axis Moving Status = Set Shelve
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <Routine+0x7c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = 19*10; //Z-axis Actual Position = 19 ค่าจริง*10
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <Routine+0x7c>)
 8000c2e:	22be      	movs	r2, #190	; 0xbe
 8000c30:	845a      	strh	r2, [r3, #34]	; 0x22
		registerFrame[0x12].U16 = 20*10; //Z-axis Actual Speed = 20
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <Routine+0x7c>)
 8000c34:	22c8      	movs	r2, #200	; 0xc8
 8000c36:	849a      	strh	r2, [r3, #36]	; 0x24
		registerFrame[0x13].U16 = 21*10; //Z-axis Acceleration = 21
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <Routine+0x7c>)
 8000c3a:	22d2      	movs	r2, #210	; 0xd2
 8000c3c:	84da      	strh	r2, [r3, #38]	; 0x26
		registerFrame[0x40].U16 = 22*10; //X-axis Actual Position = 22
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <Routine+0x7c>)
 8000c40:	22dc      	movs	r2, #220	; 0xdc
 8000c42:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}
}
}
 8000c46:	bf00      	nop
 8000c48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c4c:	20000b10 	.word	0x20000b10
 8000c50:	20000710 	.word	0x20000710
 8000c54:	200008a0 	.word	0x200008a0

08000c58 <VacuumOn_Off>:
void VacuumOn_Off(){ // อ่านค่า Vacuum จากการกดปุ่มที่ BaseSytem
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <VacuumOn_Off+0x2c>)
 8000c5e:	889b      	ldrh	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <VacuumOn_Off+0x12>
		VacuumState = 0; //Off
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <VacuumOn_Off+0x30>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	801a      	strh	r2, [r3, #0]
	}
	if(registerFrame[0x02].U16 == 0b0001){
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <VacuumOn_Off+0x2c>)
 8000c6c:	889b      	ldrh	r3, [r3, #4]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d102      	bne.n	8000c78 <VacuumOn_Off+0x20>
		VacuumState = 1; //On
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <VacuumOn_Off+0x30>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	801a      	strh	r2, [r3, #0]
		}
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000710 	.word	0x20000710
 8000c88:	200008a2 	.word	0x200008a2

08000c8c <Gripper_Movement>:

void Gripper_Movement(){ // อ่านค่า Gripper จากการกดปุ่มที่ BaseSytem
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <Gripper_Movement+0x2c>)
 8000c92:	88db      	ldrh	r3, [r3, #6]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <Gripper_Movement+0x12>
			GripperState = 0; //Backward
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <Gripper_Movement+0x30>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
		}
	if(registerFrame[0x03].U16 == 0b0001){
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <Gripper_Movement+0x2c>)
 8000ca0:	88db      	ldrh	r3, [r3, #6]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <Gripper_Movement+0x20>
			GripperState = 1; //Forward
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <Gripper_Movement+0x30>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	801a      	strh	r2, [r3, #0]
			}
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000710 	.word	0x20000710
 8000cbc:	200008a4 	.word	0x200008a4

08000cc0 <Set_Shelves>:

void Set_Shelves(){ //Setting Shelve Position
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 1){
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <Set_Shelves+0x64>)
 8000cc6:	885b      	ldrh	r3, [r3, #2]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d129      	bne.n	8000d20 <Set_Shelves+0x60>
		registerFrame[0x01].U16 = 0; // z-axis reset BaseSystem status
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <Set_Shelves+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 1; // z-axis update z-xis moving status to "set shelves"
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <Set_Shelves+0x64>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	841a      	strh	r2, [r3, #32]

		//Joggig for set shelve
		HAL_Delay(1500); // delay 3s for testing
 8000cd8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000cdc:	f000 fc6e 	bl	80015bc <HAL_Delay>

		registerFrame[0x23].U16 = ShelvePosition_1; // ค่า Shelve ที่ต้องส่งให้ BaseSytem
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <Set_Shelves+0x68>)
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <Set_Shelves+0x64>)
 8000ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		registerFrame[0x24].U16 = ShelvePosition_2;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <Set_Shelves+0x6c>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <Set_Shelves+0x64>)
 8000cf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		registerFrame[0x25].U16 = ShelvePosition_3;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <Set_Shelves+0x70>)
 8000cf6:	881a      	ldrh	r2, [r3, #0]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <Set_Shelves+0x64>)
 8000cfa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		registerFrame[0x26].U16 = ShelvePosition_4;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <Set_Shelves+0x74>)
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <Set_Shelves+0x64>)
 8000d04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		registerFrame[0x27].U16 = ShelvePosition_5;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <Set_Shelves+0x78>)
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <Set_Shelves+0x64>)
 8000d0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

		HAL_Delay(1500);//Delay 3s for testing
 8000d12:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d16:	f000 fc51 	bl	80015bc <HAL_Delay>

		// reset z-axis moving state after finish Jogging
		//if (Finish Jogging){
		registerFrame[0x10].U16 = 0;
 8000d1a:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <Set_Shelves+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	841a      	strh	r2, [r3, #32]
		//}

	}
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000710 	.word	0x20000710
 8000d28:	20000200 	.word	0x20000200
 8000d2c:	20000202 	.word	0x20000202
 8000d30:	20000204 	.word	0x20000204
 8000d34:	20000206 	.word	0x20000206
 8000d38:	20000208 	.word	0x20000208

08000d3c <GetGoalPoint>:
void GetGoalPoint(){
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 8){ // if run point mode
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <GetGoalPoint+0x2c>)
 8000d42:	885b      	ldrh	r3, [r3, #2]
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d109      	bne.n	8000d5c <GetGoalPoint+0x20>
		 GoalPoint = (registerFrame[0x30].U16)/10 ; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <GetGoalPoint+0x2c>)
 8000d4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <GetGoalPoint+0x30>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <GetGoalPoint+0x34>)
 8000d5a:	801a      	strh	r2, [r3, #0]
		 //ค่าที่ได้จาก BaseSytem จะได้ค่าที่เรากรอก*100 ดังนั้นต้องการ10 ถึงจะได้ค่าจริงที่เรากรอก
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000710 	.word	0x20000710
 8000d6c:	cccccccd 	.word	0xcccccccd
 8000d70:	200008a6 	.word	0x200008a6

08000d74 <RunPointMode>:

void RunPointMode(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 8){ //if run point mode
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <RunPointMode+0x2c>)
 8000d7a:	885b      	ldrh	r3, [r3, #2]
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d10c      	bne.n	8000d9a <RunPointMode+0x26>
		registerFrame[0x01].U16 = 0;  //Reset BaseSystem Status
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <RunPointMode+0x2c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 16; //update Z Status "Go Point"
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <RunPointMode+0x2c>)
 8000d88:	2210      	movs	r2, #16
 8000d8a:	841a      	strh	r2, [r3, #32]

		//going to point (use Goal point(0x30) for target z-axis position)
		HAL_Delay(3000); //for test
 8000d8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d90:	f000 fc14 	bl	80015bc <HAL_Delay>
		//if (Gripper at GoalPoint){
		registerFrame[0x10].U16 = 0; // reset z-axis moving state after finish jogging
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <RunPointMode+0x2c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	841a      	strh	r2, [r3, #32]
		//}
		}
	}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000710 	.word	0x20000710

08000da4 <SetHome>:

void SetHome(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 2){ //BaseSystem Status "Home"
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <SetHome+0x2c>)
 8000daa:	885b      	ldrh	r3, [r3, #2]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d10c      	bne.n	8000dca <SetHome+0x26>
		registerFrame[0x01].U16 = 0; //reset Base System Status
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <SetHome+0x2c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 2; // update Z-axis moving status "Home"
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SetHome+0x2c>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	841a      	strh	r2, [r3, #32]

		//Homing
		HAL_Delay(3000); //for test
 8000dbc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dc0:	f000 fbfc 	bl	80015bc <HAL_Delay>

		//if (Gripper at HomePoint){
		registerFrame[0x10].U16 = 0; // reset z-axis moving state after finish homing
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <SetHome+0x2c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	841a      	strh	r2, [r3, #32]
		//}
		}
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000710 	.word	0x20000710

08000dd4 <GetPick_PlaceOrder>:

void GetPick_PlaceOrder(){
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 4){ // after pressing run button on Jogmode (before running)
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <GetPick_PlaceOrder+0x2c>)
 8000dda:	885b      	ldrh	r3, [r3, #2]
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d109      	bne.n	8000df4 <GetPick_PlaceOrder+0x20>
		PickOder = registerFrame[0x21].U16 ; // ค่าชั้นที่ต้อง Pick from BaseSystem
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <GetPick_PlaceOrder+0x2c>)
 8000de2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <GetPick_PlaceOrder+0x30>)
 8000de8:	801a      	strh	r2, [r3, #0]
		PlaceOder = registerFrame[0x22].U16 ;// ค่าชั้นที่ต้อง Place from BaseSystem
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <GetPick_PlaceOrder+0x2c>)
 8000dec:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <GetPick_PlaceOrder+0x34>)
 8000df2:	801a      	strh	r2, [r3, #0]
		//ค่าที่ได้จะเรียงติดกัน ex.ถ้าเซ็ตค่าในUIชั้นแรกที่ต้อง Pick คือ ชั้น1-5 ตามลำดับ ค่าชั้นที่ต้องPick จะได้ 12345
	}
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000710 	.word	0x20000710
 8000e04:	200008a8 	.word	0x200008a8
 8000e08:	200008aa 	.word	0x200008aa

08000e0c <RunJogMode>:

void RunJogMode(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 4){ //after pressing run button on Jogmode
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <RunJogMode+0x38>)
 8000e12:	885b      	ldrh	r3, [r3, #2]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d113      	bne.n	8000e40 <RunJogMode+0x34>
		registerFrame[0x01].U16 = 0;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <RunJogMode+0x38>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	805a      	strh	r2, [r3, #2]

		//Loop{
		//Pick
		registerFrame[0x10].U16 = 4; // go pick state
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <RunJogMode+0x38>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	841a      	strh	r2, [r3, #32]
		HAL_Delay(1500); //for test
 8000e24:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e28:	f000 fbc8 	bl	80015bc <HAL_Delay>

		//Going to Pick from Shelve 5 round(Use PickOder to do task)
		//When finish Pick from round(i) shelve --> Go Place

		//Place
		registerFrame[0x10].U16 = 8; // go place state
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <RunJogMode+0x38>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	841a      	strh	r2, [r3, #32]
		HAL_Delay(1500); //for test
 8000e32:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e36:	f000 fbc1 	bl	80015bc <HAL_Delay>
		//When finish Place from round(i) shelve --> Return Pick
		//When Finish Place round 5 --> Out of Loop
		//}

		//if(All Pick&Place == Finish){
		registerFrame[0x10].U16 = 0; // after finish jogging
 8000e3a:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <RunJogMode+0x38>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	841a      	strh	r2, [r3, #32]
		//}
	}
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000710 	.word	0x20000710

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fb45 	bl	80014da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f838 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f932 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 f8fe 	bl	8001058 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e5c:	f000 f8ae 	bl	8000fbc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000e60:	f000 f87c 	bl	8000f5c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <main+0x6c>)
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <main+0x70>)
 8000e68:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <main+0x6c>)
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <main+0x74>)
 8000e6e:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <main+0x6c>)
 8000e72:	2215      	movs	r2, #21
 8000e74:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <main+0x6c>)
 8000e78:	22c8      	movs	r2, #200	; 0xc8
 8000e7a:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000e7c:	4910      	ldr	r1, [pc, #64]	; (8000ec0 <main+0x78>)
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <main+0x6c>)
 8000e80:	f7ff fb88 	bl	8000594 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000e84:	f7ff fc12 	bl	80006ac <Modbus_Protocal_Worker>
	  Heartbeat();
 8000e88:	f7ff fe7e 	bl	8000b88 <Heartbeat>
	  Routine();
 8000e8c:	f7ff fea2 	bl	8000bd4 <Routine>
	  VacuumOn_Off();
 8000e90:	f7ff fee2 	bl	8000c58 <VacuumOn_Off>
	  Gripper_Movement();
 8000e94:	f7ff fefa 	bl	8000c8c <Gripper_Movement>
	  Set_Shelves();
 8000e98:	f7ff ff12 	bl	8000cc0 <Set_Shelves>
	  GetGoalPoint();
 8000e9c:	f7ff ff4e 	bl	8000d3c <GetGoalPoint>
	  RunPointMode();
 8000ea0:	f7ff ff68 	bl	8000d74 <RunPointMode>
	  SetHome();
 8000ea4:	f7ff ff7e 	bl	8000da4 <SetHome>
	  GetPick_PlaceOrder();
 8000ea8:	f7ff ff94 	bl	8000dd4 <GetPick_PlaceOrder>
	  RunJogMode();
 8000eac:	f7ff ffae 	bl	8000e0c <RunJogMode>
	  Modbus_Protocal_Worker();
 8000eb0:	e7e8      	b.n	8000e84 <main+0x3c>
 8000eb2:	bf00      	nop
 8000eb4:	20000238 	.word	0x20000238
 8000eb8:	20000978 	.word	0x20000978
 8000ebc:	200008ac 	.word	0x200008ac
 8000ec0:	20000710 	.word	0x20000710

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	2238      	movs	r2, #56	; 0x38
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 ff68 	bl	8005da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f001 f98a 	bl	8002200 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2340      	movs	r3, #64	; 0x40
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efe:	2302      	movs	r3, #2
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f02:	2304      	movs	r3, #4
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f06:	2355      	movs	r3, #85	; 0x55
 8000f08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fa24 	bl	8002368 <HAL_RCC_OscConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f26:	f000 f937 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2104      	movs	r1, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fd22 	bl	800298c <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f4e:	f000 f923 	bl	8001198 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3750      	adds	r7, #80	; 0x50
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_TIM16_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f68:	22a9      	movs	r2, #169	; 0xa9
 8000f6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f74:	f240 4279 	movw	r2, #1145	; 0x479
 8000f78:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000f8e:	f002 f967 	bl	8003260 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000f98:	f000 f8fe 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_TIM16_Init+0x58>)
 8000fa0:	f002 fa3a 	bl	8003418 <HAL_TIM_OnePulse_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 f8f5 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200008ac 	.word	0x200008ac
 8000fb8:	40014400 	.word	0x40014400

08000fbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <MX_USART2_UART_Init+0x98>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000fc8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000fd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_USART2_UART_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <MX_USART2_UART_Init+0x94>)
 800100a:	f002 ffd9 	bl	8003fc0 <HAL_UART_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001014:	f000 f8c0 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_USART2_UART_Init+0x94>)
 800101c:	f004 fdf9 	bl	8005c12 <HAL_UARTEx_SetTxFifoThreshold>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001026:	f000 f8b7 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <MX_USART2_UART_Init+0x94>)
 800102e:	f004 fe2e 	bl	8005c8e <HAL_UARTEx_SetRxFifoThreshold>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001038:	f000 f8ae 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_USART2_UART_Init+0x94>)
 800103e:	f004 fdaf 	bl	8005ba0 <HAL_UARTEx_DisableFifoMode>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001048:	f000 f8a6 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000978 	.word	0x20000978
 8001054:	40004400 	.word	0x40004400

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_DMA_Init+0x60>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001062:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <MX_DMA_Init+0x60>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6493      	str	r3, [r2, #72]	; 0x48
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_DMA_Init+0x60>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_DMA_Init+0x60>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <MX_DMA_Init+0x60>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6493      	str	r3, [r2, #72]	; 0x48
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MX_DMA_Init+0x60>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	200b      	movs	r0, #11
 8001094:	f000 fb8f 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001098:	200b      	movs	r0, #11
 800109a:	f000 fba6 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	200c      	movs	r0, #12
 80010a4:	f000 fb87 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010a8:	200c      	movs	r0, #12
 80010aa:	f000 fb9e 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_GPIO_Init+0xd4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <MX_GPIO_Init+0xd4>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_GPIO_Init+0xd4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <MX_GPIO_Init+0xd4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a28      	ldr	r2, [pc, #160]	; (8001190 <MX_GPIO_Init+0xd4>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <MX_GPIO_Init+0xd4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <MX_GPIO_Init+0xd4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a22      	ldr	r2, [pc, #136]	; (8001190 <MX_GPIO_Init+0xd4>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_GPIO_Init+0xd4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_GPIO_Init+0xd4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <MX_GPIO_Init+0xd4>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_GPIO_Init+0xd4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2120      	movs	r1, #32
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f001 f825 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001144:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <MX_GPIO_Init+0xd8>)
 8001156:	f000 fe95 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800115a:	2320      	movs	r3, #32
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f000 fe86 	bl	8001e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	f000 fb1a 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f000 fb31 	bl	80017ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000
 8001194:	48000800 	.word	0x48000800

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x44>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6613      	str	r3, [r2, #96]	; 0x60
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x44>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011da:	f001 f8b5 	bl	8002348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_TIM_Base_MspInit+0x44>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d113      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_TIM_Base_MspInit+0x48>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_TIM_Base_MspInit+0x48>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_TIM_Base_MspInit+0x48>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2019      	movs	r0, #25
 800121c:	f000 facb 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001220:	2019      	movs	r0, #25
 8001222:	f000 fae2 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40014400 	.word	0x40014400
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b09e      	sub	sp, #120	; 0x78
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2254      	movs	r2, #84	; 0x54
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f004 fda5 	bl	8005da8 <memset>
  if(huart->Instance==USART2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <HAL_UART_MspInit+0x160>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 8092 	bne.w	800138e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800126a:	2302      	movs	r3, #2
 800126c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fda4 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001282:	f7ff ff89 	bl	8001198 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001286:	4b45      	ldr	r3, [pc, #276]	; (800139c <HAL_UART_MspInit+0x164>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a44      	ldr	r2, [pc, #272]	; (800139c <HAL_UART_MspInit+0x164>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b42      	ldr	r3, [pc, #264]	; (800139c <HAL_UART_MspInit+0x164>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <HAL_UART_MspInit+0x164>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a3e      	ldr	r2, [pc, #248]	; (800139c <HAL_UART_MspInit+0x164>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <HAL_UART_MspInit+0x164>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012b6:	230c      	movs	r3, #12
 80012b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c6:	2307      	movs	r3, #7
 80012c8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f000 fdd6 	bl	8001e84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <HAL_UART_MspInit+0x168>)
 80012da:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <HAL_UART_MspInit+0x16c>)
 80012dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_UART_MspInit+0x168>)
 80012e0:	221b      	movs	r2, #27
 80012e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <HAL_UART_MspInit+0x168>)
 80012e6:	2210      	movs	r2, #16
 80012e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_UART_MspInit+0x168>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_UART_MspInit+0x168>)
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_UART_MspInit+0x168>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_UART_MspInit+0x168>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_UART_MspInit+0x168>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_UART_MspInit+0x168>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800130e:	4824      	ldr	r0, [pc, #144]	; (80013a0 <HAL_UART_MspInit+0x168>)
 8001310:	f000 fa86 	bl	8001820 <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800131a:	f7ff ff3d 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_UART_MspInit+0x168>)
 8001322:	67da      	str	r2, [r3, #124]	; 0x7c
 8001324:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <HAL_UART_MspInit+0x168>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_UART_MspInit+0x170>)
 800132c:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_UART_MspInit+0x174>)
 800132e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_UART_MspInit+0x170>)
 8001332:	221a      	movs	r2, #26
 8001334:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_UART_MspInit+0x170>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_UART_MspInit+0x170>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_UART_MspInit+0x170>)
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_UART_MspInit+0x170>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_UART_MspInit+0x170>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_UART_MspInit+0x170>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_UART_MspInit+0x170>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001360:	4811      	ldr	r0, [pc, #68]	; (80013a8 <HAL_UART_MspInit+0x170>)
 8001362:	f000 fa5d 	bl	8001820 <HAL_DMA_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800136c:	f7ff ff14 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_UART_MspInit+0x170>)
 8001374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_UART_MspInit+0x170>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2026      	movs	r0, #38	; 0x26
 8001384:	f000 fa17 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001388:	2026      	movs	r0, #38	; 0x26
 800138a:	f000 fa2e 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3778      	adds	r7, #120	; 0x78
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40004400 	.word	0x40004400
 800139c:	40021000 	.word	0x40021000
 80013a0:	20000a44 	.word	0x20000a44
 80013a4:	40020008 	.word	0x40020008
 80013a8:	20000aa4 	.word	0x20000aa4
 80013ac:	4002001c 	.word	0x4002001c

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f8c0 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA1_Channel1_IRQHandler+0x10>)
 800140a:	f000 fbec 	bl	8001be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000a44 	.word	0x20000a44

08001418 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Channel2_IRQHandler+0x10>)
 800141e:	f000 fbe2 	bl	8001be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000aa4 	.word	0x20000aa4

0800142c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001432:	f002 f8e7 	bl	8003604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200008ac 	.word	0x200008ac

08001440 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USART2_IRQHandler+0x10>)
 8001446:	f002 ffa1 	bl	800438c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000978 	.word	0x20000978

08001454 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001458:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800145c:	f000 feac 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <SystemInit+0x20>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <SystemInit+0x20>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800148a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148c:	f7ff ffea 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <LoopForever+0xe>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	; (80014d4 <LoopForever+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f004 fc7f 	bl	8005db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ba:	f7ff fcc5 	bl	8000e48 <main>

080014be <LoopForever>:

LoopForever:
    b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   r0, =_estack
 80014c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80014cc:	08005e84 	.word	0x08005e84
  ldr r2, =_sbss
 80014d0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80014d4:	20000b1c 	.word	0x20000b1c

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>

080014da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f95b 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f80e 	bl	800150c <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	e001      	b.n	8001500 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fc:	f7ff fe52 	bl	80011a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001500:	79fb      	ldrb	r3, [r7, #7]

}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_InitTick+0x68>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d022      	beq.n	8001566 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_InitTick+0x6c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_InitTick+0x68>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800152c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f966 	bl	8001806 <HAL_SYSTICK_Config>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10f      	bne.n	8001560 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	d809      	bhi.n	800155a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001546:	2200      	movs	r2, #0
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	f04f 30ff 	mov.w	r0, #4294967295
 800154e:	f000 f932 	bl	80017b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_InitTick+0x70>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e007      	b.n	800156a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e004      	b.n	800156a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e001      	b.n	800156a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000214 	.word	0x20000214
 8001578:	2000020c 	.word	0x2000020c
 800157c:	20000210 	.word	0x20000210

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x1c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x20>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4413      	add	r3, r2
 800158e:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_IncTick+0x1c>)
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	20000b18 	.word	0x20000b18
 80015a0:	20000214 	.word	0x20000214

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000b18 	.word	0x20000b18

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d004      	beq.n	80015e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_Delay+0x40>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e0:	bf00      	nop
 80015e2:	f7ff ffdf 	bl	80015a4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d8f7      	bhi.n	80015e2 <HAL_Delay+0x26>
  {
  }
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000214 	.word	0x20000214

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff29 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff40 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff90 	bl	80016f4 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5f 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff33 	bl	8001664 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa4 	bl	800175c <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e08d      	b.n	800194e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_DMA_Init+0x138>)
 800183a:	429a      	cmp	r2, r3
 800183c:	d80f      	bhi.n	800185e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b45      	ldr	r3, [pc, #276]	; (800195c <HAL_DMA_Init+0x13c>)
 8001846:	4413      	add	r3, r2
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <HAL_DMA_Init+0x140>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a42      	ldr	r2, [pc, #264]	; (8001964 <HAL_DMA_Init+0x144>)
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
 800185c:	e00e      	b.n	800187c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_DMA_Init+0x148>)
 8001866:	4413      	add	r3, r2
 8001868:	4a3d      	ldr	r2, [pc, #244]	; (8001960 <HAL_DMA_Init+0x140>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	009a      	lsls	r2, r3, #2
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a3c      	ldr	r2, [pc, #240]	; (800196c <HAL_DMA_Init+0x14c>)
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fa76 	bl	8001dc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018dc:	d102      	bne.n	80018e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <HAL_DMA_Init+0x104>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b04      	cmp	r3, #4
 8001908:	d80c      	bhi.n	8001924 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fa96 	bl	8001e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	e008      	b.n	8001936 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40020407 	.word	0x40020407
 800195c:	bffdfff8 	.word	0xbffdfff8
 8001960:	cccccccd 	.word	0xcccccccd
 8001964:	40020000 	.word	0x40020000
 8001968:	bffdfbf8 	.word	0xbffdfbf8
 800196c:	40020400 	.word	0x40020400

08001970 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Start_IT+0x20>
 800198c:	2302      	movs	r3, #2
 800198e:	e066      	b.n	8001a5e <HAL_DMA_Start_IT+0xee>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d155      	bne.n	8001a50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0201 	bic.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f9bb 	bl	8001d44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 020e 	orr.w	r2, r2, #14
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e00f      	b.n	8001a08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0204 	bic.w	r2, r2, #4
 80019f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 020a 	orr.w	r2, r2, #10
 8001a06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e005      	b.n	8001a5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d005      	beq.n	8001a8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2204      	movs	r2, #4
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e037      	b.n	8001afa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020e 	bic.w	r2, r2, #14
 8001a98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ad6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001af8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2204      	movs	r2, #4
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e047      	b.n	8001bdc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020e 	bic.w	r2, r2, #14
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
    }
  }
  return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2204      	movs	r2, #4
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d026      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x7a>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d021      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d107      	bne.n	8001c3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0204 	bic.w	r2, r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f003 021f 	and.w	r2, r3, #31
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	2104      	movs	r1, #4
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d071      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c5e:	e06c      	b.n	8001d3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2202      	movs	r2, #2
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d02e      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d029      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 020a 	bic.w	r2, r2, #10
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d038      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cd0:	e033      	b.n	8001d3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	2208      	movs	r2, #8
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d02a      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d025      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 020e 	bic.w	r2, r2, #14
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
}
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d108      	bne.n	8001da4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001da2:	e007      	b.n	8001db4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d802      	bhi.n	8001dda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e001      	b.n	8001dde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ddc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	3b08      	subs	r3, #8
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	009a      	lsls	r2, r3, #2
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40020407 	.word	0x40020407
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020820 	.word	0x40020820
 8001e34:	cccccccd 	.word	0xcccccccd
 8001e38:	40020880 	.word	0x40020880

08001e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e5e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2201      	movs	r2, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	1000823f 	.word	0x1000823f
 8001e80:	40020940 	.word	0x40020940

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e92:	e15a      	b.n	800214a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 814c 	beq.w	8002144 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d005      	beq.n	8001ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d130      	bne.n	8001f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 0201 	and.w	r2, r3, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d017      	beq.n	8001f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d123      	bne.n	8001fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0203 	and.w	r2, r3, #3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80a6 	beq.w	8002144 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6613      	str	r3, [r2, #96]	; 0x60
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8002006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002010:	4a56      	ldr	r2, [pc, #344]	; (800216c <HAL_GPIO_Init+0x2e8>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800203a:	d01f      	beq.n	800207c <HAL_GPIO_Init+0x1f8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d019      	beq.n	8002078 <HAL_GPIO_Init+0x1f4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1f0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <HAL_GPIO_Init+0x2f4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1ec>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_GPIO_Init+0x2f8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1e8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_GPIO_Init+0x2fc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1e4>
 8002064:	2305      	movs	r3, #5
 8002066:	e00a      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002068:	2306      	movs	r3, #6
 800206a:	e008      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 800206c:	2304      	movs	r3, #4
 800206e:	e006      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002070:	2303      	movs	r3, #3
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002074:	2302      	movs	r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 800207c:	2300      	movs	r3, #0
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208e:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_GPIO_Init+0x2e8>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_GPIO_Init+0x300>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c0:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x300>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f ae9d 	bne.w	8001e94 <HAL_GPIO_Init+0x10>
  }
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000
 8002170:	48000400 	.word	0x48000400
 8002174:	48000800 	.word	0x48000800
 8002178:	48000c00 	.word	0x48000c00
 800217c:	48001000 	.word	0x48001000
 8002180:	48001400 	.word	0x48001400
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f806 	bl	80021e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010400 	.word	0x40010400

080021e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d141      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d131      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002222:	4a46      	ldr	r2, [pc, #280]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2232      	movs	r2, #50	; 0x32
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002252:	e002      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d102      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800226e:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d158      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e057      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002286:	4a2d      	ldr	r2, [pc, #180]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002290:	e04d      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002298:	d141      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a6:	d131      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2232      	movs	r2, #50	; 0x32
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022de:	e002      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f2:	d102      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f2      	bne.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002306:	d112      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e011      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800231c:	e007      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40007000 	.word	0x40007000
 8002340:	2000020c 	.word	0x2000020c
 8002344:	431bde83 	.word	0x431bde83

08002348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002356:	6093      	str	r3, [r2, #8]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e2fe      	b.n	8002978 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d075      	beq.n	8002472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002386:	4b97      	ldr	r3, [pc, #604]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002390:	4b94      	ldr	r3, [pc, #592]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3e>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d002      	beq.n	80023ac <HAL_RCC_OscConfig+0x44>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b8d      	ldr	r3, [pc, #564]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e2d9      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x74>
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a84      	ldr	r2, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7e      	ldr	r2, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b7c      	ldr	r3, [pc, #496]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7b      	ldr	r2, [pc, #492]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 8002400:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a77      	ldr	r2, [pc, #476]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a74      	ldr	r2, [pc, #464]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f8c0 	bl	80015a4 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f8bc 	bl	80015a4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e29e      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243a:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xc0>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f8ac 	bl	80015a4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff f8a8 	bl	80015a4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e28a      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002462:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d075      	beq.n	800256a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002488:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x136>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_OscConfig+0x13c>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d11f      	bne.n	80024e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a4:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x154>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e25d      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	4946      	ldr	r1, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024d0:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f819 	bl	800150c <HAL_InitTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d043      	beq.n	8002568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e249      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d023      	beq.n	8002534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ec:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3c      	ldr	r2, [pc, #240]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff f854 	bl	80015a4 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff f850 	bl	80015a4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e232      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	492d      	ldr	r1, [pc, #180]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
 8002532:	e01a      	b.n	800256a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2a      	ldr	r2, [pc, #168]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800253a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff f830 	bl	80015a4 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7ff f82c 	bl	80015a4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e20e      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1e0>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d041      	beq.n	80025fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002584:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7ff f809 	bl	80015a4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002596:	f7ff f805 	bl	80015a4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1e7      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ef      	beq.n	8002596 <HAL_RCC_OscConfig+0x22e>
 80025b6:	e020      	b.n	80025fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_OscConfig+0x27c>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe ffec 	bl	80015a4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ce:	e00d      	b.n	80025ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe ffe8 	bl	80015a4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d906      	bls.n	80025ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1ca      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ec:	4b8c      	ldr	r3, [pc, #560]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ea      	bne.n	80025d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80a6 	beq.w	8002754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800260c:	4b84      	ldr	r3, [pc, #528]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x2b4>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x2b6>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b7f      	ldr	r3, [pc, #508]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
 800262e:	4b7c      	ldr	r3, [pc, #496]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263e:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_OscConfig+0x4bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d118      	bne.n	800267c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x4bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a75      	ldr	r2, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x4bc>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7fe ffa5 	bl	80015a4 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7fe ffa1 	bl	80015a4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e183      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002670:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x4bc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d108      	bne.n	8002696 <HAL_RCC_OscConfig+0x32e>
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	4a65      	ldr	r2, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002694:	e024      	b.n	80026e0 <HAL_RCC_OscConfig+0x378>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d110      	bne.n	80026c0 <HAL_RCC_OscConfig+0x358>
 800269e:	4b60      	ldr	r3, [pc, #384]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	4a5e      	ldr	r2, [pc, #376]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ae:	4b5c      	ldr	r3, [pc, #368]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	4a5a      	ldr	r2, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_OscConfig+0x378>
 80026c0:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d016      	beq.n	8002716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe ff5c 	bl	80015a4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe ff58 	bl	80015a4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e138      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	4b46      	ldr	r3, [pc, #280]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ed      	beq.n	80026f0 <HAL_RCC_OscConfig+0x388>
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7fe ff45 	bl	80015a4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7fe ff41 	bl	80015a4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e121      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002734:	4b3a      	ldr	r3, [pc, #232]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ed      	bne.n	800271e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002742:	7ffb      	ldrb	r3, [r7, #31]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b35      	ldr	r3, [pc, #212]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	4a34      	ldr	r2, [pc, #208]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d03c      	beq.n	80027da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 800276a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276e:	4a2c      	ldr	r2, [pc, #176]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe ff14 	bl	80015a4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002780:	f7fe ff10 	bl	80015a4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0f2      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ef      	beq.n	8002780 <HAL_RCC_OscConfig+0x418>
 80027a0:	e01b      	b.n	80027da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe fef7 	bl	80015a4 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ba:	f7fe fef3 	bl	80015a4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0d5      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ef      	bne.n	80027ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80c9 	beq.w	8002976 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	f000 8083 	beq.w	80028f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d15e      	bne.n	80028b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_RCC_OscConfig+0x4b8>)
 8002800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fecd 	bl	80015a4 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	e00c      	b.n	8002828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fec9 	bl	80015a4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d905      	bls.n	8002828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0ab      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002828:	4b55      	ldr	r3, [pc, #340]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ec      	bne.n	800280e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	4b52      	ldr	r3, [pc, #328]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	4b52      	ldr	r3, [pc, #328]	; (8002984 <HAL_RCC_OscConfig+0x61c>)
 800283a:	4013      	ands	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6a11      	ldr	r1, [r2, #32]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002844:	3a01      	subs	r2, #1
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	4311      	orrs	r1, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800284e:	0212      	lsls	r2, r2, #8
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002856:	0852      	lsrs	r2, r2, #1
 8002858:	3a01      	subs	r2, #1
 800285a:	0552      	lsls	r2, r2, #21
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002862:	0852      	lsrs	r2, r2, #1
 8002864:	3a01      	subs	r2, #1
 8002866:	0652      	lsls	r2, r2, #25
 8002868:	4311      	orrs	r1, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800286e:	06d2      	lsls	r2, r2, #27
 8002870:	430a      	orrs	r2, r1
 8002872:	4943      	ldr	r1, [pc, #268]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 8002874:	4313      	orrs	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a40      	ldr	r2, [pc, #256]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002884:	4b3e      	ldr	r3, [pc, #248]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a3d      	ldr	r2, [pc, #244]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fe88 	bl	80015a4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fe84 	bl	80015a4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e066      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x530>
 80028b6:	e05e      	b.n	8002976 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a30      	ldr	r2, [pc, #192]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 80028be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fe6e 	bl	80015a4 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fe6a 	bl	80015a4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04c      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028de:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028ea:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4924      	ldr	r1, [pc, #144]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_OscConfig+0x620>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60cb      	str	r3, [r1, #12]
 80028f6:	e03e      	b.n	8002976 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e039      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_OscConfig+0x618>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	429a      	cmp	r2, r3
 8002916:	d12c      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	3b01      	subs	r3, #1
 8002924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d123      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11b      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d113      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d109      	bne.n	8002972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	019f800c 	.word	0x019f800c
 8002988:	feeefffc 	.word	0xfeeefffc

0800298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e11e      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b91      	ldr	r3, [pc, #580]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b8e      	ldr	r3, [pc, #568]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 020f 	bic.w	r2, r3, #15
 80029ba:	498c      	ldr	r1, [pc, #560]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b8a      	ldr	r3, [pc, #552]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e106      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d073      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d129      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e8:	4b81      	ldr	r3, [pc, #516]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0f4      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029f8:	f000 f99e 	bl	8002d38 <RCC_GetSysClockFreqFromPLLSource>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4a7c      	ldr	r2, [pc, #496]	; (8002bf4 <HAL_RCC_ClockConfig+0x268>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d93f      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a06:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d033      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d12f      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a26:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2e:	4a70      	ldr	r2, [pc, #448]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e024      	b.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a44:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0c6      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0be      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a64:	f000 f8ce 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4a61      	ldr	r2, [pc, #388]	; (8002bf4 <HAL_RCC_ClockConfig+0x268>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d909      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7a:	4a5d      	ldr	r2, [pc, #372]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4957      	ldr	r1, [pc, #348]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe fd84 	bl	80015a4 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fd80 	bl	80015a4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e095      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a42      	ldr	r2, [pc, #264]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002af8:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b00:	4a3b      	ldr	r2, [pc, #236]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4936      	ldr	r1, [pc, #216]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b80      	cmp	r3, #128	; 0x80
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d21d      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 020f 	bic.w	r2, r3, #15
 8002b44:	4929      	ldr	r1, [pc, #164]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fd2a 	bl	80015a4 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fd26 	bl	80015a4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e03b      	b.n	8002be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1ed      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4917      	ldr	r1, [pc, #92]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	490f      	ldr	r1, [pc, #60]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb6:	f000 f825 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <HAL_RCC_ClockConfig+0x26c>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x270>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x274>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fc96 	bl	800150c <HAL_InitTick>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	04c4b400 	.word	0x04c4b400
 8002bf8:	08005e34 	.word	0x08005e34
 8002bfc:	2000020c 	.word	0x2000020c
 8002c00:	20000210 	.word	0x20000210

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e047      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c28:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	e03e      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d136      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c58:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c62:	68d2      	ldr	r2, [r2, #12]
 8002c64:	0a12      	lsrs	r2, r2, #8
 8002c66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	617b      	str	r3, [r7, #20]
      break;
 8002c70:	e00c      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	0a12      	lsrs	r2, r2, #8
 8002c80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
      break;
 8002c8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0e5b      	lsrs	r3, r3, #25
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	e001      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cac:	693b      	ldr	r3, [r7, #16]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	016e3600 	.word	0x016e3600

08002cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000020c 	.word	0x2000020c

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08005e44 	.word	0x08005e44

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d10:	f7ff ffda 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0adb      	lsrs	r3, r3, #11
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4904      	ldr	r1, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08005e44 	.word	0x08005e44

08002d38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3301      	adds	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d10c      	bne.n	8002d76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5c:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d66:	68d2      	ldr	r2, [r2, #12]
 8002d68:	0a12      	lsrs	r2, r2, #8
 8002d6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	617b      	str	r3, [r7, #20]
    break;
 8002d74:	e00c      	b.n	8002d90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	0a12      	lsrs	r2, r2, #8
 8002d84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    break;
 8002d8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0e5b      	lsrs	r3, r3, #25
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002daa:	687b      	ldr	r3, [r7, #4]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	016e3600 	.word	0x016e3600
 8002dc0:	00f42400 	.word	0x00f42400

08002dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dcc:	2300      	movs	r3, #0
 8002dce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8098 	beq.w	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	4a3f      	ldr	r2, [pc, #252]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a39      	ldr	r2, [pc, #228]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e1a:	f7fe fbc3 	bl	80015a4 <HAL_GetTick>
 8002e1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e20:	e009      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fe fbbf 	bl	80015a4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d902      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	74fb      	strb	r3, [r7, #19]
        break;
 8002e34:	e005      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ef      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d159      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01e      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d019      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e64:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e70:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fb7f 	bl	80015a4 <HAL_GetTick>
 8002ea6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe fb7b 	bl	80015a4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d902      	bls.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	74fb      	strb	r3, [r7, #19]
            break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ec      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002eec:	e008      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	74bb      	strb	r3, [r7, #18]
 8002ef2:	e005      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f00:	7c7b      	ldrb	r3, [r7, #17]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4ba7      	ldr	r3, [pc, #668]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	4aa6      	ldr	r2, [pc, #664]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1e:	4ba1      	ldr	r3, [pc, #644]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f023 0203 	bic.w	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	499d      	ldr	r1, [pc, #628]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f40:	4b98      	ldr	r3, [pc, #608]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f023 020c 	bic.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4995      	ldr	r1, [pc, #596]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f62:	4b90      	ldr	r3, [pc, #576]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	498c      	ldr	r1, [pc, #560]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f84:	4b87      	ldr	r3, [pc, #540]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	4984      	ldr	r1, [pc, #528]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	497b      	ldr	r1, [pc, #492]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc8:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	4973      	ldr	r1, [pc, #460]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fea:	4b6e      	ldr	r3, [pc, #440]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	496a      	ldr	r1, [pc, #424]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800300c:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4962      	ldr	r1, [pc, #392]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800302e:	4b5d      	ldr	r3, [pc, #372]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	4959      	ldr	r1, [pc, #356]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003050:	4b54      	ldr	r3, [pc, #336]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	4951      	ldr	r1, [pc, #324]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003072:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	4948      	ldr	r1, [pc, #288]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4940      	ldr	r1, [pc, #256]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b4:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	4932      	ldr	r1, [pc, #200]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	4924      	ldr	r1, [pc, #144]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800312e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315a:	d105      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003166:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d019      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003192:	d109      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a02      	ldr	r2, [pc, #8]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031b4:	4b29      	ldr	r3, [pc, #164]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	4926      	ldr	r1, [pc, #152]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fa:	4918      	ldr	r1, [pc, #96]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800322a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	490a      	ldr	r1, [pc, #40]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003250:	7cbb      	ldrb	r3, [r7, #18]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e054      	b.n	800331c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d111      	bne.n	80032a2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fdd4 	bl	8003e34 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a23      	ldr	r2, [pc, #140]	; (8003324 <HAL_TIM_Base_Init+0xc4>)
 8003298:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f000 fce3 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	080011ed 	.word	0x080011ed

08003328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d001      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e054      	b.n	80033ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d022      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d01d      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d018      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_TIM_Base_Start_IT+0xd8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <HAL_TIM_Base_Start_IT+0xdc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_TIM_Base_Start_IT+0xe0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1c      	ldr	r2, [pc, #112]	; (800340c <HAL_TIM_Base_Start_IT+0xe4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x80>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_TIM_Base_Start_IT+0xe8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d115      	bne.n	80033d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_TIM_Base_Start_IT+0xec>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d015      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0xbe>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d011      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	e008      	b.n	80033e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40014000 	.word	0x40014000
 8003410:	40015000 	.word	0x40015000
 8003414:	00010007 	.word	0x00010007

08003418 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e04c      	b.n	80034c6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d111      	bne.n	800345c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fcf7 	bl	8003e34 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_TIM_OnePulse_Init+0xb8>)
 8003452:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fc06 	bl	8003c80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0208 	bic.w	r2, r2, #8
 8003482:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	080034d5 	.word	0x080034d5

080034d4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003500:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003508:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003510:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d108      	bne.n	800352a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003518:	7bbb      	ldrb	r3, [r7, #14]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800351e:	7b7b      	ldrb	r3, [r7, #13]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d102      	bne.n	800352a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003524:	7b3b      	ldrb	r3, [r7, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e059      	b.n	80035e2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0202 	orr.w	r2, r2, #2
 800355c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0204 	orr.w	r2, r2, #4
 800356c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fc36 	bl	8003de8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	2104      	movs	r1, #4
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fc2f 	bl	8003de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_TIM_OnePulse_Start_IT+0x104>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d018      	beq.n	80035c6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00e      	beq.n	80035c6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a11      	ldr	r2, [pc, #68]	; (80035fc <HAL_TIM_OnePulse_Start_IT+0x114>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_OnePulse_Start_IT+0xe2>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_TIM_OnePulse_Start_IT+0xe4>
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40013400 	.word	0x40013400
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800
 8003600:	40015000 	.word	0x40015000

08003604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d026      	beq.n	8003674 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d021      	beq.n	8003674 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0202 	mvn.w	r2, #2
 8003638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
 8003658:	e009      	b.n	800366e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d026      	beq.n	80036cc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d021      	beq.n	80036cc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0204 	mvn.w	r2, #4
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
 80036b0:	e009      	b.n	80036c6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d026      	beq.n	8003724 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d021      	beq.n	8003724 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0208 	mvn.w	r2, #8
 80036e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
 8003708:	e009      	b.n	800371e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	d026      	beq.n	800377c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d021      	beq.n	800377c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0210 	mvn.w	r2, #16
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2208      	movs	r2, #8
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
 8003760:	e009      	b.n	8003776 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00e      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0201 	mvn.w	r2, #1
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80037ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00e      	beq.n	8003826 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800381a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f06f 0220 	mvn.w	r2, #32
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800386a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	460b      	mov	r3, r1
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e14a      	b.n	8003c72 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 80dd 	bne.w	8003ba4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80039ea:	7afb      	ldrb	r3, [r7, #11]
 80039ec:	2b1f      	cmp	r3, #31
 80039ee:	f200 80d6 	bhi.w	8003b9e <HAL_TIM_RegisterCallback+0x1de>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <HAL_TIM_RegisterCallback+0x38>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a79 	.word	0x08003a79
 80039fc:	08003a81 	.word	0x08003a81
 8003a00:	08003a89 	.word	0x08003a89
 8003a04:	08003a91 	.word	0x08003a91
 8003a08:	08003a99 	.word	0x08003a99
 8003a0c:	08003aa1 	.word	0x08003aa1
 8003a10:	08003aa9 	.word	0x08003aa9
 8003a14:	08003ab1 	.word	0x08003ab1
 8003a18:	08003ab9 	.word	0x08003ab9
 8003a1c:	08003ac1 	.word	0x08003ac1
 8003a20:	08003ac9 	.word	0x08003ac9
 8003a24:	08003ad1 	.word	0x08003ad1
 8003a28:	08003ad9 	.word	0x08003ad9
 8003a2c:	08003ae1 	.word	0x08003ae1
 8003a30:	08003aeb 	.word	0x08003aeb
 8003a34:	08003af5 	.word	0x08003af5
 8003a38:	08003aff 	.word	0x08003aff
 8003a3c:	08003b09 	.word	0x08003b09
 8003a40:	08003b13 	.word	0x08003b13
 8003a44:	08003b1d 	.word	0x08003b1d
 8003a48:	08003b27 	.word	0x08003b27
 8003a4c:	08003b31 	.word	0x08003b31
 8003a50:	08003b3b 	.word	0x08003b3b
 8003a54:	08003b45 	.word	0x08003b45
 8003a58:	08003b4f 	.word	0x08003b4f
 8003a5c:	08003b59 	.word	0x08003b59
 8003a60:	08003b63 	.word	0x08003b63
 8003a64:	08003b6d 	.word	0x08003b6d
 8003a68:	08003b77 	.word	0x08003b77
 8003a6c:	08003b81 	.word	0x08003b81
 8003a70:	08003b8b 	.word	0x08003b8b
 8003a74:	08003b95 	.word	0x08003b95
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003a7e:	e0f7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003a86:	e0f3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003a8e:	e0ef      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003a96:	e0eb      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003a9e:	e0e7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003aa6:	e0e3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003aae:	e0df      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003ab6:	e0db      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003abe:	e0d7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003ac6:	e0d3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003ace:	e0cf      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003ad6:	e0cb      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003ade:	e0c7      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003ae8:	e0c2      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003af2:	e0bd      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003afc:	e0b8      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003b06:	e0b3      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003b10:	e0ae      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003b1a:	e0a9      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003b24:	e0a4      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003b2e:	e09f      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003b38:	e09a      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003b42:	e095      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003b4c:	e090      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003b56:	e08b      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003b60:	e086      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8003b6a:	e081      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003b74:	e07c      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8003b7e:	e077      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8003b88:	e072      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003b92:	e06d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003b9c:	e068      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ba2:	e065      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d15d      	bne.n	8003c6c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
 8003bb2:	2b0d      	cmp	r3, #13
 8003bb4:	d857      	bhi.n	8003c66 <HAL_TIM_RegisterCallback+0x2a6>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_TIM_RegisterCallback+0x1fc>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bf5 	.word	0x08003bf5
 8003bc0:	08003bfd 	.word	0x08003bfd
 8003bc4:	08003c05 	.word	0x08003c05
 8003bc8:	08003c0d 	.word	0x08003c0d
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c1d 	.word	0x08003c1d
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c2d 	.word	0x08003c2d
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c3d 	.word	0x08003c3d
 8003be4:	08003c45 	.word	0x08003c45
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c55 	.word	0x08003c55
 8003bf0:	08003c5d 	.word	0x08003c5d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003bfa:	e039      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003c02:	e035      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003c0a:	e031      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003c12:	e02d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003c1a:	e029      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003c22:	e025      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003c2a:	e021      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003c32:	e01d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003c3a:	e019      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003c42:	e015      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003c4a:	e011      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003c52:	e00d      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003c5a:	e009      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003c64:	e004      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
        break;
 8003c6a:	e001      	b.n	8003c70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a4c      	ldr	r2, [pc, #304]	; (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d017      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9e:	d013      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a49      	ldr	r2, [pc, #292]	; (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a48      	ldr	r2, [pc, #288]	; (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a47      	ldr	r2, [pc, #284]	; (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a46      	ldr	r2, [pc, #280]	; (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a45      	ldr	r2, [pc, #276]	; (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d023      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d01f      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a36      	ldr	r2, [pc, #216]	; (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01b      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a35      	ldr	r2, [pc, #212]	; (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d017      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	; (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00f      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <TIM_Base_SetConfig+0x15c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a32      	ldr	r2, [pc, #200]	; (8003de0 <TIM_Base_SetConfig+0x160>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a31      	ldr	r2, [pc, #196]	; (8003de4 <TIM_Base_SetConfig+0x164>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d108      	bne.n	8003d3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <TIM_Base_SetConfig+0x15c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <TIM_Base_SetConfig+0x160>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <TIM_Base_SetConfig+0x164>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]
  }
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40015000 	.word	0x40015000
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800

08003de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <TIM_ResetCallback+0xa4>)
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a25      	ldr	r2, [pc, #148]	; (8003edc <TIM_ResetCallback+0xa8>)
 8003e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a24      	ldr	r2, [pc, #144]	; (8003ee0 <TIM_ResetCallback+0xac>)
 8003e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <TIM_ResetCallback+0xb0>)
 8003e58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <TIM_ResetCallback+0xb4>)
 8003e60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a21      	ldr	r2, [pc, #132]	; (8003eec <TIM_ResetCallback+0xb8>)
 8003e68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <TIM_ResetCallback+0xbc>)
 8003e70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <TIM_ResetCallback+0xc0>)
 8003e78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <TIM_ResetCallback+0xc4>)
 8003e80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <TIM_ResetCallback+0xc8>)
 8003e88:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <TIM_ResetCallback+0xcc>)
 8003e90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <TIM_ResetCallback+0xd0>)
 8003e98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <TIM_ResetCallback+0xd4>)
 8003ea0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <TIM_ResetCallback+0xd8>)
 8003ea8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <TIM_ResetCallback+0xdc>)
 8003eb0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <TIM_ResetCallback+0xe0>)
 8003eb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <TIM_ResetCallback+0xe4>)
 8003ec0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <TIM_ResetCallback+0xe8>)
 8003ec8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	080038f7 	.word	0x080038f7
 8003edc:	0800390b 	.word	0x0800390b
 8003ee0:	08003983 	.word	0x08003983
 8003ee4:	08003997 	.word	0x08003997
 8003ee8:	08003933 	.word	0x08003933
 8003eec:	08003947 	.word	0x08003947
 8003ef0:	0800391f 	.word	0x0800391f
 8003ef4:	0800395b 	.word	0x0800395b
 8003ef8:	0800396f 	.word	0x0800396f
 8003efc:	080039ab 	.word	0x080039ab
 8003f00:	08003f21 	.word	0x08003f21
 8003f04:	08003f35 	.word	0x08003f35
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f5d 	.word	0x08003f5d
 8003f10:	08003f71 	.word	0x08003f71
 8003f14:	08003f85 	.word	0x08003f85
 8003f18:	08003f99 	.word	0x08003f99
 8003f1c:	08003fad 	.word	0x08003fad

08003f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e050      	b.n	8004074 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d114      	bne.n	8004006 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fdc5 	bl	8004b74 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <HAL_UART_Init+0xbc>)
 8003ff8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2224      	movs	r2, #36	; 0x24
 800400a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f001 f8f2 	bl	8005210 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fdf3 	bl	8004c18 <UART_SetConfig>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e01b      	b.n	8004074 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800404a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800405a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f001 f971 	bl	8005354 <UART_CheckIdleState>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	08001239 	.word	0x08001239

08004080 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	460b      	mov	r3, r1
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e09c      	b.n	80041e6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d16c      	bne.n	8004190 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d85e      	bhi.n	800417a <HAL_UART_RegisterCallback+0xfa>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <HAL_UART_RegisterCallback+0x44>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	08004103 	.word	0x08004103
 80040cc:	0800410d 	.word	0x0800410d
 80040d0:	08004117 	.word	0x08004117
 80040d4:	08004121 	.word	0x08004121
 80040d8:	0800412b 	.word	0x0800412b
 80040dc:	08004135 	.word	0x08004135
 80040e0:	0800413f 	.word	0x0800413f
 80040e4:	08004149 	.word	0x08004149
 80040e8:	08004153 	.word	0x08004153
 80040ec:	0800415d 	.word	0x0800415d
 80040f0:	08004167 	.word	0x08004167
 80040f4:	08004171 	.word	0x08004171
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004100:	e070      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800410a:	e06b      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004114:	e066      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800411e:	e061      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004128:	e05c      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004132:	e057      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800413c:	e052      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004146:	e04d      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8004150:	e048      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 800415a:	e043      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8004164:	e03e      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800416e:	e039      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8004178:	e034      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
        break;
 800418e:	e029      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11a      	bne.n	80041d0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800419a:	7afb      	ldrb	r3, [r7, #11]
 800419c:	2b0b      	cmp	r3, #11
 800419e:	d002      	beq.n	80041a6 <HAL_UART_RegisterCallback+0x126>
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d005      	beq.n	80041b0 <HAL_UART_RegisterCallback+0x130>
 80041a4:	e009      	b.n	80041ba <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 80041ae:	e019      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 80041b8:	e014      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
        break;
 80041ce:	e009      	b.n	80041e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	2b20      	cmp	r3, #32
 800420a:	d167      	bne.n	80042dc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_UART_Transmit_DMA+0x24>
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e060      	b.n	80042de <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	88fa      	ldrh	r2, [r7, #6]
 800422e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	; 0x21
 800423e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d028      	beq.n	800429c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424e:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <HAL_UART_Transmit_DMA+0xf4>)
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004256:	4a25      	ldr	r2, [pc, #148]	; (80042ec <HAL_UART_Transmit_DMA+0xf8>)
 8004258:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425e:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <HAL_UART_Transmit_DMA+0xfc>)
 8004260:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004266:	2200      	movs	r2, #0
 8004268:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	4619      	mov	r1, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3328      	adds	r3, #40	; 0x28
 800427a:	461a      	mov	r2, r3
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	f7fd fb77 	bl	8001970 <HAL_DMA_Start_IT>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2210      	movs	r2, #16
 800428c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e020      	b.n	80042de <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	613b      	str	r3, [r7, #16]
   return(result);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c4:	623a      	str	r2, [r7, #32]
 80042c6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3728      	adds	r7, #40	; 0x28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	0800581f 	.word	0x0800581f
 80042ec:	080058bd 	.word	0x080058bd
 80042f0:	08005a57 	.word	0x08005a57

080042f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004308:	2b20      	cmp	r3, #32
 800430a:	d137      	bne.n	800437c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Receive_DMA+0x24>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e030      	b.n	800437e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_UART_Receive_DMA+0x94>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d01f      	beq.n	800436c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	613b      	str	r3, [r7, #16]
   return(result);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	69f9      	ldr	r1, [r7, #28]
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	61bb      	str	r3, [r7, #24]
   return(result);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e6      	bne.n	800433a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	461a      	mov	r2, r3
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f001 f906 	bl	8005584 <UART_Start_Receive_DMA>
 8004378:	4603      	mov	r3, r0
 800437a:	e000      	b.n	800437e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3728      	adds	r7, #40	; 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40008000 	.word	0x40008000

0800438c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b0ba      	sub	sp, #232	; 0xe8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80043ba:	4013      	ands	r3, r2
 80043bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80043c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11b      	bne.n	8004400 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d015      	beq.n	8004400 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 82f3 	beq.w	80049dc <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
      }
      return;
 80043fe:	e2ed      	b.n	80049dc <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8129 	beq.w	800465c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800440a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800440e:	4b90      	ldr	r3, [pc, #576]	; (8004650 <HAL_UART_IRQHandler+0x2c4>)
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004416:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800441a:	4b8e      	ldr	r3, [pc, #568]	; (8004654 <HAL_UART_IRQHandler+0x2c8>)
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 811c 	beq.w	800465c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d011      	beq.n	8004454 <HAL_UART_IRQHandler+0xc8>
 8004430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <HAL_UART_IRQHandler+0xf8>
 8004460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2202      	movs	r2, #2
 8004472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f043 0204 	orr.w	r2, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <HAL_UART_IRQHandler+0x128>
 8004490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2204      	movs	r2, #4
 80044a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f043 0202 	orr.w	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d017      	beq.n	80044f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80044cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044d0:	4b5f      	ldr	r3, [pc, #380]	; (8004650 <HAL_UART_IRQHandler+0x2c4>)
 80044d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2208      	movs	r2, #8
 80044de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f043 0208 	orr.w	r2, r3, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <HAL_UART_IRQHandler+0x196>
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8259 	beq.w	80049e0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d013      	beq.n	8004562 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800453a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d005      	beq.n	8004586 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800457a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800457e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	d058      	beq.n	8004638 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f001 f8e3 	bl	8005752 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d148      	bne.n	800462c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3308      	adds	r3, #8
 80045a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3308      	adds	r3, #8
 80045c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1d9      	bne.n	800459a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d017      	beq.n	8004620 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_UART_IRQHandler+0x2cc>)
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004600:	4618      	mov	r0, r3
 8004602:	f7fd fa89 	bl	8001b18 <HAL_DMA_Abort_IT>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01f      	beq.n	800464c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800461a:	4610      	mov	r0, r2
 800461c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461e:	e015      	b.n	800464c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462a:	e00f      	b.n	800464c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004636:	e009      	b.n	800464c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800464a:	e1c9      	b.n	80049e0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464c:	bf00      	nop
    return;
 800464e:	e1c7      	b.n	80049e0 <HAL_UART_IRQHandler+0x654>
 8004650:	10000001 	.word	0x10000001
 8004654:	04000120 	.word	0x04000120
 8004658:	08005adb 	.word	0x08005adb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004660:	2b01      	cmp	r3, #1
 8004662:	f040 8157 	bne.w	8004914 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8150 	beq.w	8004914 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8149 	beq.w	8004914 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2210      	movs	r2, #16
 8004688:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	f040 80bd 	bne.w	8004814 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8199 	beq.w	80049e4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046bc:	429a      	cmp	r2, r3
 80046be:	f080 8191 	bcs.w	80049e4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f040 8087 	bne.w	80047ee <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800470a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800470e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004716:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1da      	bne.n	80046e0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800473a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3308      	adds	r3, #8
 800474a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800474e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004752:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004756:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e1      	bne.n	800472a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800478a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800478c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004790:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e3      	bne.n	8004766 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047bc:	f023 0310 	bic.w	r3, r3, #16
 80047c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80047d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e4      	bne.n	80047ac <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd f93c 	bl	8001a66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8004806:	b292      	uxth	r2, r2
 8004808:	1a8a      	subs	r2, r1, r2
 800480a:	b292      	uxth	r2, r2
 800480c:	4611      	mov	r1, r2
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004812:	e0e7      	b.n	80049e4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004820:	b29b      	uxth	r3, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80d9 	beq.w	80049e8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004836:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80d4 	beq.w	80049e8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800484e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004862:	647b      	str	r3, [r7, #68]	; 0x44
 8004864:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e4      	bne.n	8004840 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	623b      	str	r3, [r7, #32]
   return(result);
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3308      	adds	r3, #8
 800489a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800489e:	633a      	str	r2, [r7, #48]	; 0x30
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e1      	bne.n	8004876 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0310 	bic.w	r3, r3, #16
 80048da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	69b9      	ldr	r1, [r7, #24]
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	617b      	str	r3, [r7, #20]
   return(result);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e4      	bne.n	80048c6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004908:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800490c:	4611      	mov	r1, r2
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004912:	e069      	b.n	80049e8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d010      	beq.n	8004942 <HAL_UART_IRQHandler+0x5b6>
 8004920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004934:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004940:	e055      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d014      	beq.n	8004978 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800494e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b00      	cmp	r3, #0
 8004958:	d105      	bne.n	8004966 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800495a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	2b00      	cmp	r3, #0
 800496c:	d03e      	beq.n	80049ec <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
    }
    return;
 8004976:	e039      	b.n	80049ec <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <HAL_UART_IRQHandler+0x60c>
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 f8ba 	bl	8005b0a <UART_EndTransmit_IT>
    return;
 8004996:	e02a      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_UART_IRQHandler+0x630>
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049ba:	e018      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_UART_IRQHandler+0x662>
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da0e      	bge.n	80049ee <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049da:	e008      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
      return;
 80049dc:	bf00      	nop
 80049de:	e006      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
    return;
 80049e0:	bf00      	nop
 80049e2:	e004      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
      return;
 80049e4:	bf00      	nop
 80049e6:	e002      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
      return;
 80049e8:	bf00      	nop
 80049ea:	e000      	b.n	80049ee <HAL_UART_IRQHandler+0x662>
    return;
 80049ec:	bf00      	nop
  }
}
 80049ee:	37e8      	adds	r7, #232	; 0xe8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	615a      	str	r2, [r3, #20]
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40008000 	.word	0x40008000

08004ae4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_UART_EnableReceiverTimeout+0x70>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d027      	beq.n	8004b46 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d120      	bne.n	8004b42 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_EnableReceiverTimeout+0x2a>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e01c      	b.n	8004b48 <HAL_UART_EnableReceiverTimeout+0x64>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2224      	movs	r2, #36	; 0x24
 8004b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b2c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e002      	b.n	8004b48 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
 8004b44:	e000      	b.n	8004b48 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
  }
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40008000 	.word	0x40008000

08004b58 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <UART_InitCallbacksToDefault+0x74>)
 8004b80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a19      	ldr	r2, [pc, #100]	; (8004bec <UART_InitCallbacksToDefault+0x78>)
 8004b88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <UART_InitCallbacksToDefault+0x7c>)
 8004b90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <UART_InitCallbacksToDefault+0x80>)
 8004b98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <UART_InitCallbacksToDefault+0x84>)
 8004ba0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <UART_InitCallbacksToDefault+0x88>)
 8004ba8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <UART_InitCallbacksToDefault+0x8c>)
 8004bb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <UART_InitCallbacksToDefault+0x90>)
 8004bb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <UART_InitCallbacksToDefault+0x94>)
 8004bc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <UART_InitCallbacksToDefault+0x98>)
 8004bc8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <UART_InitCallbacksToDefault+0x9c>)
 8004bd0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0f      	ldr	r2, [pc, #60]	; (8004c14 <UART_InitCallbacksToDefault+0xa0>)
 8004bd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	08004a09 	.word	0x08004a09
 8004bec:	080049f5 	.word	0x080049f5
 8004bf0:	08004a31 	.word	0x08004a31
 8004bf4:	08004a1d 	.word	0x08004a1d
 8004bf8:	08004a45 	.word	0x08004a45
 8004bfc:	08004a59 	.word	0x08004a59
 8004c00:	08004a6d 	.word	0x08004a6d
 8004c04:	08004a81 	.word	0x08004a81
 8004c08:	08005b65 	.word	0x08005b65
 8004c0c:	08005b79 	.word	0x08005b79
 8004c10:	08005b8d 	.word	0x08005b8d
 8004c14:	08004a95 	.word	0x08004a95

08004c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c1c:	b08c      	sub	sp, #48	; 0x30
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4baa      	ldr	r3, [pc, #680]	; (8004ef0 <UART_SetConfig+0x2d8>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a9f      	ldr	r2, [pc, #636]	; (8004ef4 <UART_SetConfig+0x2dc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f023 010f 	bic.w	r1, r3, #15
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a90      	ldr	r2, [pc, #576]	; (8004ef8 <UART_SetConfig+0x2e0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d125      	bne.n	8004d08 <UART_SetConfig+0xf0>
 8004cbc:	4b8f      	ldr	r3, [pc, #572]	; (8004efc <UART_SetConfig+0x2e4>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d81a      	bhi.n	8004d00 <UART_SetConfig+0xe8>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0xb8>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004cf9 	.word	0x08004cf9
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce6:	e116      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cee:	e112      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf6:	e10e      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	e10a      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e106      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7c      	ldr	r2, [pc, #496]	; (8004f00 <UART_SetConfig+0x2e8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d138      	bne.n	8004d84 <UART_SetConfig+0x16c>
 8004d12:	4b7a      	ldr	r3, [pc, #488]	; (8004efc <UART_SetConfig+0x2e4>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d82d      	bhi.n	8004d7c <UART_SetConfig+0x164>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x110>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d5d 	.word	0x08004d5d
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004d7d 	.word	0x08004d7d
 8004d34:	08004d7d 	.word	0x08004d7d
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d7d 	.word	0x08004d7d
 8004d40:	08004d7d 	.word	0x08004d7d
 8004d44:	08004d7d 	.word	0x08004d7d
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d75 	.word	0x08004d75
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d62:	e0d8      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004d64:	2302      	movs	r3, #2
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6a:	e0d4      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d72:	e0d0      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d7a:	e0cc      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e0c8      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a5e      	ldr	r2, [pc, #376]	; (8004f04 <UART_SetConfig+0x2ec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d125      	bne.n	8004dda <UART_SetConfig+0x1c2>
 8004d8e:	4b5b      	ldr	r3, [pc, #364]	; (8004efc <UART_SetConfig+0x2e4>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d016      	beq.n	8004dca <UART_SetConfig+0x1b2>
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d818      	bhi.n	8004dd2 <UART_SetConfig+0x1ba>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d00a      	beq.n	8004dba <UART_SetConfig+0x1a2>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d814      	bhi.n	8004dd2 <UART_SetConfig+0x1ba>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <UART_SetConfig+0x19a>
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d008      	beq.n	8004dc2 <UART_SetConfig+0x1aa>
 8004db0:	e00f      	b.n	8004dd2 <UART_SetConfig+0x1ba>
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db8:	e0ad      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc0:	e0a9      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc8:	e0a5      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd0:	e0a1      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd8:	e09d      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a4a      	ldr	r2, [pc, #296]	; (8004f08 <UART_SetConfig+0x2f0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d125      	bne.n	8004e30 <UART_SetConfig+0x218>
 8004de4:	4b45      	ldr	r3, [pc, #276]	; (8004efc <UART_SetConfig+0x2e4>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dee:	2bc0      	cmp	r3, #192	; 0xc0
 8004df0:	d016      	beq.n	8004e20 <UART_SetConfig+0x208>
 8004df2:	2bc0      	cmp	r3, #192	; 0xc0
 8004df4:	d818      	bhi.n	8004e28 <UART_SetConfig+0x210>
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d00a      	beq.n	8004e10 <UART_SetConfig+0x1f8>
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d814      	bhi.n	8004e28 <UART_SetConfig+0x210>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <UART_SetConfig+0x1f0>
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d008      	beq.n	8004e18 <UART_SetConfig+0x200>
 8004e06:	e00f      	b.n	8004e28 <UART_SetConfig+0x210>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e082      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e07e      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1e:	e07a      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e26:	e076      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e072      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <UART_SetConfig+0x2f4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d12a      	bne.n	8004e90 <UART_SetConfig+0x278>
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <UART_SetConfig+0x2e4>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e48:	d01a      	beq.n	8004e80 <UART_SetConfig+0x268>
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4e:	d81b      	bhi.n	8004e88 <UART_SetConfig+0x270>
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d00c      	beq.n	8004e70 <UART_SetConfig+0x258>
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5a:	d815      	bhi.n	8004e88 <UART_SetConfig+0x270>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <UART_SetConfig+0x250>
 8004e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e64:	d008      	beq.n	8004e78 <UART_SetConfig+0x260>
 8004e66:	e00f      	b.n	8004e88 <UART_SetConfig+0x270>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e6e:	e052      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e76:	e04e      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7e:	e04a      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e86:	e046      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	e042      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <UART_SetConfig+0x2dc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d13a      	bne.n	8004f10 <UART_SetConfig+0x2f8>
 8004e9a:	4b18      	ldr	r3, [pc, #96]	; (8004efc <UART_SetConfig+0x2e4>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea8:	d01a      	beq.n	8004ee0 <UART_SetConfig+0x2c8>
 8004eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eae:	d81b      	bhi.n	8004ee8 <UART_SetConfig+0x2d0>
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	d00c      	beq.n	8004ed0 <UART_SetConfig+0x2b8>
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eba:	d815      	bhi.n	8004ee8 <UART_SetConfig+0x2d0>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <UART_SetConfig+0x2b0>
 8004ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec4:	d008      	beq.n	8004ed8 <UART_SetConfig+0x2c0>
 8004ec6:	e00f      	b.n	8004ee8 <UART_SetConfig+0x2d0>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ece:	e022      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed6:	e01e      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ede:	e01a      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee6:	e016      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eee:	e012      	b.n	8004f16 <UART_SetConfig+0x2fe>
 8004ef0:	cfff69f3 	.word	0xcfff69f3
 8004ef4:	40008000 	.word	0x40008000
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40004800 	.word	0x40004800
 8004f08:	40004c00 	.word	0x40004c00
 8004f0c:	40005000 	.word	0x40005000
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4aae      	ldr	r2, [pc, #696]	; (80051d4 <UART_SetConfig+0x5bc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	f040 8097 	bne.w	8005050 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d823      	bhi.n	8004f72 <UART_SetConfig+0x35a>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x318>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f73 	.word	0x08004f73
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004f63 	.word	0x08004f63
 8004f44:	08004f73 	.word	0x08004f73
 8004f48:	08004f73 	.word	0x08004f73
 8004f4c:	08004f73 	.word	0x08004f73
 8004f50:	08004f6b 	.word	0x08004f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fd fec4 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8004f58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f5a:	e010      	b.n	8004f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b9e      	ldr	r3, [pc, #632]	; (80051d8 <UART_SetConfig+0x5c0>)
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f60:	e00d      	b.n	8004f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7fd fe4f 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8004f66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f68:	e009      	b.n	8004f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f70:	e005      	b.n	8004f7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8130 	beq.w	80051e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	4a94      	ldr	r2, [pc, #592]	; (80051dc <UART_SetConfig+0x5c4>)
 8004f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d305      	bcc.n	8004fb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d903      	bls.n	8004fbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fbc:	e113      	b.n	80051e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	60fa      	str	r2, [r7, #12]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	4a84      	ldr	r2, [pc, #528]	; (80051dc <UART_SetConfig+0x5c4>)
 8004fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fe0:	f7fb f91a 	bl	8000218 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	020b      	lsls	r3, r1, #8
 8004ff6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ffa:	0202      	lsls	r2, r0, #8
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	6849      	ldr	r1, [r1, #4]
 8005000:	0849      	lsrs	r1, r1, #1
 8005002:	2000      	movs	r0, #0
 8005004:	460c      	mov	r4, r1
 8005006:	4605      	mov	r5, r0
 8005008:	eb12 0804 	adds.w	r8, r2, r4
 800500c:	eb43 0905 	adc.w	r9, r3, r5
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	469a      	mov	sl, r3
 8005018:	4693      	mov	fp, r2
 800501a:	4652      	mov	r2, sl
 800501c:	465b      	mov	r3, fp
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f7fb f8f9 	bl	8000218 <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4613      	mov	r3, r2
 800502c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005034:	d308      	bcc.n	8005048 <UART_SetConfig+0x430>
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503c:	d204      	bcs.n	8005048 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	e0ce      	b.n	80051e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800504e:	e0ca      	b.n	80051e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005058:	d166      	bne.n	8005128 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800505a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800505e:	2b08      	cmp	r3, #8
 8005060:	d827      	bhi.n	80050b2 <UART_SetConfig+0x49a>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <UART_SetConfig+0x450>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005095 	.word	0x08005095
 8005070:	0800509d 	.word	0x0800509d
 8005074:	080050b3 	.word	0x080050b3
 8005078:	080050a3 	.word	0x080050a3
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050b3 	.word	0x080050b3
 8005088:	080050ab 	.word	0x080050ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fd fe28 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8005090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005092:	e014      	b.n	80050be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fd fe3a 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8005098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800509a:	e010      	b.n	80050be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800509c:	4b4e      	ldr	r3, [pc, #312]	; (80051d8 <UART_SetConfig+0x5c0>)
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050a0:	e00d      	b.n	80050be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7fd fdaf 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050a8:	e009      	b.n	80050be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050b0:	e005      	b.n	80050be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8090 	beq.w	80051e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	4a44      	ldr	r2, [pc, #272]	; (80051dc <UART_SetConfig+0x5c4>)
 80050cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d8:	005a      	lsls	r2, r3, #1
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	441a      	add	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d916      	bls.n	8005120 <UART_SetConfig+0x508>
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f8:	d212      	bcs.n	8005120 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f023 030f 	bic.w	r3, r3, #15
 8005102:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	b29b      	uxth	r3, r3
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	b29a      	uxth	r2, r3
 8005110:	8bfb      	ldrh	r3, [r7, #30]
 8005112:	4313      	orrs	r3, r2
 8005114:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	8bfa      	ldrh	r2, [r7, #30]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	e062      	b.n	80051e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005126:	e05e      	b.n	80051e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800512c:	2b08      	cmp	r3, #8
 800512e:	d828      	bhi.n	8005182 <UART_SetConfig+0x56a>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x520>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800515d 	.word	0x0800515d
 800513c:	08005165 	.word	0x08005165
 8005140:	0800516d 	.word	0x0800516d
 8005144:	08005183 	.word	0x08005183
 8005148:	08005173 	.word	0x08005173
 800514c:	08005183 	.word	0x08005183
 8005150:	08005183 	.word	0x08005183
 8005154:	08005183 	.word	0x08005183
 8005158:	0800517b 	.word	0x0800517b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fd fdc0 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8005160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005162:	e014      	b.n	800518e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005164:	f7fd fdd2 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8005168:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800516a:	e010      	b.n	800518e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800516c:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <UART_SetConfig+0x5c0>)
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005170:	e00d      	b.n	800518e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005172:	f7fd fd47 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8005176:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005178:	e009      	b.n	800518e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005180:	e005      	b.n	800518e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800518c:	bf00      	nop
    }

    if (pclk != 0U)
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d028      	beq.n	80051e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	4a10      	ldr	r2, [pc, #64]	; (80051dc <UART_SetConfig+0x5c4>)
 800519a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519e:	461a      	mov	r2, r3
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	441a      	add	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	d910      	bls.n	80051e0 <UART_SetConfig+0x5c8>
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d20c      	bcs.n	80051e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60da      	str	r2, [r3, #12]
 80051d0:	e009      	b.n	80051e6 <UART_SetConfig+0x5ce>
 80051d2:	bf00      	nop
 80051d4:	40008000 	.word	0x40008000
 80051d8:	00f42400 	.word	0x00f42400
 80051dc:	08005e4c 	.word	0x08005e4c
      }
      else
      {
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2200      	movs	r2, #0
 80051fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2200      	movs	r2, #0
 8005200:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005202:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005206:	4618      	mov	r0, r3
 8005208:	3730      	adds	r7, #48	; 0x30
 800520a:	46bd      	mov	sp, r7
 800520c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01a      	beq.n	8005326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530e:	d10a      	bne.n	8005326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	605a      	str	r2, [r3, #4]
  }
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b098      	sub	sp, #96	; 0x60
 8005358:	af02      	add	r7, sp, #8
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005364:	f7fc f91e 	bl	80015a4 <HAL_GetTick>
 8005368:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b08      	cmp	r3, #8
 8005376:	d12f      	bne.n	80053d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005380:	2200      	movs	r2, #0
 8005382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f88e 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d022      	beq.n	80053d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a6:	653b      	str	r3, [r7, #80]	; 0x50
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
 80053b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e6      	bne.n	8005392 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e063      	b.n	80054a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d149      	bne.n	800547a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ee:	2200      	movs	r2, #0
 80053f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f857 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d03c      	beq.n	800547a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	623b      	str	r3, [r7, #32]
   return(result);
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541e:	633b      	str	r3, [r7, #48]	; 0x30
 8005420:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	60fb      	str	r3, [r7, #12]
   return(result);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	64bb      	str	r3, [r7, #72]	; 0x48
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005452:	61fa      	str	r2, [r7, #28]
 8005454:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	69b9      	ldr	r1, [r7, #24]
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	617b      	str	r3, [r7, #20]
   return(result);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e5      	bne.n	8005432 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e012      	b.n	80054a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3758      	adds	r7, #88	; 0x58
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	e04f      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d04b      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fc f86f 	bl	80015a4 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e04e      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d037      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d034      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d031      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d110      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2208      	movs	r2, #8
 800550a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f920 	bl	8005752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2208      	movs	r2, #8
 8005516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e029      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005534:	d111      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800553e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f906 	bl	8005752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e00f      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	429a      	cmp	r2, r3
 8005576:	d0a0      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b096      	sub	sp, #88	; 0x58
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2222      	movs	r2, #34	; 0x22
 80055ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d02d      	beq.n	8005616 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c0:	4a40      	ldr	r2, [pc, #256]	; (80056c4 <UART_Start_Receive_DMA+0x140>)
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <UART_Start_Receive_DMA+0x144>)
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d4:	4a3d      	ldr	r2, [pc, #244]	; (80056cc <UART_Start_Receive_DMA+0x148>)
 80055d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055de:	2200      	movs	r2, #0
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3324      	adds	r3, #36	; 0x24
 80055ee:	4619      	mov	r1, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	461a      	mov	r2, r3
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	f7fc f9ba 	bl	8001970 <HAL_DMA_Start_IT>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2210      	movs	r2, #16
 8005606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e051      	b.n	80056ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d018      	beq.n	8005650 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005632:	657b      	str	r3, [r7, #84]	; 0x54
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563c:	64bb      	str	r3, [r7, #72]	; 0x48
 800563e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800564a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	653b      	str	r3, [r7, #80]	; 0x50
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005670:	637a      	str	r2, [r7, #52]	; 0x34
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	613b      	str	r3, [r7, #16]
   return(result);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800569a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a4:	623a      	str	r2, [r7, #32]
 80056a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	69f9      	ldr	r1, [r7, #28]
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3758      	adds	r7, #88	; 0x58
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	080058dd 	.word	0x080058dd
 80056c8:	08005a11 	.word	0x08005a11
 80056cc:	08005a57 	.word	0x08005a57

080056d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b08f      	sub	sp, #60	; 0x3c
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e6      	bne.n	80056d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3308      	adds	r3, #8
 8005710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	60bb      	str	r3, [r7, #8]
   return(result);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005720:	633b      	str	r3, [r7, #48]	; 0x30
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572a:	61ba      	str	r2, [r7, #24]
 800572c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	613b      	str	r3, [r7, #16]
   return(result);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e5      	bne.n	800570a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005746:	bf00      	nop
 8005748:	373c      	adds	r7, #60	; 0x3c
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b095      	sub	sp, #84	; 0x54
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800576e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005778:	643b      	str	r3, [r7, #64]	; 0x40
 800577a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800577e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e6      	bne.n	800575a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	61fb      	str	r3, [r7, #28]
   return(result);
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e3      	bne.n	800578c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d118      	bne.n	80057fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 0310 	bic.w	r3, r3, #16
 80057e0:	647b      	str	r3, [r7, #68]	; 0x44
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	613b      	str	r3, [r7, #16]
   return(result);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005812:	bf00      	nop
 8005814:	3754      	adds	r7, #84	; 0x54
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b090      	sub	sp, #64	; 0x40
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d137      	bne.n	80058aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	2200      	movs	r2, #0
 800583e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	623b      	str	r3, [r7, #32]
   return(result);
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
 800585a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005862:	633a      	str	r2, [r7, #48]	; 0x30
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e5      	bne.n	8005842 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	60fb      	str	r3, [r7, #12]
   return(result);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
 800588c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	69b9      	ldr	r1, [r7, #24]
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	617b      	str	r3, [r7, #20]
   return(result);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e6      	bne.n	8005876 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058a8:	e004      	b.n	80058b4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058b2:	4798      	blx	r3
}
 80058b4:	bf00      	nop
 80058b6:	3740      	adds	r7, #64	; 0x40
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b09c      	sub	sp, #112	; 0x70
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d171      	bne.n	80059dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005914:	66bb      	str	r3, [r7, #104]	; 0x68
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800591e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005920:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800592c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e6      	bne.n	8005900 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	667b      	str	r3, [r7, #100]	; 0x64
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3308      	adds	r3, #8
 8005950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005952:	647a      	str	r2, [r7, #68]	; 0x44
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	623b      	str	r3, [r7, #32]
   return(result);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	663b      	str	r3, [r7, #96]	; 0x60
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005986:	633a      	str	r2, [r7, #48]	; 0x30
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800598c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d118      	bne.n	80059dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	617b      	str	r3, [r7, #20]
   return(result);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059de:	2200      	movs	r2, #0
 80059e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d109      	bne.n	80059fe <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80059ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059f2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80059f6:	4611      	mov	r1, r2
 80059f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059fa:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059fc:	e004      	b.n	8005a08 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80059fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a06:	4798      	blx	r3
}
 8005a08:	bf00      	nop
 8005a0a:	3770      	adds	r7, #112	; 0x70
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10b      	bne.n	8005a44 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8005a38:	0852      	lsrs	r2, r2, #1
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a42:	e004      	b.n	8005a4e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	4798      	blx	r3
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b80      	cmp	r3, #128	; 0x80
 8005a80:	d109      	bne.n	8005a96 <UART_DMAError+0x40>
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b21      	cmp	r3, #33	; 0x21
 8005a86:	d106      	bne.n	8005a96 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005a90:	6978      	ldr	r0, [r7, #20]
 8005a92:	f7ff fe1d 	bl	80056d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d109      	bne.n	8005ab8 <UART_DMAError+0x62>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b22      	cmp	r3, #34	; 0x22
 8005aa8:	d106      	bne.n	8005ab8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	f7ff fe4d 	bl	8005752 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad2:	bf00      	nop
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6979      	ldr	r1, [r7, #20]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5c:	bf00      	nop
 8005b5e:	3720      	adds	r7, #32
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e027      	b.n	8005c06 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2224      	movs	r2, #36	; 0x24
 8005bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005be4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e02d      	b.n	8005c86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2224      	movs	r2, #36	; 0x24
 8005c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f850 	bl	8005d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e02d      	b.n	8005d02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2224      	movs	r2, #36	; 0x24
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f812 	bl	8005d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d2c:	e031      	b.n	8005d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d2e:	2308      	movs	r3, #8
 8005d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d32:	2308      	movs	r3, #8
 8005d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	0e5b      	lsrs	r3, r3, #25
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0f5b      	lsrs	r3, r3, #29
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	7b3a      	ldrb	r2, [r7, #12]
 8005d5a:	4911      	ldr	r1, [pc, #68]	; (8005da0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d5c:	5c8a      	ldrb	r2, [r1, r2]
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d62:	7b3a      	ldrb	r2, [r7, #12]
 8005d64:	490f      	ldr	r1, [pc, #60]	; (8005da4 <UARTEx_SetNbDataToProcess+0x98>)
 8005d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	7b7a      	ldrb	r2, [r7, #13]
 8005d78:	4909      	ldr	r1, [pc, #36]	; (8005da0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d7a:	5c8a      	ldrb	r2, [r1, r2]
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d80:	7b7a      	ldrb	r2, [r7, #13]
 8005d82:	4908      	ldr	r1, [pc, #32]	; (8005da4 <UARTEx_SetNbDataToProcess+0x98>)
 8005d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	08005e64 	.word	0x08005e64
 8005da4:	08005e6c 	.word	0x08005e6c

08005da8 <memset>:
 8005da8:	4402      	add	r2, r0
 8005daa:	4603      	mov	r3, r0
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d100      	bne.n	8005db2 <memset+0xa>
 8005db0:	4770      	bx	lr
 8005db2:	f803 1b01 	strb.w	r1, [r3], #1
 8005db6:	e7f9      	b.n	8005dac <memset+0x4>

08005db8 <__libc_init_array>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4d0d      	ldr	r5, [pc, #52]	; (8005df0 <__libc_init_array+0x38>)
 8005dbc:	4c0d      	ldr	r4, [pc, #52]	; (8005df4 <__libc_init_array+0x3c>)
 8005dbe:	1b64      	subs	r4, r4, r5
 8005dc0:	10a4      	asrs	r4, r4, #2
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	42a6      	cmp	r6, r4
 8005dc6:	d109      	bne.n	8005ddc <__libc_init_array+0x24>
 8005dc8:	4d0b      	ldr	r5, [pc, #44]	; (8005df8 <__libc_init_array+0x40>)
 8005dca:	4c0c      	ldr	r4, [pc, #48]	; (8005dfc <__libc_init_array+0x44>)
 8005dcc:	f000 f826 	bl	8005e1c <_init>
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	42a6      	cmp	r6, r4
 8005dd8:	d105      	bne.n	8005de6 <__libc_init_array+0x2e>
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de0:	4798      	blx	r3
 8005de2:	3601      	adds	r6, #1
 8005de4:	e7ee      	b.n	8005dc4 <__libc_init_array+0xc>
 8005de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dea:	4798      	blx	r3
 8005dec:	3601      	adds	r6, #1
 8005dee:	e7f2      	b.n	8005dd6 <__libc_init_array+0x1e>
 8005df0:	08005e7c 	.word	0x08005e7c
 8005df4:	08005e7c 	.word	0x08005e7c
 8005df8:	08005e7c 	.word	0x08005e7c
 8005dfc:	08005e80 	.word	0x08005e80

08005e00 <memcpy>:
 8005e00:	440a      	add	r2, r1
 8005e02:	4291      	cmp	r1, r2
 8005e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e08:	d100      	bne.n	8005e0c <memcpy+0xc>
 8005e0a:	4770      	bx	lr
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e16:	4291      	cmp	r1, r2
 8005e18:	d1f9      	bne.n	8005e0e <memcpy+0xe>
 8005e1a:	bd10      	pop	{r4, pc}

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
