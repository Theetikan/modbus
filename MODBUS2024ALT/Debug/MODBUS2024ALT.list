
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a10  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c30  08005c30  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08005c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000210  08005e44  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b0c  08005e44  00020b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154bd  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002872  00000000  00000000  0003573c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00037fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8b  00000000  00000000  000390f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263ba  00000000  00000000  00039e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145fc  00000000  00000000  0006023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc14b  00000000  00000000  00074839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000498c  00000000  00000000  00170984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00175310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005bd0 	.word	0x08005bd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	08005bd0 	.word	0x08005bd0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000022c 	.word	0x2000022c

08000554 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <modbus_3t5_Timeout+0x1c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2201      	movs	r2, #1
 8000562:	755a      	strb	r2, [r3, #21]

}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	2000022c 	.word	0x2000022c

08000574 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f004 f9c5 	bl	800490c <HAL_UART_GetError>
 8000582:	4603      	mov	r3, r0
 8000584:	2b20      	cmp	r3, #32
 8000586:	d101      	bne.n	800058c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000588:	f7ff ffc4 	bl	8000514 <modbus_1t5_Timeout>

	}
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800059e:	4a25      	ldr	r2, [pc, #148]	; (8000634 <Modbus_init+0xa0>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <Modbus_init+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <Modbus_init+0xa4>)
 80005b2:	210e      	movs	r1, #14
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f8dd 	bl	8003774 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2110      	movs	r1, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 f94d 	bl	8004860 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 f964 	bl	8004898 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <Modbus_init+0xa8>)
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fc2b 	bl	8003e34 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <Modbus_init+0xa0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <Modbus_init+0xa0>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <Modbus_init+0xa0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005f0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80005f4:	4413      	add	r3, r2
 80005f6:	3302      	adds	r3, #2
 80005f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005fc:	4619      	mov	r1, r3
 80005fe:	f003 fd53 	bl	80040a8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <Modbus_init+0xa0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b01      	cmp	r3, #1
 8000610:	d10c      	bne.n	800062c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fd5f 	bl	80030dc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <Modbus_init+0xa0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe38 	bl	800329c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000022c 	.word	0x2000022c
 8000638:	08000555 	.word	0x08000555
 800063c:	08000575 	.word	0x08000575

08000640 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800064c:	23ff      	movs	r3, #255	; 0xff
 800064e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	; 0xff
 8000652:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000654:	e013      	b.n	800067e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <CRC16+0x64>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4053      	eors	r3, r2
 8000672:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <CRC16+0x68>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800067e:	883b      	ldrh	r3, [r7, #0]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	803a      	strh	r2, [r7, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e6      	bne.n	8000656 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000100 	.word	0x20000100
 80006a8:	20000000 	.word	0x20000000

080006ac <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006b2:	4b7e      	ldr	r3, [pc, #504]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	7ddb      	ldrb	r3, [r3, #23]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d80a      	bhi.n	80006d4 <Modbus_Protocal_Worker+0x28>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <Modbus_Protocal_Worker+0x18>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006df 	.word	0x080006df
 80006c8:	08000873 	.word	0x08000873
 80006cc:	0800076b 	.word	0x0800076b
 80006d0:	080007af 	.word	0x080007af
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006d4:	4b75      	ldr	r3, [pc, #468]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2201      	movs	r2, #1
 80006da:	75da      	strb	r2, [r3, #23]
		break;
 80006dc:	e0e1      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006de:	4b73      	ldr	r3, [pc, #460]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006ea:	4b70      	ldr	r3, [pc, #448]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2202      	movs	r2, #2
 80006f0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006f2:	f000 f9d3 	bl	8000a9c <Modbus_Emission>
 80006f6:	e018      	b.n	800072a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006f8:	4b6c      	ldr	r3, [pc, #432]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000702:	4b6a      	ldr	r3, [pc, #424]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800070c:	b29b      	uxth	r3, r3
 800070e:	429a      	cmp	r2, r3
 8000710:	d00b      	beq.n	800072a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000712:	4b66      	ldr	r3, [pc, #408]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800071a:	4b64      	ldr	r3, [pc, #400]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2200      	movs	r2, #0
 8000720:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000722:	4b62      	ldr	r3, [pc, #392]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2203      	movs	r2, #3
 8000728:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800072a:	4b60      	ldr	r3, [pc, #384]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000734:	2b20      	cmp	r3, #32
 8000736:	f040 80ad 	bne.w	8000894 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800073a:	4b5c      	ldr	r3, [pc, #368]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000744:	4b59      	ldr	r3, [pc, #356]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800074a:	4b58      	ldr	r3, [pc, #352]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b57      	ldr	r3, [pc, #348]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000756:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800075a:	4413      	add	r3, r2
 800075c:	3302      	adds	r3, #2
 800075e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000762:	4619      	mov	r1, r3
 8000764:	f003 fca0 	bl	80040a8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8000768:	e094      	b.n	8000894 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7d1b      	ldrb	r3, [r3, #20]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	22fe      	movs	r2, #254	; 0xfe
 800077c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8000798:	4b44      	ldr	r3, [pc, #272]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800079c:	1a8a      	subs	r2, r1, r2
 800079e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80007a0:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2204      	movs	r2, #4
 80007aa:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007ac:	e074      	b.n	8000898 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007b6:	f113 0f02 	cmn.w	r3, #2
 80007ba:	d150      	bne.n	800085e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007bc:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2200      	movs	r2, #0
 80007c2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80007cc:	4b37      	ldr	r3, [pc, #220]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007d4:	3b02      	subs	r3, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff ff31 	bl	8000640 <CRC16>
 80007de:	4603      	mov	r3, r0
 80007e0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007e2:	793a      	ldrb	r2, [r7, #4]
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007e6:	6819      	ldr	r1, [r3, #0]
 80007e8:	4b30      	ldr	r3, [pc, #192]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007f0:	3b02      	subs	r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d10c      	bne.n	8000816 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007fc:	797a      	ldrb	r2, [r7, #5]
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800080a:	3b01      	subs	r3, #1
 800080c:	440b      	add	r3, r1
 800080e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000812:	429a      	cmp	r2, r3
 8000814:	d004      	beq.n	8000820 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	759a      	strb	r2, [r3, #22]
				break;
 800081e:	e040      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d113      	bne.n	800085a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8000842:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800084c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800084e:	461a      	mov	r2, r3
 8000850:	f005 f9b0 	bl	8005bb4 <memcpy>

			//execute command
			Modbus_frame_response();
 8000854:	f000 f90a 	bl	8000a6c <Modbus_frame_response>
 8000858:	e001      	b.n	800085e <Modbus_Protocal_Worker+0x1b2>
				break;
 800085a:	bf00      	nop
					}
		break;


	}
}
 800085c:	e021      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	7d5b      	ldrb	r3, [r3, #21]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d019      	beq.n	800089c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2201      	movs	r2, #1
 800086e:	75da      	strb	r2, [r3, #23]
		break;
 8000870:	e014      	b.n	800089c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087c:	2b20      	cmp	r3, #32
 800087e:	d10f      	bne.n	80008a0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2201      	movs	r2, #1
 8000890:	75da      	strb	r2, [r3, #23]
		break;
 8000892:	e005      	b.n	80008a0 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000894:	bf00      	nop
 8000896:	e004      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000898:	bf00      	nop
 800089a:	e002      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 800089c:	bf00      	nop
 800089e:	e000      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80008a0:	bf00      	nop
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000022c 	.word	0x2000022c

080008b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <modbusWrite1Register+0x80>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	7e5b      	ldrb	r3, [r3, #25]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <modbusWrite1Register+0x80>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7e9b      	ldrb	r3, [r3, #26]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <modbusWrite1Register+0x80>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d903      	bls.n	80008e2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 f8a4 	bl	8000a28 <ModbusErrorReply>
			 return;
 80008e0:	e023      	b.n	800092a <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <modbusWrite1Register+0x80>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <modbusWrite1Register+0x80>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6859      	ldr	r1, [r3, #4]
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	440b      	add	r3, r1
 80008f2:	7ed2      	ldrb	r2, [r2, #27]
 80008f4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <modbusWrite1Register+0x80>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <modbusWrite1Register+0x80>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6859      	ldr	r1, [r3, #4]
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	440b      	add	r3, r1
 8000906:	7f12      	ldrb	r2, [r2, #28]
 8000908:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <modbusWrite1Register+0x80>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			hModbus->Rxframe,
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <modbusWrite1Register+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000918:	2208      	movs	r2, #8
 800091a:	4619      	mov	r1, r3
 800091c:	f005 f94a 	bl	8005bb4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <modbusWrite1Register+0x80>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2205      	movs	r2, #5
 8000926:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270



}
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000022c 	.word	0x2000022c

08000934 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <modbusRead1Register+0xf0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	7edb      	ldrb	r3, [r3, #27]
 8000940:	b29b      	uxth	r3, r3
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <modbusRead1Register+0xf0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	7f1b      	ldrb	r3, [r3, #28]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <modbusRead1Register+0xf0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	7e5b      	ldrb	r3, [r3, #25]
 8000958:	b29b      	uxth	r3, r3
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <modbusRead1Register+0xf0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	7e9b      	ldrb	r3, [r3, #26]
 8000964:	b29b      	uxth	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <modbusRead1Register+0x42>
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	2b7d      	cmp	r3, #125	; 0x7d
 8000974:	d903      	bls.n	800097e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000976:	2003      	movs	r0, #3
 8000978:	f000 f856 	bl	8000a28 <ModbusErrorReply>
		 return;
 800097c:	e04e      	b.n	8000a1c <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800097e:	88ba      	ldrh	r2, [r7, #4]
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <modbusRead1Register+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	429a      	cmp	r2, r3
 8000988:	d808      	bhi.n	800099c <modbusRead1Register+0x68>
 800098a:	88ba      	ldrh	r2, [r7, #4]
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <modbusRead1Register+0xf0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	429a      	cmp	r2, r3
 800099a:	d903      	bls.n	80009a4 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800099c:	2002      	movs	r0, #2
 800099e:	f000 f843 	bl	8000a28 <ModbusErrorReply>
		 return;
 80009a2:	e03b      	b.n	8000a1c <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <modbusRead1Register+0xf0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2203      	movs	r2, #3
 80009aa:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <modbusRead1Register+0xf0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009be:	2400      	movs	r4, #0
 80009c0:	e020      	b.n	8000a04 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <modbusRead1Register+0xf0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4423      	add	r3, r4
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	18d1      	adds	r1, r2, r3
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <modbusRead1Register+0xf0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	1c63      	adds	r3, r4, #1
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	7849      	ldrb	r1, [r1, #1]
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <modbusRead1Register+0xf0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	4423      	add	r3, r4
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	18d1      	adds	r1, r2, r3
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <modbusRead1Register+0xf0>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	0063      	lsls	r3, r4, #1
 80009f6:	3303      	adds	r3, #3
 80009f8:	7809      	ldrb	r1, [r1, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8000a02:	3401      	adds	r4, #1
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	429c      	cmp	r4, r3
 8000a08:	dbdb      	blt.n	80009c2 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <modbusRead1Register+0xf0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	0052      	lsls	r2, r2, #1
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270

}
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000022c 	.word	0x2000022c

08000a28 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	7e1a      	ldrb	r2, [r3, #24]
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->TxCount = 2;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2202      	movs	r2, #2
 8000a56:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000022c 	.word	0x2000022c

08000a6c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <Modbus_frame_response+0x2c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	7e1b      	ldrb	r3, [r3, #24]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d004      	beq.n	8000a84 <Modbus_frame_response+0x18>
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d105      	bne.n	8000a8a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a7e:	f7ff ff17 	bl	80008b0 <modbusWrite1Register>
		break;
 8000a82:	e006      	b.n	8000a92 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a84:	f7ff ff56 	bl	8000934 <modbusRead1Register>
		break;
 8000a88:	e003      	b.n	8000a92 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff ffcc 	bl	8000a28 <ModbusErrorReply>
		break;
 8000a90:	bf00      	nop

	}
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000022c 	.word	0x2000022c

08000a9c <Modbus_Emission>:

void Modbus_Emission()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aac:	2b20      	cmp	r3, #32
 8000aae:	d15d      	bne.n	8000b6c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8000ac6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
				hModbus->TxCount
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
		memcpy
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f005 f86b 	bl	8005bb4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3203      	adds	r2, #3
 8000aee:	b292      	uxth	r2, r2
 8000af0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <Modbus_Emission+0xe8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <Modbus_Emission+0xe8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b04:	3b02      	subs	r3, #2
 8000b06:	4619      	mov	r1, r3
 8000b08:	4610      	mov	r0, r2
 8000b0a:	f7ff fd99 	bl	8000640 <CRC16>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b1e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b20:	7939      	ldrb	r1, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b36:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b38:	7979      	ldrb	r1, [r7, #5]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4c:	2b20      	cmp	r3, #32
 8000b4e:	d10d      	bne.n	8000b6c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b62:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b66:	461a      	mov	r2, r3
 8000b68:	f003 fa1e 	bl	8003fa8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	755a      	strb	r2, [r3, #21]

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000022c 	.word	0x2000022c

08000b88 <Heartbeat>:
float ShelvePosition_4 = 4;
float ShelvePosition_5 = 5;
int PickOder;
int PlaceOder;

void Heartbeat(){
 8000b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b8c:	af00      	add	r7, sp, #0
	static uint64_t timestamp = 0;
		 	  if(HAL_GetTick() >= timestamp)
 8000b8e:	f000 fc05 	bl	800139c <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2200      	movs	r2, #0
 8000b96:	461c      	mov	r4, r3
 8000b98:	4615      	mov	r5, r2
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <Heartbeat+0x44>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	4294      	cmp	r4, r2
 8000ba2:	eb75 0303 	sbcs.w	r3, r5, r3
 8000ba6:	d30d      	bcc.n	8000bc4 <Heartbeat+0x3c>
		 	  {
		 		  timestamp += 200;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <Heartbeat+0x44>)
 8000baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bae:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000bb2:	f143 0900 	adc.w	r9, r3, #0
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <Heartbeat+0x44>)
 8000bb8:	e9c3 8900 	strd	r8, r9, [r3]
				  //if (registerFrame[0].U16 == 18537) {
		 		 //registerFrame[0].U16 = 0x00;
		 		  registerFrame[0x00].U16 = 22881;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <Heartbeat+0x48>)
 8000bbe:	f645 1261 	movw	r2, #22881	; 0x5961
 8000bc2:	801a      	strh	r2, [r3, #0]
				  //}
		 	  }
}
 8000bc4:	bf00      	nop
 8000bc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000af8 	.word	0x20000af8
 8000bd0:	20000708 	.word	0x20000708

08000bd4 <Routine>:

void Routine(){
 8000bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bd8:	af00      	add	r7, sp, #0
	static uint64_t timestamp2 = 0;
	HeartFlag = 0;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <Routine+0x80>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() >= timestamp2) //ส่งค่าพวกนี้หลังจาก BaseSytem อ่าน Heartbeat ทุกๆ 200 ms
 8000be0:	f000 fbdc 	bl	800139c <HAL_GetTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2200      	movs	r2, #0
 8000be8:	461c      	mov	r4, r3
 8000bea:	4615      	mov	r5, r2
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <Routine+0x84>)
 8000bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf2:	4294      	cmp	r4, r2
 8000bf4:	eb75 0303 	sbcs.w	r3, r5, r3
 8000bf8:	d328      	bcc.n	8000c4c <Routine+0x78>
		{
		timestamp2 += 200;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <Routine+0x84>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000c04:	f143 0900 	adc.w	r9, r3, #0
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <Routine+0x84>)
 8000c0a:	e9c3 8900 	strd	r8, r9, [r3]
		if (registerFrame[0x00].U16 == 18537){
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <Routine+0x88>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	f644 0269 	movw	r2, #18537	; 0x4869
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d118      	bne.n	8000c4c <Routine+0x78>
			HeartFlag = 1 ; // ได้รับค่าจาก Heartbeat Protocal
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <Routine+0x80>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
		//BaseSytem Read
		registerFrame[0x04].U16 = 0000000000000000;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <Routine+0x88>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	811a      	strh	r2, [r3, #8]
		registerFrame[0x04].U16 = 0000000000000001;//Gripper Movement Actual Status 'Lead Switch 2 Status'
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <Routine+0x88>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = 0001; //Z-axis Moving Status = Set Shelve
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <Routine+0x88>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = 190; //Z-axis Actual Position = 19 ค่าจริง*10
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <Routine+0x88>)
 8000c34:	22be      	movs	r2, #190	; 0xbe
 8000c36:	845a      	strh	r2, [r3, #34]	; 0x22
		registerFrame[0x12].U16 = 200; //Z-axis Actual Speed = 20
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <Routine+0x88>)
 8000c3a:	22c8      	movs	r2, #200	; 0xc8
 8000c3c:	849a      	strh	r2, [r3, #36]	; 0x24
		registerFrame[0x13].U16 = 210; //Z-axis Acceleration = 21
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <Routine+0x88>)
 8000c40:	22d2      	movs	r2, #210	; 0xd2
 8000c42:	84da      	strh	r2, [r3, #38]	; 0x26
		registerFrame[0x40].U16 = 220; //X-axis Actual Position = 22
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <Routine+0x88>)
 8000c46:	22dc      	movs	r2, #220	; 0xdc
 8000c48:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}
}
}
 8000c4c:	bf00      	nop
 8000c4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c52:	bf00      	nop
 8000c54:	20000898 	.word	0x20000898
 8000c58:	20000b00 	.word	0x20000b00
 8000c5c:	20000708 	.word	0x20000708

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c64:	f000 fb35 	bl	80012d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c68:	f000 f828 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6c:	f000 f922 	bl	8000eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c70:	f000 f8ee 	bl	8000e50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c74:	f000 f89e 	bl	8000db4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000c78:	f000 f86c 	bl	8000d54 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <main+0x4c>)
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <main+0x50>)
 8000c80:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <main+0x4c>)
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <main+0x54>)
 8000c86:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <main+0x4c>)
 8000c8a:	2215      	movs	r2, #21
 8000c8c:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <main+0x4c>)
 8000c90:	22c8      	movs	r2, #200	; 0xc8
 8000c92:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000c94:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <main+0x58>)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <main+0x4c>)
 8000c98:	f7ff fc7c 	bl	8000594 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000c9c:	f7ff fd06 	bl	80006ac <Modbus_Protocal_Worker>
	  Heartbeat();
 8000ca0:	f7ff ff72 	bl	8000b88 <Heartbeat>
	  Routine();
 8000ca4:	f7ff ff96 	bl	8000bd4 <Routine>
	  Modbus_Protocal_Worker();
 8000ca8:	e7f8      	b.n	8000c9c <main+0x3c>
 8000caa:	bf00      	nop
 8000cac:	20000230 	.word	0x20000230
 8000cb0:	20000968 	.word	0x20000968
 8000cb4:	2000089c 	.word	0x2000089c
 8000cb8:	20000708 	.word	0x20000708

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	; 0x50
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	2238      	movs	r2, #56	; 0x38
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 ff46 	bl	8005b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f001 f968 	bl	8001fb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cfe:	2355      	movs	r3, #85	; 0x55
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fa02 	bl	800211c <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d1e:	f000 f937 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2303      	movs	r3, #3
 8000d28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fd00 	bl	8002740 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d46:	f000 f923 	bl	8000f90 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <MX_TIM16_Init+0x5c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d60:	22a9      	movs	r2, #169	; 0xa9
 8000d62:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d6c:	f240 4279 	movw	r2, #1145	; 0x479
 8000d70:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d86:	f002 f945 	bl	8003014 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d90:	f000 f8fe 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d94:	2108      	movs	r1, #8
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_TIM16_Init+0x58>)
 8000d98:	f002 fa18 	bl	80031cc <HAL_TIM_OnePulse_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000da2:	f000 f8f5 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000089c 	.word	0x2000089c
 8000db0:	40014400 	.word	0x40014400

08000db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_USART2_UART_Init+0x98>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dc0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dcc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000e02:	f002 ffb7 	bl	8003d74 <HAL_UART_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000e0c:	f000 f8c0 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000e14:	f004 fdd7 	bl	80059c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 f8b7 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000e26:	f004 fe0c 	bl	8005a42 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000e30:	f000 f8ae 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_USART2_UART_Init+0x94>)
 8000e36:	f004 fd8d 	bl	8005954 <HAL_UARTEx_DisableFifoMode>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000e40:	f000 f8a6 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000968 	.word	0x20000968
 8000e4c:	40004400 	.word	0x40004400

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_DMA_Init+0x60>)
 8000e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <MX_DMA_Init+0x60>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6493      	str	r3, [r2, #72]	; 0x48
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_DMA_Init+0x60>)
 8000e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_DMA_Init+0x60>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <MX_DMA_Init+0x60>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6493      	str	r3, [r2, #72]	; 0x48
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <MX_DMA_Init+0x60>)
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f000 fb6d 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e90:	200b      	movs	r0, #11
 8000e92:	f000 fb84 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200c      	movs	r0, #12
 8000e9c:	f000 fb65 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ea0:	200c      	movs	r0, #12
 8000ea2:	f000 fb7c 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000ee8:	f043 0320 	orr.w	r3, r3, #32
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0320 	and.w	r3, r3, #32
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_GPIO_Init+0xd4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f001 f803 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <MX_GPIO_Init+0xd8>)
 8000f4e:	f000 fe73 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f52:	2320      	movs	r3, #32
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f000 fe64 	bl	8001c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2028      	movs	r0, #40	; 0x28
 8000f76:	f000 faf8 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f7a:	2028      	movs	r0, #40	; 0x28
 8000f7c:	f000 fb0f 	bl	800159e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000800 	.word	0x48000800

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6613      	str	r3, [r2, #96]	; 0x60
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fd2:	f001 f893 	bl	80020fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_TIM_Base_MspInit+0x44>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d113      	bne.n	800101e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_TIM_Base_MspInit+0x48>)
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0x48>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2019      	movs	r0, #25
 8001014:	f000 faa9 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001018:	2019      	movs	r0, #25
 800101a:	f000 fac0 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40014400 	.word	0x40014400
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b09e      	sub	sp, #120	; 0x78
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2254      	movs	r2, #84	; 0x54
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f004 fd83 	bl	8005b5c <memset>
  if(huart->Instance==USART2)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <HAL_UART_MspInit+0x160>)
 800105c:	4293      	cmp	r3, r2
 800105e:	f040 8092 	bne.w	8001186 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001062:	2302      	movs	r3, #2
 8001064:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fd82 	bl	8002b78 <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800107a:	f7ff ff89 	bl	8000f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HAL_UART_MspInit+0x164>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a44      	ldr	r2, [pc, #272]	; (8001194 <HAL_UART_MspInit+0x164>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <HAL_UART_MspInit+0x164>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <HAL_UART_MspInit+0x164>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a3e      	ldr	r2, [pc, #248]	; (8001194 <HAL_UART_MspInit+0x164>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <HAL_UART_MspInit+0x164>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ae:	230c      	movs	r3, #12
 80010b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010be:	2307      	movs	r3, #7
 80010c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f000 fdb4 	bl	8001c38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_UART_MspInit+0x16c>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010d8:	221b      	movs	r2, #27
 80010da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010de:	2210      	movs	r2, #16
 80010e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_UART_MspInit+0x168>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_UART_MspInit+0x168>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <HAL_UART_MspInit+0x168>)
 8001108:	f000 fa64 	bl	80015d4 <HAL_DMA_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001112:	f7ff ff3d 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <HAL_UART_MspInit+0x168>)
 800111a:	67da      	str	r2, [r3, #124]	; 0x7c
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_UART_MspInit+0x168>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_UART_MspInit+0x170>)
 8001124:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_UART_MspInit+0x174>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_UART_MspInit+0x170>)
 800112a:	221a      	movs	r2, #26
 800112c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_UART_MspInit+0x170>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_UART_MspInit+0x170>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_UART_MspInit+0x170>)
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x170>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_UART_MspInit+0x170>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_UART_MspInit+0x170>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_UART_MspInit+0x170>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <HAL_UART_MspInit+0x170>)
 800115a:	f000 fa3b 	bl	80015d4 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001164:	f7ff ff14 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_UART_MspInit+0x170>)
 800116c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_UART_MspInit+0x170>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2026      	movs	r0, #38	; 0x26
 800117c:	f000 f9f5 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001180:	2026      	movs	r0, #38	; 0x26
 8001182:	f000 fa0c 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3778      	adds	r7, #120	; 0x78
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40004400 	.word	0x40004400
 8001194:	40021000 	.word	0x40021000
 8001198:	20000a34 	.word	0x20000a34
 800119c:	40020008 	.word	0x40020008
 80011a0:	20000a94 	.word	0x20000a94
 80011a4:	4002001c 	.word	0x4002001c

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 f8c0 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DMA1_Channel1_IRQHandler+0x10>)
 8001202:	f000 fbca 	bl	800199a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000a34 	.word	0x20000a34

08001210 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Channel2_IRQHandler+0x10>)
 8001216:	f000 fbc0 	bl	800199a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000a94 	.word	0x20000a94

08001224 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800122a:	f002 f8c5 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000089c 	.word	0x2000089c

08001238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART2_IRQHandler+0x10>)
 800123e:	f002 ff7f 	bl	8004140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000968 	.word	0x20000968

0800124c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001250:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001254:	f000 fe8a 	bl	8001f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001282:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001284:	f7ff ffea 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <LoopForever+0x6>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <LoopForever+0xe>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <LoopForever+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f004 fc5d 	bl	8005b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b2:	f7ff fcd5 	bl	8000c60 <main>

080012b6 <LoopForever>:

LoopForever:
    b LoopForever
 80012b6:	e7fe      	b.n	80012b6 <LoopForever>
  ldr   r0, =_estack
 80012b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80012c4:	08005c38 	.word	0x08005c38
  ldr r2, =_sbss
 80012c8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80012cc:	20000b0c 	.word	0x20000b0c

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>

080012d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f939 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f80e 	bl	8001304 <HAL_InitTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e001      	b.n	80012f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f4:	f7ff fe52 	bl	8000f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f8:	79fb      	ldrb	r3, [r7, #7]

}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_InitTick+0x68>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d022      	beq.n	800135e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_InitTick+0x6c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_InitTick+0x68>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001324:	fbb1 f3f3 	udiv	r3, r1, r3
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f944 	bl	80015ba <HAL_SYSTICK_Config>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d809      	bhi.n	8001352 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133e:	2200      	movs	r2, #0
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	f04f 30ff 	mov.w	r0, #4294967295
 8001346:	f000 f910 	bl	800156a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_InitTick+0x70>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	e007      	b.n	8001362 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e004      	b.n	8001362 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e001      	b.n	8001362 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000208 	.word	0x20000208
 8001370:	20000200 	.word	0x20000200
 8001374:	20000204 	.word	0x20000204

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4413      	add	r3, r2
 8001386:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x1c>)
 8001388:	6013      	str	r3, [r2, #0]
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000b08 	.word	0x20000b08
 8001398:	20000208 	.word	0x20000208

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000b08 	.word	0x20000b08

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff29 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff40 	bl	80013fc <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff90 	bl	80014a8 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5f 	bl	8001454 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff33 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa4 	bl	8001510 <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e08d      	b.n	8001702 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_DMA_Init+0x138>)
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d80f      	bhi.n	8001612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <HAL_DMA_Init+0x13c>)
 80015fa:	4413      	add	r3, r2
 80015fc:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_DMA_Init+0x140>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	009a      	lsls	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a42      	ldr	r2, [pc, #264]	; (8001718 <HAL_DMA_Init+0x144>)
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
 8001610:	e00e      	b.n	8001630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b40      	ldr	r3, [pc, #256]	; (800171c <HAL_DMA_Init+0x148>)
 800161a:	4413      	add	r3, r2
 800161c:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <HAL_DMA_Init+0x140>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	009a      	lsls	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a3c      	ldr	r2, [pc, #240]	; (8001720 <HAL_DMA_Init+0x14c>)
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fa76 	bl	8001b74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001690:	d102      	bne.n	8001698 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_DMA_Init+0x104>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d80c      	bhi.n	80016d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fa96 	bl	8001bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	e008      	b.n	80016ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020407 	.word	0x40020407
 8001710:	bffdfff8 	.word	0xbffdfff8
 8001714:	cccccccd 	.word	0xcccccccd
 8001718:	40020000 	.word	0x40020000
 800171c:	bffdfbf8 	.word	0xbffdfbf8
 8001720:	40020400 	.word	0x40020400

08001724 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_DMA_Start_IT+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e066      	b.n	8001812 <HAL_DMA_Start_IT+0xee>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d155      	bne.n	8001804 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f9bb 	bl	8001af8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 020e 	orr.w	r2, r2, #14
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00f      	b.n	80017bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 020a 	orr.w	r2, r2, #10
 80017ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e005      	b.n	8001810 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001810:	7dfb      	ldrb	r3, [r7, #23]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d005      	beq.n	800183e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2204      	movs	r2, #4
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	e037      	b.n	80018ae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 020e 	bic.w	r2, r2, #14
 800184c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800185c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800188a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00c      	beq.n	80018ae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018ac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d00d      	beq.n	8001900 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2204      	movs	r2, #4
 80018e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	e047      	b.n	8001990 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020e 	bic.w	r2, r2, #14
 800190e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800192e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800194c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800196e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
    }
  }
  return status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2204      	movs	r2, #4
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d026      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x7a>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d021      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d107      	bne.n	80019ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0204 	bic.w	r2, r2, #4
 80019ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f003 021f 	and.w	r2, r3, #31
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2104      	movs	r1, #4
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d071      	beq.n	8001aee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a12:	e06c      	b.n	8001aee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d02e      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d029      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10b      	bne.n	8001a58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 020a 	bic.w	r2, r2, #10
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2102      	movs	r1, #2
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d038      	beq.n	8001aee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a84:	e033      	b.n	8001aee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2208      	movs	r2, #8
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d02a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d025      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 020e 	bic.w	r2, r2, #14
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
}
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f003 021f 	and.w	r2, r3, #31
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d108      	bne.n	8001b58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b56:	e007      	b.n	8001b68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d802      	bhi.n	8001b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e001      	b.n	8001b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b08      	subs	r3, #8
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	009a      	lsls	r2, r3, #2
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40020407 	.word	0x40020407
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020820 	.word	0x40020820
 8001be8:	cccccccd 	.word	0xcccccccd
 8001bec:	40020880 	.word	0x40020880

08001bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	1000823f 	.word	0x1000823f
 8001c34:	40020940 	.word	0x40020940

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c46:	e15a      	b.n	8001efe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 814c 	beq.w	8001ef8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d130      	bne.n	8001cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0201 	and.w	r2, r3, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d017      	beq.n	8001d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d123      	bne.n	8001d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	6939      	ldr	r1, [r7, #16]
 8001d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0203 	and.w	r2, r3, #3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a6 	beq.w	8001ef8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dac:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db0:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6613      	str	r3, [r2, #96]	; 0x60
 8001db8:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc4:	4a56      	ldr	r2, [pc, #344]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dee:	d01f      	beq.n	8001e30 <HAL_GPIO_Init+0x1f8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d019      	beq.n	8001e2c <HAL_GPIO_Init+0x1f4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_GPIO_Init+0x1f0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00d      	beq.n	8001e24 <HAL_GPIO_Init+0x1ec>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a49      	ldr	r2, [pc, #292]	; (8001f30 <HAL_GPIO_Init+0x2f8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x1e8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_GPIO_Init+0x1e4>
 8001e18:	2305      	movs	r3, #5
 8001e1a:	e00a      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	e008      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e30:	2300      	movs	r3, #0
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e42:	4937      	ldr	r1, [pc, #220]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e50:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e74:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e9e:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef2:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f47f ae9d 	bne.w	8001c48 <HAL_GPIO_Init+0x10>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	48000400 	.word	0x48000400
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	48000c00 	.word	0x48000c00
 8001f30:	48001000 	.word	0x48001000
 8001f34:	48001400 	.word	0x48001400
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f806 	bl	8001f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d141      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fc2:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fce:	d131      	bne.n	8002034 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd0:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd6:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe8:	4a41      	ldr	r2, [pc, #260]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2232      	movs	r2, #50	; 0x32
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	; (80020f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0c9b      	lsrs	r3, r3, #18
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002006:	e002      	b.n	800200e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3b01      	subs	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201a:	d102      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f2      	bne.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002022:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202e:	d158      	bne.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e057      	b.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800203a:	4a2d      	ldr	r2, [pc, #180]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002040:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002044:	e04d      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800204c:	d141      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d131      	bne.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002062:	4a23      	ldr	r2, [pc, #140]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800206c:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002074:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2232      	movs	r2, #50	; 0x32
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	0c9b      	lsrs	r3, r3, #18
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002092:	e002      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b01      	subs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a6:	d102      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f2      	bne.n	8002094 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ba:	d112      	bne.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e011      	b.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020d0:	e007      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40007000 	.word	0x40007000
 80020f4:	20000200 	.word	0x20000200
 80020f8:	431bde83 	.word	0x431bde83

080020fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210a:	6093      	str	r3, [r2, #8]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40007000 	.word	0x40007000

0800211c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e2fe      	b.n	800272c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d075      	beq.n	8002226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	4b97      	ldr	r3, [pc, #604]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002144:	4b94      	ldr	r3, [pc, #592]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d102      	bne.n	800215a <HAL_RCC_OscConfig+0x3e>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d002      	beq.n	8002160 <HAL_RCC_OscConfig+0x44>
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d10b      	bne.n	8002178 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d05b      	beq.n	8002224 <HAL_RCC_OscConfig+0x108>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d157      	bne.n	8002224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e2d9      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d106      	bne.n	8002190 <HAL_RCC_OscConfig+0x74>
 8002182:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a84      	ldr	r2, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xb0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7b      	ldr	r2, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xb0>
 80021b4:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b75      	ldr	r3, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a74      	ldr	r2, [pc, #464]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff f8e2 	bl	800139c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff f8de 	bl	800139c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e29e      	b.n	800272c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ee:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xc0>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff f8ce 	bl	800139c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff f8ca 	bl	800139c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e28a      	b.n	800272c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0xe8>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d075      	beq.n	800231e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002232:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	4b56      	ldr	r3, [pc, #344]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d102      	bne.n	8002252 <HAL_RCC_OscConfig+0x136>
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d002      	beq.n	8002258 <HAL_RCC_OscConfig+0x13c>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d11f      	bne.n	8002298 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002258:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_OscConfig+0x154>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e25d      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	061b      	lsls	r3, r3, #24
 800227e:	4946      	ldr	r1, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002284:	4b45      	ldr	r3, [pc, #276]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f83b 	bl	8001304 <HAL_InitTick>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d043      	beq.n	800231c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e249      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d023      	beq.n	80022e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3c      	ldr	r2, [pc, #240]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f876 	bl	800139c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff f872 	bl	800139c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e232      	b.n	800272c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c6:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	492d      	ldr	r1, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	e01a      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff f852 	bl	800139c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fc:	f7ff f84e 	bl	800139c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e20e      	b.n	800272c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1e0>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d041      	beq.n	80023ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01c      	beq.n	800236c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7ff f82b 	bl	800139c <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234a:	f7ff f827 	bl	800139c <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1e7      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0ef      	beq.n	800234a <HAL_RCC_OscConfig+0x22e>
 800236a:	e020      	b.n	80023ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff f80e 	bl	800139c <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002382:	e00d      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff f80a 	bl	800139c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d906      	bls.n	80023a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1ca      	b.n	800272c <HAL_RCC_OscConfig+0x610>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a0:	4b8c      	ldr	r3, [pc, #560]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ea      	bne.n	8002384 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80a6 	beq.w	8002508 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c0:	4b84      	ldr	r3, [pc, #528]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_OscConfig+0x2b4>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x2b6>
 80023d0:	2300      	movs	r3, #0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00d      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b7f      	ldr	r3, [pc, #508]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a7e      	ldr	r2, [pc, #504]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
 80023e2:	4b7c      	ldr	r3, [pc, #496]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ee:	2301      	movs	r3, #1
 80023f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f2:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <HAL_RCC_OscConfig+0x4bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_RCC_OscConfig+0x4bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a75      	ldr	r2, [pc, #468]	; (80025d8 <HAL_RCC_OscConfig+0x4bc>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7fe ffc7 	bl	800139c <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe ffc3 	bl	800139c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e183      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002424:	4b6c      	ldr	r3, [pc, #432]	; (80025d8 <HAL_RCC_OscConfig+0x4bc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <HAL_RCC_OscConfig+0x32e>
 8002438:	4b66      	ldr	r3, [pc, #408]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a65      	ldr	r2, [pc, #404]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002448:	e024      	b.n	8002494 <HAL_RCC_OscConfig+0x378>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d110      	bne.n	8002474 <HAL_RCC_OscConfig+0x358>
 8002452:	4b60      	ldr	r3, [pc, #384]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	4a5e      	ldr	r2, [pc, #376]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002462:	4b5c      	ldr	r3, [pc, #368]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	4a5a      	ldr	r2, [pc, #360]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002472:	e00f      	b.n	8002494 <HAL_RCC_OscConfig+0x378>
 8002474:	4b57      	ldr	r3, [pc, #348]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a56      	ldr	r2, [pc, #344]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe ff7e 	bl	800139c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe ff7a 	bl	800139c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e138      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ba:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ed      	beq.n	80024a4 <HAL_RCC_OscConfig+0x388>
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7fe ff67 	bl	800139c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe ff63 	bl	800139c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e121      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ed      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	4a34      	ldr	r2, [pc, #208]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d03c      	beq.n	800258e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01c      	beq.n	8002556 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002522:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe ff36 	bl	800139c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002534:	f7fe ff32 	bl	800139c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0f2      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <HAL_RCC_OscConfig+0x418>
 8002554:	e01b      	b.n	800258e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7fe ff19 	bl	800139c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256e:	f7fe ff15 	bl	800139c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0d5      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 8002582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ef      	bne.n	800256e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80c9 	beq.w	800272a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	f000 8083 	beq.w	80026ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d15e      	bne.n	800266c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe feef 	bl	800139c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	e00c      	b.n	80025dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe feeb 	bl	800139c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d905      	bls.n	80025dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0ab      	b.n	800272c <HAL_RCC_OscConfig+0x610>
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025dc:	4b55      	ldr	r3, [pc, #340]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ec      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4b52      	ldr	r3, [pc, #328]	; (8002738 <HAL_RCC_OscConfig+0x61c>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6a11      	ldr	r1, [r2, #32]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002602:	0212      	lsls	r2, r2, #8
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0552      	lsls	r2, r2, #21
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002616:	0852      	lsrs	r2, r2, #1
 8002618:	3a01      	subs	r2, #1
 800261a:	0652      	lsls	r2, r2, #25
 800261c:	4311      	orrs	r1, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002622:	06d2      	lsls	r2, r2, #27
 8002624:	430a      	orrs	r2, r1
 8002626:	4943      	ldr	r1, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 8002628:	4313      	orrs	r3, r2
 800262a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a40      	ldr	r2, [pc, #256]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002638:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a3d      	ldr	r2, [pc, #244]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 800263e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002642:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe feaa 	bl	800139c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe fea6 	bl	800139c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e066      	b.n	800272c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x530>
 800266a:	e05e      	b.n	800272a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a30      	ldr	r2, [pc, #192]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 8002672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fe90 	bl	800139c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fe8c 	bl	800139c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e04c      	b.n	800272c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	4924      	ldr	r1, [pc, #144]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_RCC_OscConfig+0x620>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	60cb      	str	r3, [r1, #12]
 80026aa:	e03e      	b.n	800272a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e039      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_RCC_OscConfig+0x618>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d12c      	bne.n	8002726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	3b01      	subs	r3, #1
 80026d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d123      	bne.n	8002726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11b      	bne.n	8002726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d113      	bne.n	8002726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	3b01      	subs	r3, #1
 800270c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d109      	bne.n	8002726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	019f800c 	.word	0x019f800c
 800273c:	feeefffc 	.word	0xfeeefffc

08002740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e11e      	b.n	8002996 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b91      	ldr	r3, [pc, #580]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d910      	bls.n	8002788 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b8e      	ldr	r3, [pc, #568]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	498c      	ldr	r1, [pc, #560]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b8a      	ldr	r3, [pc, #552]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e106      	b.n	8002996 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d073      	beq.n	800287c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d129      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279c:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0f4      	b.n	8002996 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027ac:	f000 f99e 	bl	8002aec <RCC_GetSysClockFreqFromPLLSource>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4a7c      	ldr	r2, [pc, #496]	; (80029a8 <HAL_RCC_ClockConfig+0x268>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d93f      	bls.n	800283a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ba:	4b7a      	ldr	r3, [pc, #488]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d033      	beq.n	800283a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d12f      	bne.n	800283a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027da:	4b72      	ldr	r3, [pc, #456]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e2:	4a70      	ldr	r2, [pc, #448]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e024      	b.n	800283a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f8:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0c6      	b.n	8002996 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0be      	b.n	8002996 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002818:	f000 f8ce 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 800281c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4a61      	ldr	r2, [pc, #388]	; (80029a8 <HAL_RCC_ClockConfig+0x268>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d909      	bls.n	800283a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282e:	4a5d      	ldr	r2, [pc, #372]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002834:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800283a:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4957      	ldr	r1, [pc, #348]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284c:	f7fe fda6 	bl	800139c <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7fe fda2 	bl	800139c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e095      	b.n	8002996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 020c 	and.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1eb      	bne.n	8002854 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002894:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a42      	ldr	r2, [pc, #264]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 800289a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800289e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028b4:	4a3b      	ldr	r2, [pc, #236]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80028b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4936      	ldr	r1, [pc, #216]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b80      	cmp	r3, #128	; 0x80
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028d6:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a32      	ldr	r2, [pc, #200]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d21d      	bcs.n	800292c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 020f 	bic.w	r2, r3, #15
 80028f8:	4929      	ldr	r1, [pc, #164]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002900:	f7fe fd4c 	bl	800139c <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe fd48 	bl	800139c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e03b      	b.n	8002996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCC_ClockConfig+0x260>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d1ed      	bne.n	8002908 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4917      	ldr	r1, [pc, #92]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490f      	ldr	r1, [pc, #60]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800296a:	f000 f825 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_RCC_ClockConfig+0x264>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <HAL_RCC_ClockConfig+0x26c>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x270>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_RCC_ClockConfig+0x274>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fcb8 	bl	8001304 <HAL_InitTick>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	04c4b400 	.word	0x04c4b400
 80029ac:	08005be8 	.word	0x08005be8
 80029b0:	20000200 	.word	0x20000200
 80029b4:	20000204 	.word	0x20000204

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	e047      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d102      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	e03e      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d136      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3301      	adds	r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a16:	68d2      	ldr	r2, [r2, #12]
 8002a18:	0a12      	lsrs	r2, r2, #8
 8002a1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	617b      	str	r3, [r7, #20]
      break;
 8002a24:	e00c      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	0a12      	lsrs	r2, r2, #8
 8002a34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
      break;
 8002a3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0e5b      	lsrs	r3, r3, #25
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	e001      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a60:	693b      	ldr	r3, [r7, #16]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	00f42400 	.word	0x00f42400
 8002a78:	016e3600 	.word	0x016e3600

08002a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000200 	.word	0x20000200

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a98:	f7ff fff0 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4904      	ldr	r1, [pc, #16]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08005bf8 	.word	0x08005bf8

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ac4:	f7ff ffda 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0adb      	lsrs	r3, r3, #11
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4904      	ldr	r1, [pc, #16]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08005bf8 	.word	0x08005bf8

08002aec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3301      	adds	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d10c      	bne.n	8002b2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b1a:	68d2      	ldr	r2, [r2, #12]
 8002b1c:	0a12      	lsrs	r2, r2, #8
 8002b1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
    break;
 8002b28:	e00c      	b.n	8002b44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	0a12      	lsrs	r2, r2, #8
 8002b38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
    break;
 8002b42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0e5b      	lsrs	r3, r3, #25
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b5e:	687b      	ldr	r3, [r7, #4]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	016e3600 	.word	0x016e3600
 8002b74:	00f42400 	.word	0x00f42400

08002b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b80:	2300      	movs	r3, #0
 8002b82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b84:	2300      	movs	r3, #0
 8002b86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8098 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9a:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	4a3f      	ldr	r2, [pc, #252]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc2:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a39      	ldr	r2, [pc, #228]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bce:	f7fe fbe5 	bl	800139c <HAL_GetTick>
 8002bd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd4:	e009      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7fe fbe1 	bl	800139c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d902      	bls.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	74fb      	strb	r3, [r7, #19]
        break;
 8002be8:	e005      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bea:	4b30      	ldr	r3, [pc, #192]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ef      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d159      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01e      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d019      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c24:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fba1 	bl	800139c <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe fb9d 	bl	800139c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d902      	bls.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	74fb      	strb	r3, [r7, #19]
            break;
 8002c74:	e006      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ec      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10b      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ca2:	7cfb      	ldrb	r3, [r7, #19]
 8002ca4:	74bb      	strb	r3, [r7, #18]
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb4:	7c7b      	ldrb	r3, [r7, #17]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4ba7      	ldr	r3, [pc, #668]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	4aa6      	ldr	r2, [pc, #664]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd2:	4ba1      	ldr	r3, [pc, #644]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f023 0203 	bic.w	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	499d      	ldr	r1, [pc, #628]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cf4:	4b98      	ldr	r3, [pc, #608]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 020c 	bic.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4995      	ldr	r1, [pc, #596]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d16:	4b90      	ldr	r3, [pc, #576]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	498c      	ldr	r1, [pc, #560]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d38:	4b87      	ldr	r3, [pc, #540]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	4984      	ldr	r1, [pc, #528]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d5a:	4b7f      	ldr	r3, [pc, #508]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	497b      	ldr	r1, [pc, #492]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d7c:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4973      	ldr	r1, [pc, #460]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d9e:	4b6e      	ldr	r3, [pc, #440]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	496a      	ldr	r1, [pc, #424]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dc0:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4962      	ldr	r1, [pc, #392]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4959      	ldr	r1, [pc, #356]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e04:	4b54      	ldr	r3, [pc, #336]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	4951      	ldr	r1, [pc, #324]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	4948      	ldr	r1, [pc, #288]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d015      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e48:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4940      	ldr	r1, [pc, #256]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e66:	d105      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e68:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d015      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e80:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	4932      	ldr	r1, [pc, #200]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9e:	d105      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eaa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	4924      	ldr	r1, [pc, #144]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed6:	d105      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a1e      	ldr	r2, [pc, #120]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	4916      	ldr	r1, [pc, #88]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d019      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4908      	ldr	r1, [pc, #32]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f46:	d109      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a02      	ldr	r2, [pc, #8]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f52:	60d3      	str	r3, [r2, #12]
 8002f54:	e002      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d015      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4926      	ldr	r1, [pc, #152]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f86:	d105      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	4918      	ldr	r1, [pc, #96]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	490a      	ldr	r1, [pc, #40]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff6:	d105      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003002:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003004:	7cbb      	ldrb	r3, [r7, #18]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e054      	b.n	80030d0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d111      	bne.n	8003056 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fdd4 	bl	8003be8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <HAL_TIM_Base_Init+0xc4>)
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f000 fce3 	bl	8003a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	08000fe5 	.word	0x08000fe5

080030dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d001      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e054      	b.n	800319e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <HAL_TIM_Base_Start_IT+0xd0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d022      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311e:	d01d      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d018      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_TIM_Base_Start_IT+0xe0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d115      	bne.n	8003188 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_TIM_Base_Start_IT+0xec>)
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d015      	beq.n	800319a <HAL_TIM_Base_Start_IT+0xbe>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d011      	beq.n	800319a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	e008      	b.n	800319a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e000      	b.n	800319c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40013400 	.word	0x40013400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40015000 	.word	0x40015000
 80031c8:	00010007 	.word	0x00010007

080031cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e04c      	b.n	800327a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fcf7 	bl	8003be8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_TIM_OnePulse_Init+0xb8>)
 8003206:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f000 fc06 	bl	8003a34 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0208 	bic.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	08003289 	.word	0x08003289

08003288 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d108      	bne.n	80032de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032cc:	7bbb      	ldrb	r3, [r7, #14]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d2:	7b7b      	ldrb	r3, [r7, #13]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d102      	bne.n	80032de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032d8:	7b3b      	ldrb	r3, [r7, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e059      	b.n	8003396 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0202 	orr.w	r2, r2, #2
 8003310:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0204 	orr.w	r2, r2, #4
 8003320:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fc36 	bl	8003b9c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	2104      	movs	r1, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fc2f 	bl	8003b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d018      	beq.n	800337a <HAL_TIM_OnePulse_Start_IT+0xde>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_TIM_OnePulse_Start_IT+0xde>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_TIM_OnePulse_Start_IT+0xde>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a12      	ldr	r2, [pc, #72]	; (80033ac <HAL_TIM_OnePulse_Start_IT+0x110>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_TIM_OnePulse_Start_IT+0xde>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_TIM_OnePulse_Start_IT+0xde>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800337e:	2300      	movs	r3, #0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40013400 	.word	0x40013400
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40014400 	.word	0x40014400
 80033b0:	40014800 	.word	0x40014800
 80033b4:	40015000 	.word	0x40015000

080033b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d026      	beq.n	8003428 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d021      	beq.n	8003428 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0202 	mvn.w	r2, #2
 80033ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
 800340c:	e009      	b.n	8003422 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d026      	beq.n	8003480 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0204 	mvn.w	r2, #4
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
 8003464:	e009      	b.n	800347a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d026      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d021      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0208 	mvn.w	r2, #8
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2204      	movs	r2, #4
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
 80034bc:	e009      	b.n	80034d2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d026      	beq.n	8003530 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d021      	beq.n	8003530 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0210 	mvn.w	r2, #16
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2208      	movs	r2, #8
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e009      	b.n	800352a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0201 	mvn.w	r2, #1
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f06f 0220 	mvn.w	r2, #32
 80035f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800361e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800366e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	460b      	mov	r3, r1
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e14a      	b.n	8003a26 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 80dd 	bne.w	8003958 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	2b1f      	cmp	r3, #31
 80037a2:	f200 80d6 	bhi.w	8003952 <HAL_TIM_RegisterCallback+0x1de>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_TIM_RegisterCallback+0x38>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	0800382d 	.word	0x0800382d
 80037b0:	08003835 	.word	0x08003835
 80037b4:	0800383d 	.word	0x0800383d
 80037b8:	08003845 	.word	0x08003845
 80037bc:	0800384d 	.word	0x0800384d
 80037c0:	08003855 	.word	0x08003855
 80037c4:	0800385d 	.word	0x0800385d
 80037c8:	08003865 	.word	0x08003865
 80037cc:	0800386d 	.word	0x0800386d
 80037d0:	08003875 	.word	0x08003875
 80037d4:	0800387d 	.word	0x0800387d
 80037d8:	08003885 	.word	0x08003885
 80037dc:	0800388d 	.word	0x0800388d
 80037e0:	08003895 	.word	0x08003895
 80037e4:	0800389f 	.word	0x0800389f
 80037e8:	080038a9 	.word	0x080038a9
 80037ec:	080038b3 	.word	0x080038b3
 80037f0:	080038bd 	.word	0x080038bd
 80037f4:	080038c7 	.word	0x080038c7
 80037f8:	080038d1 	.word	0x080038d1
 80037fc:	080038db 	.word	0x080038db
 8003800:	080038e5 	.word	0x080038e5
 8003804:	080038ef 	.word	0x080038ef
 8003808:	080038f9 	.word	0x080038f9
 800380c:	08003903 	.word	0x08003903
 8003810:	0800390d 	.word	0x0800390d
 8003814:	08003917 	.word	0x08003917
 8003818:	08003921 	.word	0x08003921
 800381c:	0800392b 	.word	0x0800392b
 8003820:	08003935 	.word	0x08003935
 8003824:	0800393f 	.word	0x0800393f
 8003828:	08003949 	.word	0x08003949
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003832:	e0f7      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800383a:	e0f3      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003842:	e0ef      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800384a:	e0eb      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003852:	e0e7      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800385a:	e0e3      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003862:	e0df      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800386a:	e0db      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003872:	e0d7      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800387a:	e0d3      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003882:	e0cf      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800388a:	e0cb      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003892:	e0c7      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800389c:	e0c2      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80038a6:	e0bd      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80038b0:	e0b8      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80038ba:	e0b3      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80038c4:	e0ae      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80038ce:	e0a9      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80038d8:	e0a4      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80038e2:	e09f      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80038ec:	e09a      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80038f6:	e095      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003900:	e090      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800390a:	e08b      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003914:	e086      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800391e:	e081      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003928:	e07c      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8003932:	e077      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 800393c:	e072      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003946:	e06d      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003950:	e068      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
        break;
 8003956:	e065      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d15d      	bne.n	8003a20 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	2b0d      	cmp	r3, #13
 8003968:	d857      	bhi.n	8003a1a <HAL_TIM_RegisterCallback+0x2a6>
 800396a:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <HAL_TIM_RegisterCallback+0x1fc>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	080039a9 	.word	0x080039a9
 8003974:	080039b1 	.word	0x080039b1
 8003978:	080039b9 	.word	0x080039b9
 800397c:	080039c1 	.word	0x080039c1
 8003980:	080039c9 	.word	0x080039c9
 8003984:	080039d1 	.word	0x080039d1
 8003988:	080039d9 	.word	0x080039d9
 800398c:	080039e1 	.word	0x080039e1
 8003990:	080039e9 	.word	0x080039e9
 8003994:	080039f1 	.word	0x080039f1
 8003998:	080039f9 	.word	0x080039f9
 800399c:	08003a01 	.word	0x08003a01
 80039a0:	08003a09 	.word	0x08003a09
 80039a4:	08003a11 	.word	0x08003a11
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80039ae:	e039      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80039b6:	e035      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80039be:	e031      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80039c6:	e02d      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80039ce:	e029      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80039d6:	e025      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80039de:	e021      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80039e6:	e01d      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80039ee:	e019      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80039f6:	e015      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80039fe:	e011      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003a06:	e00d      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003a0e:	e009      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003a18:	e004      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
        break;
 8003a1e:	e001      	b.n	8003a24 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a4c      	ldr	r2, [pc, #304]	; (8003b78 <TIM_Base_SetConfig+0x144>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d017      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d013      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a49      	ldr	r2, [pc, #292]	; (8003b7c <TIM_Base_SetConfig+0x148>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00f      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a48      	ldr	r2, [pc, #288]	; (8003b80 <TIM_Base_SetConfig+0x14c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a47      	ldr	r2, [pc, #284]	; (8003b84 <TIM_Base_SetConfig+0x150>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a46      	ldr	r2, [pc, #280]	; (8003b88 <TIM_Base_SetConfig+0x154>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x48>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a45      	ldr	r2, [pc, #276]	; (8003b8c <TIM_Base_SetConfig+0x158>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d108      	bne.n	8003a8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a39      	ldr	r2, [pc, #228]	; (8003b78 <TIM_Base_SetConfig+0x144>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d023      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d01f      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a36      	ldr	r2, [pc, #216]	; (8003b7c <TIM_Base_SetConfig+0x148>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01b      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a35      	ldr	r2, [pc, #212]	; (8003b80 <TIM_Base_SetConfig+0x14c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d017      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a34      	ldr	r2, [pc, #208]	; (8003b84 <TIM_Base_SetConfig+0x150>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <TIM_Base_SetConfig+0x154>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a33      	ldr	r2, [pc, #204]	; (8003b90 <TIM_Base_SetConfig+0x15c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a32      	ldr	r2, [pc, #200]	; (8003b94 <TIM_Base_SetConfig+0x160>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <TIM_Base_SetConfig+0x164>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0xaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <TIM_Base_SetConfig+0x158>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <TIM_Base_SetConfig+0x144>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <TIM_Base_SetConfig+0x154>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00f      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <TIM_Base_SetConfig+0x15c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <TIM_Base_SetConfig+0x160>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <TIM_Base_SetConfig+0x164>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0x110>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <TIM_Base_SetConfig+0x158>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f023 0201 	bic.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40015000 	.word	0x40015000
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800

08003b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <TIM_ResetCallback+0xa4>)
 8003bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <TIM_ResetCallback+0xa8>)
 8003bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <TIM_ResetCallback+0xac>)
 8003c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <TIM_ResetCallback+0xb0>)
 8003c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <TIM_ResetCallback+0xb4>)
 8003c14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <TIM_ResetCallback+0xb8>)
 8003c1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <TIM_ResetCallback+0xbc>)
 8003c24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <TIM_ResetCallback+0xc0>)
 8003c2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <TIM_ResetCallback+0xc4>)
 8003c34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <TIM_ResetCallback+0xc8>)
 8003c3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <TIM_ResetCallback+0xcc>)
 8003c44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <TIM_ResetCallback+0xd0>)
 8003c4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <TIM_ResetCallback+0xd4>)
 8003c54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <TIM_ResetCallback+0xd8>)
 8003c5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <TIM_ResetCallback+0xdc>)
 8003c64:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <TIM_ResetCallback+0xe0>)
 8003c6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <TIM_ResetCallback+0xe4>)
 8003c74:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <TIM_ResetCallback+0xe8>)
 8003c7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	080036ab 	.word	0x080036ab
 8003c90:	080036bf 	.word	0x080036bf
 8003c94:	08003737 	.word	0x08003737
 8003c98:	0800374b 	.word	0x0800374b
 8003c9c:	080036e7 	.word	0x080036e7
 8003ca0:	080036fb 	.word	0x080036fb
 8003ca4:	080036d3 	.word	0x080036d3
 8003ca8:	0800370f 	.word	0x0800370f
 8003cac:	08003723 	.word	0x08003723
 8003cb0:	0800375f 	.word	0x0800375f
 8003cb4:	08003cd5 	.word	0x08003cd5
 8003cb8:	08003ce9 	.word	0x08003ce9
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003d11 	.word	0x08003d11
 8003cc4:	08003d25 	.word	0x08003d25
 8003cc8:	08003d39 	.word	0x08003d39
 8003ccc:	08003d4d 	.word	0x08003d4d
 8003cd0:	08003d61 	.word	0x08003d61

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e050      	b.n	8003e28 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d114      	bne.n	8003dba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fdc5 	bl	8004928 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a21      	ldr	r2, [pc, #132]	; (8003e30 <HAL_UART_Init+0xbc>)
 8003dac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2224      	movs	r2, #36	; 0x24
 8003dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f001 f8f2 	bl	8004fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fdf3 	bl	80049cc <UART_SetConfig>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e01b      	b.n	8003e28 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f001 f971 	bl	8005108 <UART_CheckIdleState>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08001031 	.word	0x08001031

08003e34 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e09c      	b.n	8003f9a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d16c      	bne.n	8003f44 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	d85e      	bhi.n	8003f2e <HAL_UART_RegisterCallback+0xfa>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_UART_RegisterCallback+0x44>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003eb7 	.word	0x08003eb7
 8003e80:	08003ec1 	.word	0x08003ec1
 8003e84:	08003ecb 	.word	0x08003ecb
 8003e88:	08003ed5 	.word	0x08003ed5
 8003e8c:	08003edf 	.word	0x08003edf
 8003e90:	08003ee9 	.word	0x08003ee9
 8003e94:	08003ef3 	.word	0x08003ef3
 8003e98:	08003efd 	.word	0x08003efd
 8003e9c:	08003f07 	.word	0x08003f07
 8003ea0:	08003f11 	.word	0x08003f11
 8003ea4:	08003f1b 	.word	0x08003f1b
 8003ea8:	08003f25 	.word	0x08003f25
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003eb4:	e070      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003ebe:	e06b      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003ec8:	e066      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003ed2:	e061      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003edc:	e05c      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003ee6:	e057      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003ef0:	e052      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003efa:	e04d      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8003f04:	e048      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003f0e:	e043      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8003f18:	e03e      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003f22:	e039      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003f2c:	e034      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
        break;
 8003f42:	e029      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11a      	bne.n	8003f84 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	2b0b      	cmp	r3, #11
 8003f52:	d002      	beq.n	8003f5a <HAL_UART_RegisterCallback+0x126>
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	d005      	beq.n	8003f64 <HAL_UART_RegisterCallback+0x130>
 8003f58:	e009      	b.n	8003f6e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003f62:	e019      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003f6c:	e014      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
        break;
 8003f82:	e009      	b.n	8003f98 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop

08003fa8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d167      	bne.n	8004090 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_UART_Transmit_DMA+0x24>
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e060      	b.n	8004092 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2221      	movs	r2, #33	; 0x21
 8003ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	4a26      	ldr	r2, [pc, #152]	; (800409c <HAL_UART_Transmit_DMA+0xf4>)
 8004004:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400a:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <HAL_UART_Transmit_DMA+0xf8>)
 800400c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004012:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <HAL_UART_Transmit_DMA+0xfc>)
 8004014:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401a:	2200      	movs	r2, #0
 800401c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004026:	4619      	mov	r1, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3328      	adds	r3, #40	; 0x28
 800402e:	461a      	mov	r2, r3
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	f7fd fb77 	bl	8001724 <HAL_DMA_Start_IT>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d009      	beq.n	8004050 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2210      	movs	r2, #16
 8004040:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e020      	b.n	8004092 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2240      	movs	r2, #64	; 0x40
 8004056:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3308      	adds	r3, #8
 800405e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	623a      	str	r2, [r7, #32]
 800407a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	61bb      	str	r3, [r7, #24]
   return(result);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3728      	adds	r7, #40	; 0x28
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	080055d3 	.word	0x080055d3
 80040a0:	08005671 	.word	0x08005671
 80040a4:	0800580b 	.word	0x0800580b

080040a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d137      	bne.n	8004130 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Receive_DMA+0x24>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e030      	b.n	8004132 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <HAL_UART_Receive_DMA+0x94>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d01f      	beq.n	8004120 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d018      	beq.n	8004120 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	613b      	str	r3, [r7, #16]
   return(result);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	6a3a      	ldr	r2, [r7, #32]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	61bb      	str	r3, [r7, #24]
   return(result);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e6      	bne.n	80040ee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	461a      	mov	r2, r3
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f001 f906 	bl	8005338 <UART_Start_Receive_DMA>
 800412c:	4603      	mov	r3, r0
 800412e:	e000      	b.n	8004132 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004130:	2302      	movs	r3, #2
  }
}
 8004132:	4618      	mov	r0, r3
 8004134:	3728      	adds	r7, #40	; 0x28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40008000 	.word	0x40008000

08004140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b0ba      	sub	sp, #232	; 0xe8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004166:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800416a:	f640 030f 	movw	r3, #2063	; 0x80f
 800416e:	4013      	ands	r3, r2
 8004170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11b      	bne.n	80041b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 82f3 	beq.w	8004790 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
      }
      return;
 80041b2:	e2ed      	b.n	8004790 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8129 	beq.w	8004410 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041c2:	4b90      	ldr	r3, [pc, #576]	; (8004404 <HAL_UART_IRQHandler+0x2c4>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041ce:	4b8e      	ldr	r3, [pc, #568]	; (8004408 <HAL_UART_IRQHandler+0x2c8>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 811c 	beq.w	8004410 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d011      	beq.n	8004208 <HAL_UART_IRQHandler+0xc8>
 80041e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d011      	beq.n	8004238 <HAL_UART_IRQHandler+0xf8>
 8004214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00b      	beq.n	8004238 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2202      	movs	r2, #2
 8004226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d011      	beq.n	8004268 <HAL_UART_IRQHandler+0x128>
 8004244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2204      	movs	r2, #4
 8004256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f043 0202 	orr.w	r2, r3, #2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d017      	beq.n	80042a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004280:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004284:	4b5f      	ldr	r3, [pc, #380]	; (8004404 <HAL_UART_IRQHandler+0x2c4>)
 8004286:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2208      	movs	r2, #8
 8004292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d012      	beq.n	80042d6 <HAL_UART_IRQHandler+0x196>
 80042b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8259 	beq.w	8004794 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d013      	beq.n	8004316 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d005      	beq.n	800433a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800432e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004332:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004336:	2b00      	cmp	r3, #0
 8004338:	d058      	beq.n	80043ec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f001 f8e3 	bl	8005506 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d148      	bne.n	80043e0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3308      	adds	r3, #8
 8004376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800437a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800437e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1d9      	bne.n	800434e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d017      	beq.n	80043d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043aa:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_UART_IRQHandler+0x2cc>)
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fa89 	bl	80018cc <HAL_DMA_Abort_IT>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01f      	beq.n	8004400 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80043ce:	4610      	mov	r0, r2
 80043d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d2:	e015      	b.n	8004400 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043de:	e00f      	b.n	8004400 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ea:	e009      	b.n	8004400 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80043fe:	e1c9      	b.n	8004794 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	bf00      	nop
    return;
 8004402:	e1c7      	b.n	8004794 <HAL_UART_IRQHandler+0x654>
 8004404:	10000001 	.word	0x10000001
 8004408:	04000120 	.word	0x04000120
 800440c:	0800588f 	.word	0x0800588f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004414:	2b01      	cmp	r3, #1
 8004416:	f040 8157 	bne.w	80046c8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8150 	beq.w	80046c8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8149 	beq.w	80046c8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2210      	movs	r2, #16
 800443c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	f040 80bd 	bne.w	80045c8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800445c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8199 	beq.w	8004798 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800446c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004470:	429a      	cmp	r2, r3
 8004472:	f080 8191 	bcs.w	8004798 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800447c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8087 	bne.w	80045a2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1da      	bne.n	8004494 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004502:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004506:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800450a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e1      	bne.n	80044de <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800452a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800453e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004540:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004544:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800454c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e3      	bne.n	800451a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004582:	65bb      	str	r3, [r7, #88]	; 0x58
 8004584:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd f93c 	bl	800181a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 80045ba:	b292      	uxth	r2, r2
 80045bc:	1a8a      	subs	r2, r1, r2
 80045be:	b292      	uxth	r2, r2
 80045c0:	4611      	mov	r1, r2
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045c6:	e0e7      	b.n	8004798 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80d9 	beq.w	800479c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80045ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80d4 	beq.w	800479c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004616:	647b      	str	r3, [r7, #68]	; 0x44
 8004618:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800461c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e4      	bne.n	80045f4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	623b      	str	r3, [r7, #32]
   return(result);
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004652:	633a      	str	r2, [r7, #48]	; 0x30
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e1      	bne.n	800462a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	60fb      	str	r3, [r7, #12]
   return(result);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0310 	bic.w	r3, r3, #16
 800468e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	69b9      	ldr	r1, [r7, #24]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	617b      	str	r3, [r7, #20]
   return(result);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e4      	bne.n	800467a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80046bc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80046c0:	4611      	mov	r1, r2
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c6:	e069      	b.n	800479c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <HAL_UART_IRQHandler+0x5b6>
 80046d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046e8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046f4:	e055      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d014      	beq.n	800472c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800470e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	2b00      	cmp	r3, #0
 8004720:	d03e      	beq.n	80047a0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	4798      	blx	r3
    }
    return;
 800472a:	e039      	b.n	80047a0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_UART_IRQHandler+0x60c>
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 f8ba 	bl	80058be <UART_EndTransmit_IT>
    return;
 800474a:	e02a      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_UART_IRQHandler+0x630>
 8004758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800476e:	e018      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d012      	beq.n	80047a2 <HAL_UART_IRQHandler+0x662>
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	2b00      	cmp	r3, #0
 8004782:	da0e      	bge.n	80047a2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800478e:	e008      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
      return;
 8004790:	bf00      	nop
 8004792:	e006      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
    return;
 8004794:	bf00      	nop
 8004796:	e004      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
      return;
 8004798:	bf00      	nop
 800479a:	e002      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
      return;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <HAL_UART_IRQHandler+0x662>
    return;
 80047a0:	bf00      	nop
  }
}
 80047a2:	37e8      	adds	r7, #232	; 0xe8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	615a      	str	r2, [r3, #20]
  }
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40008000 	.word	0x40008000

08004898 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a18      	ldr	r2, [pc, #96]	; (8004908 <HAL_UART_EnableReceiverTimeout+0x70>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d027      	beq.n	80048fa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d120      	bne.n	80048f6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_EnableReceiverTimeout+0x2a>
 80048be:	2302      	movs	r3, #2
 80048c0:	e01c      	b.n	80048fc <HAL_UART_EnableReceiverTimeout+0x64>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	; 0x24
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80048e0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e002      	b.n	80048fc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
 80048f8:	e000      	b.n	80048fc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
  }
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	40008000 	.word	0x40008000

0800490c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a1a      	ldr	r2, [pc, #104]	; (800499c <UART_InitCallbacksToDefault+0x74>)
 8004934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <UART_InitCallbacksToDefault+0x78>)
 800493c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <UART_InitCallbacksToDefault+0x7c>)
 8004944:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <UART_InitCallbacksToDefault+0x80>)
 800494c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a16      	ldr	r2, [pc, #88]	; (80049ac <UART_InitCallbacksToDefault+0x84>)
 8004954:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <UART_InitCallbacksToDefault+0x88>)
 800495c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a14      	ldr	r2, [pc, #80]	; (80049b4 <UART_InitCallbacksToDefault+0x8c>)
 8004964:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <UART_InitCallbacksToDefault+0x90>)
 800496c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <UART_InitCallbacksToDefault+0x94>)
 8004974:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <UART_InitCallbacksToDefault+0x98>)
 800497c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <UART_InitCallbacksToDefault+0x9c>)
 8004984:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <UART_InitCallbacksToDefault+0xa0>)
 800498c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	080047bd 	.word	0x080047bd
 80049a0:	080047a9 	.word	0x080047a9
 80049a4:	080047e5 	.word	0x080047e5
 80049a8:	080047d1 	.word	0x080047d1
 80049ac:	080047f9 	.word	0x080047f9
 80049b0:	0800480d 	.word	0x0800480d
 80049b4:	08004821 	.word	0x08004821
 80049b8:	08004835 	.word	0x08004835
 80049bc:	08005919 	.word	0x08005919
 80049c0:	0800592d 	.word	0x0800592d
 80049c4:	08005941 	.word	0x08005941
 80049c8:	08004849 	.word	0x08004849

080049cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d0:	b08c      	sub	sp, #48	; 0x30
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4baa      	ldr	r3, [pc, #680]	; (8004ca4 <UART_SetConfig+0x2d8>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a9f      	ldr	r2, [pc, #636]	; (8004ca8 <UART_SetConfig+0x2dc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a34:	4313      	orrs	r3, r2
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f023 010f 	bic.w	r1, r3, #15
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a90      	ldr	r2, [pc, #576]	; (8004cac <UART_SetConfig+0x2e0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d125      	bne.n	8004abc <UART_SetConfig+0xf0>
 8004a70:	4b8f      	ldr	r3, [pc, #572]	; (8004cb0 <UART_SetConfig+0x2e4>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d81a      	bhi.n	8004ab4 <UART_SetConfig+0xe8>
 8004a7e:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0xb8>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa5 	.word	0x08004aa5
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aad 	.word	0x08004aad
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9a:	e116      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa2:	e112      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aaa:	e10e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab2:	e10a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aba:	e106      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7c      	ldr	r2, [pc, #496]	; (8004cb4 <UART_SetConfig+0x2e8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d138      	bne.n	8004b38 <UART_SetConfig+0x16c>
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	; (8004cb0 <UART_SetConfig+0x2e4>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d82d      	bhi.n	8004b30 <UART_SetConfig+0x164>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x110>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004b31 	.word	0x08004b31
 8004ae4:	08004b31 	.word	0x08004b31
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b31 	.word	0x08004b31
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b19 	.word	0x08004b19
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b29 	.word	0x08004b29
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b16:	e0d8      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1e:	e0d4      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b26:	e0d0      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2e:	e0cc      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e0c8      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5e      	ldr	r2, [pc, #376]	; (8004cb8 <UART_SetConfig+0x2ec>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d125      	bne.n	8004b8e <UART_SetConfig+0x1c2>
 8004b42:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <UART_SetConfig+0x2e4>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d016      	beq.n	8004b7e <UART_SetConfig+0x1b2>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d818      	bhi.n	8004b86 <UART_SetConfig+0x1ba>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d00a      	beq.n	8004b6e <UART_SetConfig+0x1a2>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d814      	bhi.n	8004b86 <UART_SetConfig+0x1ba>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <UART_SetConfig+0x19a>
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d008      	beq.n	8004b76 <UART_SetConfig+0x1aa>
 8004b64:	e00f      	b.n	8004b86 <UART_SetConfig+0x1ba>
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6c:	e0ad      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b74:	e0a9      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b76:	2304      	movs	r3, #4
 8004b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7c:	e0a5      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b84:	e0a1      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b86:	2310      	movs	r3, #16
 8004b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8c:	e09d      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a4a      	ldr	r2, [pc, #296]	; (8004cbc <UART_SetConfig+0x2f0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d125      	bne.n	8004be4 <UART_SetConfig+0x218>
 8004b98:	4b45      	ldr	r3, [pc, #276]	; (8004cb0 <UART_SetConfig+0x2e4>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba4:	d016      	beq.n	8004bd4 <UART_SetConfig+0x208>
 8004ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba8:	d818      	bhi.n	8004bdc <UART_SetConfig+0x210>
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d00a      	beq.n	8004bc4 <UART_SetConfig+0x1f8>
 8004bae:	2b80      	cmp	r3, #128	; 0x80
 8004bb0:	d814      	bhi.n	8004bdc <UART_SetConfig+0x210>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <UART_SetConfig+0x1f0>
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d008      	beq.n	8004bcc <UART_SetConfig+0x200>
 8004bba:	e00f      	b.n	8004bdc <UART_SetConfig+0x210>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc2:	e082      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bca:	e07e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd2:	e07a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bda:	e076      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be2:	e072      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a35      	ldr	r2, [pc, #212]	; (8004cc0 <UART_SetConfig+0x2f4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d12a      	bne.n	8004c44 <UART_SetConfig+0x278>
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <UART_SetConfig+0x2e4>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfc:	d01a      	beq.n	8004c34 <UART_SetConfig+0x268>
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d81b      	bhi.n	8004c3c <UART_SetConfig+0x270>
 8004c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c08:	d00c      	beq.n	8004c24 <UART_SetConfig+0x258>
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0e:	d815      	bhi.n	8004c3c <UART_SetConfig+0x270>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <UART_SetConfig+0x250>
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d008      	beq.n	8004c2c <UART_SetConfig+0x260>
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x270>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c22:	e052      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2a:	e04e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c32:	e04a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3a:	e046      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c42:	e042      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <UART_SetConfig+0x2dc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d13a      	bne.n	8004cc4 <UART_SetConfig+0x2f8>
 8004c4e:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <UART_SetConfig+0x2e4>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5c:	d01a      	beq.n	8004c94 <UART_SetConfig+0x2c8>
 8004c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c62:	d81b      	bhi.n	8004c9c <UART_SetConfig+0x2d0>
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d00c      	beq.n	8004c84 <UART_SetConfig+0x2b8>
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6e:	d815      	bhi.n	8004c9c <UART_SetConfig+0x2d0>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <UART_SetConfig+0x2b0>
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x2c0>
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x2d0>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c82:	e022      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8a:	e01e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c92:	e01a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e016      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca2:	e012      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004ca4:	cfff69f3 	.word	0xcfff69f3
 8004ca8:	40008000 	.word	0x40008000
 8004cac:	40013800 	.word	0x40013800
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	40004c00 	.word	0x40004c00
 8004cc0:	40005000 	.word	0x40005000
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4aae      	ldr	r2, [pc, #696]	; (8004f88 <UART_SetConfig+0x5bc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	f040 8097 	bne.w	8004e04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d823      	bhi.n	8004d26 <UART_SetConfig+0x35a>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x318>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d17 	.word	0x08004d17
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d27 	.word	0x08004d27
 8004d00:	08004d27 	.word	0x08004d27
 8004d04:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fd fec4 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d0e:	e010      	b.n	8004d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b9e      	ldr	r3, [pc, #632]	; (8004f8c <UART_SetConfig+0x5c0>)
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d14:	e00d      	b.n	8004d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fd fe4f 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d1c:	e009      	b.n	8004d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d24:	e005      	b.n	8004d32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8130 	beq.w	8004f9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	4a94      	ldr	r2, [pc, #592]	; (8004f90 <UART_SetConfig+0x5c4>)
 8004d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d44:	461a      	mov	r2, r3
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d305      	bcc.n	8004d6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d903      	bls.n	8004d72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d70:	e113      	b.n	8004f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	2200      	movs	r2, #0
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	60fa      	str	r2, [r7, #12]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	4a84      	ldr	r2, [pc, #528]	; (8004f90 <UART_SetConfig+0x5c4>)
 8004d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2200      	movs	r2, #0
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d94:	f7fb fa40 	bl	8000218 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	020b      	lsls	r3, r1, #8
 8004daa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dae:	0202      	lsls	r2, r0, #8
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	6849      	ldr	r1, [r1, #4]
 8004db4:	0849      	lsrs	r1, r1, #1
 8004db6:	2000      	movs	r0, #0
 8004db8:	460c      	mov	r4, r1
 8004dba:	4605      	mov	r5, r0
 8004dbc:	eb12 0804 	adds.w	r8, r2, r4
 8004dc0:	eb43 0905 	adc.w	r9, r3, r5
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	469a      	mov	sl, r3
 8004dcc:	4693      	mov	fp, r2
 8004dce:	4652      	mov	r2, sl
 8004dd0:	465b      	mov	r3, fp
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb fa1f 	bl	8000218 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4613      	mov	r3, r2
 8004de0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de8:	d308      	bcc.n	8004dfc <UART_SetConfig+0x430>
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df0:	d204      	bcs.n	8004dfc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a3a      	ldr	r2, [r7, #32]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	e0ce      	b.n	8004f9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e02:	e0ca      	b.n	8004f9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d166      	bne.n	8004edc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d827      	bhi.n	8004e66 <UART_SetConfig+0x49a>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <UART_SetConfig+0x450>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	08004e67 	.word	0x08004e67
 8004e2c:	08004e57 	.word	0x08004e57
 8004e30:	08004e67 	.word	0x08004e67
 8004e34:	08004e67 	.word	0x08004e67
 8004e38:	08004e67 	.word	0x08004e67
 8004e3c:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fd fe28 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8004e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e46:	e014      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fd fe3a 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e4e:	e010      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b4e      	ldr	r3, [pc, #312]	; (8004f8c <UART_SetConfig+0x5c0>)
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e54:	e00d      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fd fdaf 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e5c:	e009      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e64:	e005      	b.n	8004e72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8090 	beq.w	8004f9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	4a44      	ldr	r2, [pc, #272]	; (8004f90 <UART_SetConfig+0x5c4>)
 8004e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e84:	461a      	mov	r2, r3
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e8c:	005a      	lsls	r2, r3, #1
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	441a      	add	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	d916      	bls.n	8004ed4 <UART_SetConfig+0x508>
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d212      	bcs.n	8004ed4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f023 030f 	bic.w	r3, r3, #15
 8004eb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	8bfb      	ldrh	r3, [r7, #30]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	8bfa      	ldrh	r2, [r7, #30]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	e062      	b.n	8004f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eda:	e05e      	b.n	8004f9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d828      	bhi.n	8004f36 <UART_SetConfig+0x56a>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0x520>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f37 	.word	0x08004f37
 8004efc:	08004f27 	.word	0x08004f27
 8004f00:	08004f37 	.word	0x08004f37
 8004f04:	08004f37 	.word	0x08004f37
 8004f08:	08004f37 	.word	0x08004f37
 8004f0c:	08004f2f 	.word	0x08004f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f10:	f7fd fdc0 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8004f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f16:	e014      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fd fdd2 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f1e:	e010      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <UART_SetConfig+0x5c0>)
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f24:	e00d      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fd fd47 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004f2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f2c:	e009      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f34:	e005      	b.n	8004f42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f40:	bf00      	nop
    }

    if (pclk != 0U)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d028      	beq.n	8004f9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	4a10      	ldr	r2, [pc, #64]	; (8004f90 <UART_SetConfig+0x5c4>)
 8004f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f52:	461a      	mov	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	441a      	add	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d910      	bls.n	8004f94 <UART_SetConfig+0x5c8>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d20c      	bcs.n	8004f94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60da      	str	r2, [r3, #12]
 8004f84:	e009      	b.n	8004f9a <UART_SetConfig+0x5ce>
 8004f86:	bf00      	nop
 8004f88:	40008000 	.word	0x40008000
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	08005c00 	.word	0x08005c00
      }
      else
      {
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3730      	adds	r7, #48	; 0x30
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01a      	beq.n	80050da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c2:	d10a      	bne.n	80050da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b098      	sub	sp, #96	; 0x60
 800510c:	af02      	add	r7, sp, #8
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005118:	f7fc f940 	bl	800139c <HAL_GetTick>
 800511c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b08      	cmp	r3, #8
 800512a:	d12f      	bne.n	800518c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005134:	2200      	movs	r2, #0
 8005136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f88e 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d022      	beq.n	800518c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515a:	653b      	str	r3, [r7, #80]	; 0x50
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
 8005166:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800516a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e063      	b.n	8005254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d149      	bne.n	800522e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a2:	2200      	movs	r2, #0
 80051a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f857 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d03c      	beq.n	800522e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	623b      	str	r3, [r7, #32]
   return(result);
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d2:	633b      	str	r3, [r7, #48]	; 0x30
 80051d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e6      	bne.n	80051b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3308      	adds	r3, #8
 80051ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005206:	61fa      	str	r2, [r7, #28]
 8005208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	617b      	str	r3, [r7, #20]
   return(result);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e5      	bne.n	80051e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e012      	b.n	8005254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3758      	adds	r7, #88	; 0x58
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	e04f      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d04b      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fc f891 	bl	800139c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <UART_WaitOnFlagUntilTimeout+0x30>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e04e      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d037      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b80      	cmp	r3, #128	; 0x80
 80052a2:	d034      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d031      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d110      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f920 	bl	8005506 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2208      	movs	r2, #8
 80052ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e029      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d111      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f906 	bl	8005506 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e00f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d0a0      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b096      	sub	sp, #88	; 0x58
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	88fa      	ldrh	r2, [r7, #6]
 8005350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2222      	movs	r2, #34	; 0x22
 8005360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02d      	beq.n	80053ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005374:	4a40      	ldr	r2, [pc, #256]	; (8005478 <UART_Start_Receive_DMA+0x140>)
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	4a3f      	ldr	r2, [pc, #252]	; (800547c <UART_Start_Receive_DMA+0x144>)
 8005380:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005388:	4a3d      	ldr	r2, [pc, #244]	; (8005480 <UART_Start_Receive_DMA+0x148>)
 800538a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005392:	2200      	movs	r2, #0
 8005394:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3324      	adds	r3, #36	; 0x24
 80053a2:	4619      	mov	r1, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	461a      	mov	r2, r3
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	f7fc f9ba 	bl	8001724 <HAL_DMA_Start_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2210      	movs	r2, #16
 80053ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e051      	b.n	800546e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e6:	657b      	str	r3, [r7, #84]	; 0x54
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	653b      	str	r3, [r7, #80]	; 0x50
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3308      	adds	r3, #8
 8005422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005424:	637a      	str	r2, [r7, #52]	; 0x34
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	613b      	str	r3, [r7, #16]
   return(result);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005458:	623a      	str	r2, [r7, #32]
 800545a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69f9      	ldr	r1, [r7, #28]
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	61bb      	str	r3, [r7, #24]
   return(result);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3758      	adds	r7, #88	; 0x58
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	08005691 	.word	0x08005691
 800547c:	080057c5 	.word	0x080057c5
 8005480:	0800580b 	.word	0x0800580b

08005484 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b08f      	sub	sp, #60	; 0x3c
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	61fb      	str	r3, [r7, #28]
   return(result);
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054de:	61ba      	str	r2, [r7, #24]
 80054e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	613b      	str	r3, [r7, #16]
   return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e5      	bne.n	80054be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80054fa:	bf00      	nop
 80054fc:	373c      	adds	r7, #60	; 0x3c
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005506:	b480      	push	{r7}
 8005508:	b095      	sub	sp, #84	; 0x54
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	643b      	str	r3, [r7, #64]	; 0x40
 800552e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e6      	bne.n	800550e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	64bb      	str	r3, [r7, #72]	; 0x48
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800556a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e3      	bne.n	8005540 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d118      	bne.n	80055b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	60bb      	str	r3, [r7, #8]
   return(result);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f023 0310 	bic.w	r3, r3, #16
 8005594:	647b      	str	r3, [r7, #68]	; 0x44
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6979      	ldr	r1, [r7, #20]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	613b      	str	r3, [r7, #16]
   return(result);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e6      	bne.n	8005580 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80055c6:	bf00      	nop
 80055c8:	3754      	adds	r7, #84	; 0x54
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b090      	sub	sp, #64	; 0x40
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d137      	bne.n	800565e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3308      	adds	r3, #8
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	623b      	str	r3, [r7, #32]
   return(result);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005616:	633a      	str	r2, [r7, #48]	; 0x30
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e5      	bne.n	80055f6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800562a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	60fb      	str	r3, [r7, #12]
   return(result);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	69b9      	ldr	r1, [r7, #24]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	617b      	str	r3, [r7, #20]
   return(result);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800565c:	e004      	b.n	8005668 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005664:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005666:	4798      	blx	r3
}
 8005668:	bf00      	nop
 800566a:	3740      	adds	r7, #64	; 0x40
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b09c      	sub	sp, #112	; 0x70
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d171      	bne.n	8005790 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80056ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	667b      	str	r3, [r7, #100]	; 0x64
 80056fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005706:	647a      	str	r2, [r7, #68]	; 0x44
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800570c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	623b      	str	r3, [r7, #32]
   return(result);
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005730:	663b      	str	r3, [r7, #96]	; 0x60
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800573a:	633a      	str	r2, [r7, #48]	; 0x30
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d118      	bne.n	8005790 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	60fb      	str	r3, [r7, #12]
   return(result);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0310 	bic.w	r3, r3, #16
 8005772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	69b9      	ldr	r1, [r7, #24]
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	617b      	str	r3, [r7, #20]
   return(result);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e6      	bne.n	800575e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	2200      	movs	r2, #0
 8005794:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d109      	bne.n	80057b2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057a6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80057aa:	4611      	mov	r1, r2
 80057ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057ae:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057b0:	e004      	b.n	80057bc <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80057b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057ba:	4798      	blx	r3
}
 80057bc:	bf00      	nop
 80057be:	3770      	adds	r7, #112	; 0x70
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10b      	bne.n	80057f8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80057ec:	0852      	lsrs	r2, r2, #1
 80057ee:	b292      	uxth	r2, r2
 80057f0:	4611      	mov	r1, r2
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057f6:	e004      	b.n	8005802 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	4798      	blx	r3
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005826:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d109      	bne.n	800584a <UART_DMAError+0x40>
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b21      	cmp	r3, #33	; 0x21
 800583a:	d106      	bne.n	800584a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005844:	6978      	ldr	r0, [r7, #20]
 8005846:	f7ff fe1d 	bl	8005484 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d109      	bne.n	800586c <UART_DMAError+0x62>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b22      	cmp	r3, #34	; 0x22
 800585c:	d106      	bne.n	800586c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005866:	6978      	ldr	r0, [r7, #20]
 8005868:	f7ff fe4d 	bl	8005506 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	f043 0210 	orr.w	r2, r3, #16
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005882:	6978      	ldr	r0, [r7, #20]
 8005884:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b088      	sub	sp, #32
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	613b      	str	r3, [r7, #16]
   return(result);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005910:	bf00      	nop
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_UARTEx_DisableFifoMode+0x16>
 8005966:	2302      	movs	r3, #2
 8005968:	e027      	b.n	80059ba <HAL_UARTEx_DisableFifoMode+0x66>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2224      	movs	r2, #36	; 0x24
 8005976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005998:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059da:	2302      	movs	r3, #2
 80059dc:	e02d      	b.n	8005a3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2224      	movs	r2, #36	; 0x24
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f850 	bl	8005ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e02d      	b.n	8005ab6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2224      	movs	r2, #36	; 0x24
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f812 	bl	8005ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ae0:	e031      	b.n	8005b46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	0e5b      	lsrs	r3, r3, #25
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	0f5b      	lsrs	r3, r3, #29
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	7b3a      	ldrb	r2, [r7, #12]
 8005b0e:	4911      	ldr	r1, [pc, #68]	; (8005b54 <UARTEx_SetNbDataToProcess+0x94>)
 8005b10:	5c8a      	ldrb	r2, [r1, r2]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b16:	7b3a      	ldrb	r2, [r7, #12]
 8005b18:	490f      	ldr	r1, [pc, #60]	; (8005b58 <UARTEx_SetNbDataToProcess+0x98>)
 8005b1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	7b7a      	ldrb	r2, [r7, #13]
 8005b2c:	4909      	ldr	r1, [pc, #36]	; (8005b54 <UARTEx_SetNbDataToProcess+0x94>)
 8005b2e:	5c8a      	ldrb	r2, [r1, r2]
 8005b30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b34:	7b7a      	ldrb	r2, [r7, #13]
 8005b36:	4908      	ldr	r1, [pc, #32]	; (8005b58 <UARTEx_SetNbDataToProcess+0x98>)
 8005b38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	08005c18 	.word	0x08005c18
 8005b58:	08005c20 	.word	0x08005c20

08005b5c <memset>:
 8005b5c:	4402      	add	r2, r0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memset+0xa>
 8005b64:	4770      	bx	lr
 8005b66:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6a:	e7f9      	b.n	8005b60 <memset+0x4>

08005b6c <__libc_init_array>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	4d0d      	ldr	r5, [pc, #52]	; (8005ba4 <__libc_init_array+0x38>)
 8005b70:	4c0d      	ldr	r4, [pc, #52]	; (8005ba8 <__libc_init_array+0x3c>)
 8005b72:	1b64      	subs	r4, r4, r5
 8005b74:	10a4      	asrs	r4, r4, #2
 8005b76:	2600      	movs	r6, #0
 8005b78:	42a6      	cmp	r6, r4
 8005b7a:	d109      	bne.n	8005b90 <__libc_init_array+0x24>
 8005b7c:	4d0b      	ldr	r5, [pc, #44]	; (8005bac <__libc_init_array+0x40>)
 8005b7e:	4c0c      	ldr	r4, [pc, #48]	; (8005bb0 <__libc_init_array+0x44>)
 8005b80:	f000 f826 	bl	8005bd0 <_init>
 8005b84:	1b64      	subs	r4, r4, r5
 8005b86:	10a4      	asrs	r4, r4, #2
 8005b88:	2600      	movs	r6, #0
 8005b8a:	42a6      	cmp	r6, r4
 8005b8c:	d105      	bne.n	8005b9a <__libc_init_array+0x2e>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b94:	4798      	blx	r3
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7ee      	b.n	8005b78 <__libc_init_array+0xc>
 8005b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9e:	4798      	blx	r3
 8005ba0:	3601      	adds	r6, #1
 8005ba2:	e7f2      	b.n	8005b8a <__libc_init_array+0x1e>
 8005ba4:	08005c30 	.word	0x08005c30
 8005ba8:	08005c30 	.word	0x08005c30
 8005bac:	08005c30 	.word	0x08005c30
 8005bb0:	08005c34 	.word	0x08005c34

08005bb4 <memcpy>:
 8005bb4:	440a      	add	r2, r1
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bbc:	d100      	bne.n	8005bc0 <memcpy+0xc>
 8005bbe:	4770      	bx	lr
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bca:	4291      	cmp	r1, r2
 8005bcc:	d1f9      	bne.n	8005bc2 <memcpy+0xe>
 8005bce:	bd10      	pop	{r4, pc}

08005bd0 <_init>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr

08005bdc <_fini>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr
