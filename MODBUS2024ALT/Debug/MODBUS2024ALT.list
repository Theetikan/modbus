
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c90  08005c90  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c98  08005c98  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08005ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000210  08005eac  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b0c  08005eac  00020b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154da  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002872  00000000  00000000  00035759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00037fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8a  00000000  00000000  00039118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263ba  00000000  00000000  00039ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014613  00000000  00000000  0006025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc164  00000000  00000000  0007486f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000498c  00000000  00000000  001709d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00175360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005c38 	.word	0x08005c38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	08005c38 	.word	0x08005c38

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <modbus_1t5_Timeout+0x3c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000022c 	.word	0x2000022c

08000554 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <modbus_3t5_Timeout+0x1c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2201      	movs	r2, #1
 8000562:	755a      	strb	r2, [r3, #21]

}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	2000022c 	.word	0x2000022c

08000574 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f004 f9f9 	bl	8004974 <HAL_UART_GetError>
 8000582:	4603      	mov	r3, r0
 8000584:	2b20      	cmp	r3, #32
 8000586:	d101      	bne.n	800058c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000588:	f7ff ffc4 	bl	8000514 <modbus_1t5_Timeout>

	}
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800059e:	4a25      	ldr	r2, [pc, #148]	; (8000634 <Modbus_init+0xa0>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <Modbus_init+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <Modbus_init+0xa4>)
 80005b2:	210e      	movs	r1, #14
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f911 	bl	80037dc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2110      	movs	r1, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 f981 	bl	80048c8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 f998 	bl	8004900 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <Modbus_init+0xa8>)
 80005d6:	2104      	movs	r1, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fc5f 	bl	8003e9c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <Modbus_init+0xa0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <Modbus_init+0xa0>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <Modbus_init+0xa0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005f0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80005f4:	4413      	add	r3, r2
 80005f6:	3302      	adds	r3, #2
 80005f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005fc:	4619      	mov	r1, r3
 80005fe:	f003 fd87 	bl	8004110 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <Modbus_init+0xa0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b01      	cmp	r3, #1
 8000610:	d10c      	bne.n	800062c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fd93 	bl	8003144 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <Modbus_init+0xa0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe6c 	bl	8003304 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000022c 	.word	0x2000022c
 8000638:	08000555 	.word	0x08000555
 800063c:	08000575 	.word	0x08000575

08000640 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800064c:	23ff      	movs	r3, #255	; 0xff
 800064e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000650:	23ff      	movs	r3, #255	; 0xff
 8000652:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000654:	e013      	b.n	800067e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <CRC16+0x64>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4053      	eors	r3, r2
 8000672:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <CRC16+0x68>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800067e:	883b      	ldrh	r3, [r7, #0]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	803a      	strh	r2, [r7, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e6      	bne.n	8000656 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000100 	.word	0x20000100
 80006a8:	20000000 	.word	0x20000000

080006ac <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006b2:	4b7e      	ldr	r3, [pc, #504]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	7ddb      	ldrb	r3, [r3, #23]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d80a      	bhi.n	80006d4 <Modbus_Protocal_Worker+0x28>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <Modbus_Protocal_Worker+0x18>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006df 	.word	0x080006df
 80006c8:	08000873 	.word	0x08000873
 80006cc:	0800076b 	.word	0x0800076b
 80006d0:	080007af 	.word	0x080007af
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006d4:	4b75      	ldr	r3, [pc, #468]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2201      	movs	r2, #1
 80006da:	75da      	strb	r2, [r3, #23]
		break;
 80006dc:	e0e1      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006de:	4b73      	ldr	r3, [pc, #460]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006ea:	4b70      	ldr	r3, [pc, #448]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2202      	movs	r2, #2
 80006f0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006f2:	f000 f9d3 	bl	8000a9c <Modbus_Emission>
 80006f6:	e018      	b.n	800072a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006f8:	4b6c      	ldr	r3, [pc, #432]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000702:	4b6a      	ldr	r3, [pc, #424]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800070c:	b29b      	uxth	r3, r3
 800070e:	429a      	cmp	r2, r3
 8000710:	d00b      	beq.n	800072a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000712:	4b66      	ldr	r3, [pc, #408]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800071a:	4b64      	ldr	r3, [pc, #400]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2200      	movs	r2, #0
 8000720:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000722:	4b62      	ldr	r3, [pc, #392]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2203      	movs	r2, #3
 8000728:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800072a:	4b60      	ldr	r3, [pc, #384]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000734:	2b20      	cmp	r3, #32
 8000736:	f040 80ad 	bne.w	8000894 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800073a:	4b5c      	ldr	r3, [pc, #368]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000744:	4b59      	ldr	r3, [pc, #356]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800074a:	4b58      	ldr	r3, [pc, #352]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b57      	ldr	r3, [pc, #348]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000756:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800075a:	4413      	add	r3, r2
 800075c:	3302      	adds	r3, #2
 800075e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000762:	4619      	mov	r1, r3
 8000764:	f003 fcd4 	bl	8004110 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8000768:	e094      	b.n	8000894 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7d1b      	ldrb	r3, [r3, #20]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	22fe      	movs	r2, #254	; 0xfe
 800077c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8000798:	4b44      	ldr	r3, [pc, #272]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800079c:	1a8a      	subs	r2, r1, r2
 800079e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80007a0:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2204      	movs	r2, #4
 80007aa:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007ac:	e074      	b.n	8000898 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007b6:	f113 0f02 	cmn.w	r3, #2
 80007ba:	d150      	bne.n	800085e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007bc:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2200      	movs	r2, #0
 80007c2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80007cc:	4b37      	ldr	r3, [pc, #220]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007d4:	3b02      	subs	r3, #2
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff ff31 	bl	8000640 <CRC16>
 80007de:	4603      	mov	r3, r0
 80007e0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007e2:	793a      	ldrb	r2, [r7, #4]
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007e6:	6819      	ldr	r1, [r3, #0]
 80007e8:	4b30      	ldr	r3, [pc, #192]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007f0:	3b02      	subs	r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d10c      	bne.n	8000816 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007fc:	797a      	ldrb	r2, [r7, #5]
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800080a:	3b01      	subs	r3, #1
 800080c:	440b      	add	r3, r1
 800080e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000812:	429a      	cmp	r2, r3
 8000814:	d004      	beq.n	8000820 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	759a      	strb	r2, [r3, #22]
				break;
 800081e:	e040      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d113      	bne.n	800085a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8000842:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800084c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800084e:	461a      	mov	r2, r3
 8000850:	f005 f9e4 	bl	8005c1c <memcpy>

			//execute command
			Modbus_frame_response();
 8000854:	f000 f90a 	bl	8000a6c <Modbus_frame_response>
 8000858:	e001      	b.n	800085e <Modbus_Protocal_Worker+0x1b2>
				break;
 800085a:	bf00      	nop
					}
		break;


	}
}
 800085c:	e021      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	7d5b      	ldrb	r3, [r3, #21]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d019      	beq.n	800089c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2201      	movs	r2, #1
 800086e:	75da      	strb	r2, [r3, #23]
		break;
 8000870:	e014      	b.n	800089c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087c:	2b20      	cmp	r3, #32
 800087e:	d10f      	bne.n	80008a0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <Modbus_Protocal_Worker+0x200>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2201      	movs	r2, #1
 8000890:	75da      	strb	r2, [r3, #23]
		break;
 8000892:	e005      	b.n	80008a0 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000894:	bf00      	nop
 8000896:	e004      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000898:	bf00      	nop
 800089a:	e002      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 800089c:	bf00      	nop
 800089e:	e000      	b.n	80008a2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80008a0:	bf00      	nop
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000022c 	.word	0x2000022c

080008b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <modbusWrite1Register+0x80>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	7e5b      	ldrb	r3, [r3, #25]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <modbusWrite1Register+0x80>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7e9b      	ldrb	r3, [r3, #26]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <modbusWrite1Register+0x80>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d903      	bls.n	80008e2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 f8a4 	bl	8000a28 <ModbusErrorReply>
			 return;
 80008e0:	e023      	b.n	800092a <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <modbusWrite1Register+0x80>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <modbusWrite1Register+0x80>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6859      	ldr	r1, [r3, #4]
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	440b      	add	r3, r1
 80008f2:	7ed2      	ldrb	r2, [r2, #27]
 80008f4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <modbusWrite1Register+0x80>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <modbusWrite1Register+0x80>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6859      	ldr	r1, [r3, #4]
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	440b      	add	r3, r1
 8000906:	7f12      	ldrb	r2, [r2, #28]
 8000908:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <modbusWrite1Register+0x80>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			hModbus->Rxframe,
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <modbusWrite1Register+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000918:	2208      	movs	r2, #8
 800091a:	4619      	mov	r1, r3
 800091c:	f005 f97e 	bl	8005c1c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <modbusWrite1Register+0x80>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2205      	movs	r2, #5
 8000926:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270



}
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000022c 	.word	0x2000022c

08000934 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <modbusRead1Register+0xf0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	7edb      	ldrb	r3, [r3, #27]
 8000940:	b29b      	uxth	r3, r3
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <modbusRead1Register+0xf0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	7f1b      	ldrb	r3, [r3, #28]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <modbusRead1Register+0xf0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	7e5b      	ldrb	r3, [r3, #25]
 8000958:	b29b      	uxth	r3, r3
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <modbusRead1Register+0xf0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	7e9b      	ldrb	r3, [r3, #26]
 8000964:	b29b      	uxth	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <modbusRead1Register+0x42>
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	2b7d      	cmp	r3, #125	; 0x7d
 8000974:	d903      	bls.n	800097e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000976:	2003      	movs	r0, #3
 8000978:	f000 f856 	bl	8000a28 <ModbusErrorReply>
		 return;
 800097c:	e04e      	b.n	8000a1c <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800097e:	88ba      	ldrh	r2, [r7, #4]
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <modbusRead1Register+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	429a      	cmp	r2, r3
 8000988:	d808      	bhi.n	800099c <modbusRead1Register+0x68>
 800098a:	88ba      	ldrh	r2, [r7, #4]
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	461a      	mov	r2, r3
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <modbusRead1Register+0xf0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	429a      	cmp	r2, r3
 800099a:	d903      	bls.n	80009a4 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800099c:	2002      	movs	r0, #2
 800099e:	f000 f843 	bl	8000a28 <ModbusErrorReply>
		 return;
 80009a2:	e03b      	b.n	8000a1c <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <modbusRead1Register+0xf0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2203      	movs	r2, #3
 80009aa:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <modbusRead1Register+0xf0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009be:	2400      	movs	r4, #0
 80009c0:	e020      	b.n	8000a04 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <modbusRead1Register+0xf0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4423      	add	r3, r4
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	18d1      	adds	r1, r2, r3
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <modbusRead1Register+0xf0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	1c63      	adds	r3, r4, #1
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	7849      	ldrb	r1, [r1, #1]
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <modbusRead1Register+0xf0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	4423      	add	r3, r4
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	18d1      	adds	r1, r2, r3
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <modbusRead1Register+0xf0>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	0063      	lsls	r3, r4, #1
 80009f6:	3303      	adds	r3, #3
 80009f8:	7809      	ldrb	r1, [r1, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8000a02:	3401      	adds	r4, #1
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	429c      	cmp	r4, r3
 8000a08:	dbdb      	blt.n	80009c2 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <modbusRead1Register+0xf0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	0052      	lsls	r2, r2, #1
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270

}
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000022c 	.word	0x2000022c

08000a28 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	7e1a      	ldrb	r2, [r3, #24]
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->TxCount = 2;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <ModbusErrorReply+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2202      	movs	r2, #2
 8000a56:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000022c 	.word	0x2000022c

08000a6c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <Modbus_frame_response+0x2c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	7e1b      	ldrb	r3, [r3, #24]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d004      	beq.n	8000a84 <Modbus_frame_response+0x18>
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d105      	bne.n	8000a8a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a7e:	f7ff ff17 	bl	80008b0 <modbusWrite1Register>
		break;
 8000a82:	e006      	b.n	8000a92 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a84:	f7ff ff56 	bl	8000934 <modbusRead1Register>
		break;
 8000a88:	e003      	b.n	8000a92 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff ffcc 	bl	8000a28 <ModbusErrorReply>
		break;
 8000a90:	bf00      	nop

	}
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000022c 	.word	0x2000022c

08000a9c <Modbus_Emission>:

void Modbus_Emission()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aac:	2b20      	cmp	r3, #32
 8000aae:	d15d      	bne.n	8000b6c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8000ac6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
				hModbus->TxCount
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
		memcpy
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f005 f89f 	bl	8005c1c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <Modbus_Emission+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <Modbus_Emission+0xe8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3203      	adds	r2, #3
 8000aee:	b292      	uxth	r2, r2
 8000af0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <Modbus_Emission+0xe8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <Modbus_Emission+0xe8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b04:	3b02      	subs	r3, #2
 8000b06:	4619      	mov	r1, r3
 8000b08:	4610      	mov	r0, r2
 8000b0a:	f7ff fd99 	bl	8000640 <CRC16>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b1e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b20:	7939      	ldrb	r1, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b36:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b38:	7979      	ldrb	r1, [r7, #5]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4c:	2b20      	cmp	r3, #32
 8000b4e:	d10d      	bne.n	8000b6c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b62:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b66:	461a      	mov	r2, r3
 8000b68:	f003 fa52 	bl	8004010 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <Modbus_Emission+0xe8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	755a      	strb	r2, [r3, #21]

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000022c 	.word	0x2000022c

08000b88 <Heartbeat>:
uint16_t PickOder;
uint16_t PlaceOder;
uint16_t PickShelves;
uint16_t PlaceShelves;

void Heartbeat(){
 8000b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b8c:	af00      	add	r7, sp, #0
	static uint64_t timestamp = 0;
		 	  if(HAL_GetTick() >= timestamp)
 8000b8e:	f000 fc39 	bl	8001404 <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2200      	movs	r2, #0
 8000b96:	461c      	mov	r4, r3
 8000b98:	4615      	mov	r5, r2
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <Heartbeat+0x44>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	4294      	cmp	r4, r2
 8000ba2:	eb75 0303 	sbcs.w	r3, r5, r3
 8000ba6:	d30d      	bcc.n	8000bc4 <Heartbeat+0x3c>
		 	  {
		 		  timestamp += 200;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <Heartbeat+0x44>)
 8000baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bae:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000bb2:	f143 0900 	adc.w	r9, r3, #0
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <Heartbeat+0x44>)
 8000bb8:	e9c3 8900 	strd	r8, r9, [r3]
				  //if (registerFrame[0].U16 == 18537) {
		 		 //registerFrame[0].U16 = 0x00;
		 		  registerFrame[0x00].U16 = 22881;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <Heartbeat+0x48>)
 8000bbe:	f645 1261 	movw	r2, #22881	; 0x5961
 8000bc2:	801a      	strh	r2, [r3, #0]
				  //}
		 	  }
}
 8000bc4:	bf00      	nop
 8000bc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000af8 	.word	0x20000af8
 8000bd0:	20000708 	.word	0x20000708

08000bd4 <Routine>:

void Routine(){
 8000bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bd8:	af00      	add	r7, sp, #0
	static uint64_t timestamp2 = 0;
		if(HAL_GetTick() >= timestamp2) //ส่งค่าพวกนี้หลังจาก BaseSytem อ่าน Heartbeat ทุกๆ 200 ms
 8000bda:	f000 fc13 	bl	8001404 <HAL_GetTick>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2200      	movs	r2, #0
 8000be2:	461c      	mov	r4, r3
 8000be4:	4615      	mov	r5, r2
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <Routine+0x78>)
 8000be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bec:	4294      	cmp	r4, r2
 8000bee:	eb75 0303 	sbcs.w	r3, r5, r3
 8000bf2:	d328      	bcc.n	8000c46 <Routine+0x72>
		{
		timestamp2 += 200;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <Routine+0x78>)
 8000bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfa:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000bfe:	f143 0900 	adc.w	r9, r3, #0
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <Routine+0x78>)
 8000c04:	e9c3 8900 	strd	r8, r9, [r3]
		if (registerFrame[0x00].U16 == 18537){
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <Routine+0x7c>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	f644 0269 	movw	r2, #18537	; 0x4869
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d118      	bne.n	8000c46 <Routine+0x72>
			HeartFlag = 1 ; // ได้รับค่าจาก Heartbeat Protocal
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <Routine+0x80>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	801a      	strh	r2, [r3, #0]
		//BaseSytem Read
		registerFrame[0x04].U16 = 0000000000000000;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <Routine+0x7c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	811a      	strh	r2, [r3, #8]
		registerFrame[0x04].U16 = 0000000000000001;//Gripper Movement Actual Status = 'Lead Switch 2 Status'
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <Routine+0x7c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = 0001; //Z-axis Moving Status = Set Shelve
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <Routine+0x7c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = 190; //Z-axis Actual Position = 19 ค่าจริง*10
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <Routine+0x7c>)
 8000c2e:	22be      	movs	r2, #190	; 0xbe
 8000c30:	845a      	strh	r2, [r3, #34]	; 0x22
		registerFrame[0x12].U16 = 200; //Z-axis Actual Speed = 20
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <Routine+0x7c>)
 8000c34:	22c8      	movs	r2, #200	; 0xc8
 8000c36:	849a      	strh	r2, [r3, #36]	; 0x24
		registerFrame[0x13].U16 = 210; //Z-axis Acceleration = 21
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <Routine+0x7c>)
 8000c3a:	22d2      	movs	r2, #210	; 0xd2
 8000c3c:	84da      	strh	r2, [r3, #38]	; 0x26
		registerFrame[0x40].U16 = 220; //X-axis Actual Position = 22
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <Routine+0x7c>)
 8000c40:	22dc      	movs	r2, #220	; 0xdc
 8000c42:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}
}
}
 8000c46:	bf00      	nop
 8000c48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c4c:	20000b00 	.word	0x20000b00
 8000c50:	20000708 	.word	0x20000708
 8000c54:	20000898 	.word	0x20000898

08000c58 <VacuumOn_Off>:
void VacuumOn_Off(){ // อ่านค่า Vacuum จากการกดปุ่มที่ BaseSytem
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <VacuumOn_Off+0x2c>)
 8000c5e:	889b      	ldrh	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <VacuumOn_Off+0x12>
		VacuumState = 0; //Off
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <VacuumOn_Off+0x30>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	801a      	strh	r2, [r3, #0]
	}
	if(registerFrame[0x02].U16 == 0b0001){
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <VacuumOn_Off+0x2c>)
 8000c6c:	889b      	ldrh	r3, [r3, #4]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d102      	bne.n	8000c78 <VacuumOn_Off+0x20>
		VacuumState = 1; //On
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <VacuumOn_Off+0x30>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	801a      	strh	r2, [r3, #0]
		}
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000708 	.word	0x20000708
 8000c88:	2000089a 	.word	0x2000089a

08000c8c <Gripper_Movement>:

void Gripper_Movement(){ // อ่านค่า Gripper จากการกดปุ่มที่ BaseSytem
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <Gripper_Movement+0x2c>)
 8000c92:	88db      	ldrh	r3, [r3, #6]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <Gripper_Movement+0x12>
			GripperState = 0; //Backward
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <Gripper_Movement+0x30>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
		}
	if(registerFrame[0x03].U16 == 0b0001){
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <Gripper_Movement+0x2c>)
 8000ca0:	88db      	ldrh	r3, [r3, #6]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <Gripper_Movement+0x20>
			GripperState = 1; //Forward
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <Gripper_Movement+0x30>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	801a      	strh	r2, [r3, #0]
			}
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000708 	.word	0x20000708
 8000cbc:	2000089c 	.word	0x2000089c

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 fb39 	bl	800133a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f82c 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f000 f926 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd0:	f000 f8f2 	bl	8000eb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cd4:	f000 f8a2 	bl	8000e1c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000cd8:	f000 f870 	bl	8000dbc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <main+0x54>)
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <main+0x58>)
 8000ce0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <main+0x54>)
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <main+0x5c>)
 8000ce6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <main+0x54>)
 8000cea:	2215      	movs	r2, #21
 8000cec:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <main+0x54>)
 8000cf0:	22c8      	movs	r2, #200	; 0xc8
 8000cf2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000cf4:	490a      	ldr	r1, [pc, #40]	; (8000d20 <main+0x60>)
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <main+0x54>)
 8000cf8:	f7ff fc4c 	bl	8000594 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000cfc:	f7ff fcd6 	bl	80006ac <Modbus_Protocal_Worker>
	  Heartbeat();
 8000d00:	f7ff ff42 	bl	8000b88 <Heartbeat>
	  Routine();
 8000d04:	f7ff ff66 	bl	8000bd4 <Routine>
	  VacuumOn_Off();
 8000d08:	f7ff ffa6 	bl	8000c58 <VacuumOn_Off>
	  Gripper_Movement();
 8000d0c:	f7ff ffbe 	bl	8000c8c <Gripper_Movement>
	  Modbus_Protocal_Worker();
 8000d10:	e7f4      	b.n	8000cfc <main+0x3c>
 8000d12:	bf00      	nop
 8000d14:	20000230 	.word	0x20000230
 8000d18:	2000096c 	.word	0x2000096c
 8000d1c:	200008a0 	.word	0x200008a0
 8000d20:	20000708 	.word	0x20000708

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2238      	movs	r2, #56	; 0x38
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 ff46 	bl	8005bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f001 f968 	bl	800201c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d56:	2340      	movs	r3, #64	; 0x40
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d62:	2304      	movs	r3, #4
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d66:	2355      	movs	r3, #85	; 0x55
 8000d68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fa02 	bl	8002184 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d86:	f000 f937 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2104      	movs	r1, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fd00 	bl	80027a8 <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000dae:	f000 f923 	bl	8000ff8 <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3750      	adds	r7, #80	; 0x50
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <MX_TIM16_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000dc8:	22a9      	movs	r2, #169	; 0xa9
 8000dca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000dd4:	f240 4279 	movw	r2, #1145	; 0x479
 8000dd8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000dee:	f002 f945 	bl	800307c <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000df8:	f000 f8fe 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_TIM16_Init+0x58>)
 8000e00:	f002 fa18 	bl	8003234 <HAL_TIM_OnePulse_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f000 f8f5 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200008a0 	.word	0x200008a0
 8000e18:	40014400 	.word	0x40014400

08000e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e22:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <MX_USART2_UART_Init+0x98>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e28:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e34:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e6a:	f002 ffb7 	bl	8003ddc <HAL_UART_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 f8c0 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e7c:	f004 fdd7 	bl	8005a2e <HAL_UARTEx_SetTxFifoThreshold>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f000 f8b7 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e8e:	f004 fe0c 	bl	8005aaa <HAL_UARTEx_SetRxFifoThreshold>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000e98:	f000 f8ae 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_USART2_UART_Init+0x94>)
 8000e9e:	f004 fd8d 	bl	80059bc <HAL_UARTEx_DisableFifoMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000ea8:	f000 f8a6 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000096c 	.word	0x2000096c
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_DMA_Init+0x60>)
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <MX_DMA_Init+0x60>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6493      	str	r3, [r2, #72]	; 0x48
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_DMA_Init+0x60>)
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_DMA_Init+0x60>)
 8000ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <MX_DMA_Init+0x60>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_DMA_Init+0x60>)
 8000ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200b      	movs	r0, #11
 8000ef4:	f000 fb6d 	bl	80015d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ef8:	200b      	movs	r0, #11
 8000efa:	f000 fb84 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	200c      	movs	r0, #12
 8000f04:	f000 fb65 	bl	80015d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f08:	200c      	movs	r0, #12
 8000f0a:	f000 fb7c 	bl	8001606 <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a28      	ldr	r2, [pc, #160]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2120      	movs	r1, #32
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f001 f803 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <MX_GPIO_Init+0xd8>)
 8000fb6:	f000 fe73 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f000 fe64 	bl	8001ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2028      	movs	r0, #40	; 0x28
 8000fde:	f000 faf8 	bl	80015d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe2:	2028      	movs	r0, #40	; 0x28
 8000fe4:	f000 fb0f 	bl	8001606 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x8>
	...

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x44>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_MspInit+0x44>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6613      	str	r3, [r2, #96]	; 0x60
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_MspInit+0x44>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x44>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800103a:	f001 f893 	bl	8002164 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_TIM_Base_MspInit+0x44>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d113      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_Base_MspInit+0x48>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_TIM_Base_MspInit+0x48>)
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	6613      	str	r3, [r2, #96]	; 0x60
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x48>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2019      	movs	r0, #25
 800107c:	f000 faa9 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001080:	2019      	movs	r0, #25
 8001082:	f000 fac0 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40014400 	.word	0x40014400
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b09e      	sub	sp, #120	; 0x78
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	2254      	movs	r2, #84	; 0x54
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 fd83 	bl	8005bc4 <memset>
  if(huart->Instance==USART2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <HAL_UART_MspInit+0x160>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f040 8092 	bne.w	80011ee <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fd82 	bl	8002be0 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010e2:	f7ff ff89 	bl	8000ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <HAL_UART_MspInit+0x164>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	4a44      	ldr	r2, [pc, #272]	; (80011fc <HAL_UART_MspInit+0x164>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	6593      	str	r3, [r2, #88]	; 0x58
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <HAL_UART_MspInit+0x164>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <HAL_UART_MspInit+0x164>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a3e      	ldr	r2, [pc, #248]	; (80011fc <HAL_UART_MspInit+0x164>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <HAL_UART_MspInit+0x164>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001116:	230c      	movs	r3, #12
 8001118:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001126:	2307      	movs	r3, #7
 8001128:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f000 fdb4 	bl	8001ca0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <HAL_UART_MspInit+0x168>)
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <HAL_UART_MspInit+0x16c>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001140:	221b      	movs	r2, #27
 8001142:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001144:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001146:	2210      	movs	r2, #16
 8001148:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_UART_MspInit+0x168>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <HAL_UART_MspInit+0x168>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_UART_MspInit+0x168>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800116e:	4824      	ldr	r0, [pc, #144]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001170:	f000 fa64 	bl	800163c <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800117a:	f7ff ff3d 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001182:	67da      	str	r2, [r3, #124]	; 0x7c
 8001184:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_UART_MspInit+0x168>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_UART_MspInit+0x170>)
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <HAL_UART_MspInit+0x174>)
 800118e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_UART_MspInit+0x170>)
 8001192:	221a      	movs	r2, #26
 8001194:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_UART_MspInit+0x170>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_UART_MspInit+0x170>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011c2:	f000 fa3b 	bl	800163c <HAL_DMA_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80011cc:	f7ff ff14 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_UART_MspInit+0x170>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2026      	movs	r0, #38	; 0x26
 80011e4:	f000 f9f5 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e8:	2026      	movs	r0, #38	; 0x26
 80011ea:	f000 fa0c 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3778      	adds	r7, #120	; 0x78
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40021000 	.word	0x40021000
 8001200:	20000a38 	.word	0x20000a38
 8001204:	40020008 	.word	0x40020008
 8001208:	20000a98 	.word	0x20000a98
 800120c:	4002001c 	.word	0x4002001c

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8c0 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Channel1_IRQHandler+0x10>)
 800126a:	f000 fbca 	bl	8001a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000a38 	.word	0x20000a38

08001278 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Channel2_IRQHandler+0x10>)
 800127e:	f000 fbc0 	bl	8001a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000a98 	.word	0x20000a98

0800128c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001292:	f002 f8c5 	bl	8003420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200008a0 	.word	0x200008a0

080012a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <USART2_IRQHandler+0x10>)
 80012a6:	f002 ff7f 	bl	80041a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000096c 	.word	0x2000096c

080012b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012bc:	f000 fe8a 	bl	8001fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012ec:	f7ff ffea 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <LoopForever+0x6>)
  ldr r1, =_edata
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <LoopForever+0xe>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001308:	4c0a      	ldr	r4, [pc, #40]	; (8001334 <LoopForever+0x16>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001316:	f004 fc5d 	bl	8005bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800131a:	f7ff fcd1 	bl	8000cc0 <main>

0800131e <LoopForever>:

LoopForever:
    b LoopForever
 800131e:	e7fe      	b.n	800131e <LoopForever>
  ldr   r0, =_estack
 8001320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800132c:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 8001330:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001334:	20000b0c 	.word	0x20000b0c

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>

0800133a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f939 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f80e 	bl	800136c <HAL_InitTick>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	e001      	b.n	8001360 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800135c:	f7ff fe52 	bl	8001004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001360:	79fb      	ldrb	r3, [r7, #7]

}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_InitTick+0x68>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d022      	beq.n	80013c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_InitTick+0x6c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_InitTick+0x68>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800138c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001390:	fbb2 f3f3 	udiv	r3, r2, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f944 	bl	8001622 <HAL_SYSTICK_Config>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10f      	bne.n	80013c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	d809      	bhi.n	80013ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a6:	2200      	movs	r2, #0
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	f04f 30ff 	mov.w	r0, #4294967295
 80013ae:	f000 f910 	bl	80015d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_InitTick+0x70>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e007      	b.n	80013ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e004      	b.n	80013ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e001      	b.n	80013ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000208 	.word	0x20000208
 80013d8:	20000200 	.word	0x20000200
 80013dc:	20000204 	.word	0x20000204

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x1c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x20>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x1c>)
 80013f0:	6013      	str	r3, [r2, #0]
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	20000b08 	.word	0x20000b08
 8001400:	20000208 	.word	0x20000208

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000b08 	.word	0x20000b08

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff40 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff90 	bl	8001510 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5f 	bl	80014bc <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff33 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa4 	bl	8001578 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e08d      	b.n	800176a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_DMA_Init+0x138>)
 8001656:	429a      	cmp	r2, r3
 8001658:	d80f      	bhi.n	800167a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_DMA_Init+0x13c>)
 8001662:	4413      	add	r3, r2
 8001664:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_DMA_Init+0x140>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	009a      	lsls	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a42      	ldr	r2, [pc, #264]	; (8001780 <HAL_DMA_Init+0x144>)
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
 8001678:	e00e      	b.n	8001698 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <HAL_DMA_Init+0x148>)
 8001682:	4413      	add	r3, r2
 8001684:	4a3d      	ldr	r2, [pc, #244]	; (800177c <HAL_DMA_Init+0x140>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	009a      	lsls	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a3c      	ldr	r2, [pc, #240]	; (8001788 <HAL_DMA_Init+0x14c>)
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fa76 	bl	8001bdc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016f8:	d102      	bne.n	8001700 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001714:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d010      	beq.n	8001740 <HAL_DMA_Init+0x104>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b04      	cmp	r3, #4
 8001724:	d80c      	bhi.n	8001740 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fa96 	bl	8001c58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e008      	b.n	8001752 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40020407 	.word	0x40020407
 8001778:	bffdfff8 	.word	0xbffdfff8
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	40020000 	.word	0x40020000
 8001784:	bffdfbf8 	.word	0xbffdfbf8
 8001788:	40020400 	.word	0x40020400

0800178c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_DMA_Start_IT+0x20>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e066      	b.n	800187a <HAL_DMA_Start_IT+0xee>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d155      	bne.n	800186c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f9bb 	bl	8001b60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 020e 	orr.w	r2, r2, #14
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e00f      	b.n	8001824 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 020a 	orr.w	r2, r2, #10
 8001822:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001840:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001858:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e005      	b.n	8001878 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001874:	2302      	movs	r3, #2
 8001876:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001878:	7dfb      	ldrb	r3, [r7, #23]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d005      	beq.n	80018a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2204      	movs	r2, #4
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e037      	b.n	8001916 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020e 	bic.w	r2, r2, #14
 80018b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 021f 	and.w	r2, r3, #31
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00c      	beq.n	8001916 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800190a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001914:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d00d      	beq.n	8001968 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e047      	b.n	80019f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 020e 	bic.w	r2, r2, #14
 8001976:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	2101      	movs	r1, #1
 80019a6:	fa01 f202 	lsl.w	r2, r1, r2
 80019aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
    }
  }
  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2204      	movs	r2, #4
 8001a24:	409a      	lsls	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d026      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x7a>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d021      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d107      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0204 	bic.w	r2, r2, #4
 8001a54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 021f 	and.w	r2, r3, #31
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2104      	movs	r1, #4
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d071      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a7a:	e06c      	b.n	8001b56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2202      	movs	r2, #2
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02e      	beq.n	8001aee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d029      	beq.n	8001aee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10b      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 020a 	bic.w	r2, r2, #10
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	2102      	movs	r1, #2
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d038      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001aec:	e033      	b.n	8001b56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	2208      	movs	r2, #8
 8001af8:	409a      	lsls	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d02a      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d025      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 020e 	bic.w	r2, r2, #14
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
}
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b88:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d108      	bne.n	8001bc0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bbe:	e007      	b.n	8001bd0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d802      	bhi.n	8001bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e001      	b.n	8001bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bf8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3b08      	subs	r3, #8
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	009a      	lsls	r2, r3, #2
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2201      	movs	r2, #1
 8001c30:	409a      	lsls	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40020407 	.word	0x40020407
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020820 	.word	0x40020820
 8001c50:	cccccccd 	.word	0xcccccccd
 8001c54:	40020880 	.word	0x40020880

08001c58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c7a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2201      	movs	r2, #1
 8001c86:	409a      	lsls	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	1000823f 	.word	0x1000823f
 8001c9c:	40020940 	.word	0x40020940

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cae:	e15a      	b.n	8001f66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 814c 	beq.w	8001f60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d005      	beq.n	8001ce0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d130      	bne.n	8001d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d16:	2201      	movs	r2, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0201 	and.w	r2, r3, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d017      	beq.n	8001d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d123      	bne.n	8001dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0203 	and.w	r2, r3, #3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80a6 	beq.w	8001f60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e14:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <HAL_GPIO_Init+0x2e4>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	4a5a      	ldr	r2, [pc, #360]	; (8001f84 <HAL_GPIO_Init+0x2e4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e20:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <HAL_GPIO_Init+0x2e4>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2c:	4a56      	ldr	r2, [pc, #344]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e56:	d01f      	beq.n	8001e98 <HAL_GPIO_Init+0x1f8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a4c      	ldr	r2, [pc, #304]	; (8001f8c <HAL_GPIO_Init+0x2ec>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d019      	beq.n	8001e94 <HAL_GPIO_Init+0x1f4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x1f0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a4a      	ldr	r2, [pc, #296]	; (8001f94 <HAL_GPIO_Init+0x2f4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1ec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x2f8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1e8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1e4>
 8001e80:	2305      	movs	r3, #5
 8001e82:	e00a      	b.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e84:	2306      	movs	r3, #6
 8001e86:	e008      	b.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e004      	b.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eaa:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001edc:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f06:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5a:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f47f ae9d 	bne.w	8001cb0 <HAL_GPIO_Init+0x10>
  }
}
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	48000400 	.word	0x48000400
 8001f90:	48000800 	.word	0x48000800
 8001f94:	48000c00 	.word	0x48000c00
 8001f98:	48001000 	.word	0x48001000
 8001f9c:	48001400 	.word	0x48001400
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc0:	e002      	b.n	8001fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f806 	bl	8002004 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d141      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800202a:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d131      	bne.n	800209c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800203e:	4a46      	ldr	r2, [pc, #280]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002048:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002058:	4b40      	ldr	r3, [pc, #256]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2232      	movs	r2, #50	; 0x32
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	4a3f      	ldr	r2, [pc, #252]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	0c9b      	lsrs	r3, r3, #18
 800206a:	3301      	adds	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206e:	e002      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3b01      	subs	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002082:	d102      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f2      	bne.n	8002070 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002096:	d158      	bne.n	800214a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e057      	b.n	800214c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a2:	4a2d      	ldr	r2, [pc, #180]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020ac:	e04d      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b4:	d141      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d131      	bne.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2232      	movs	r2, #50	; 0x32
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	0c9b      	lsrs	r3, r3, #18
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020fa:	e002      	b.n	8002102 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3b01      	subs	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	d102      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f2      	bne.n	80020fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d112      	bne.n	800214a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e011      	b.n	800214c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002138:	e007      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002148:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40007000 	.word	0x40007000
 800215c:	20000200 	.word	0x20000200
 8002160:	431bde83 	.word	0x431bde83

08002164 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800216e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002172:	6093      	str	r3, [r2, #8]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007000 	.word	0x40007000

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e2fe      	b.n	8002794 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d075      	beq.n	800228e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a2:	4b97      	ldr	r3, [pc, #604]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ac:	4b94      	ldr	r3, [pc, #592]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d102      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3e>
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b8d      	ldr	r3, [pc, #564]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e2d9      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x74>
 80021ea:	4b85      	ldr	r3, [pc, #532]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a84      	ldr	r2, [pc, #528]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b7f      	ldr	r3, [pc, #508]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7e      	ldr	r2, [pc, #504]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b7c      	ldr	r3, [pc, #496]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7b      	ldr	r2, [pc, #492]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 800221c:	4b78      	ldr	r3, [pc, #480]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a77      	ldr	r2, [pc, #476]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b75      	ldr	r3, [pc, #468]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a74      	ldr	r2, [pc, #464]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff f8e2 	bl	8001404 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff f8de 	bl	8001404 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e29e      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002256:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff f8ce 	bl	8001404 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff f8ca 	bl	8001404 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e28a      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227e:	4b60      	ldr	r3, [pc, #384]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0xe8>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d075      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a4:	4b56      	ldr	r3, [pc, #344]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_OscConfig+0x136>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_OscConfig+0x13c>
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d11f      	bne.n	8002300 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x154>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e25d      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	4946      	ldr	r1, [pc, #280]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022ec:	4b45      	ldr	r3, [pc, #276]	; (8002404 <HAL_RCC_OscConfig+0x280>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f83b 	bl	800136c <HAL_InitTick>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d043      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e249      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d023      	beq.n	8002350 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff f876 	bl	8001404 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7ff f872 	bl	8001404 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e232      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	061b      	lsls	r3, r3, #24
 8002348:	492d      	ldr	r1, [pc, #180]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
 800234e:	e01a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f852 	bl	8001404 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7ff f84e 	bl	8001404 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e20e      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1e0>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d041      	beq.n	8002416 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7ff f82b 	bl	8001404 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b2:	f7ff f827 	bl	8001404 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1e7      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ef      	beq.n	80023b2 <HAL_RCC_OscConfig+0x22e>
 80023d2:	e020      	b.n	8002416 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_OscConfig+0x27c>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff f80e 	bl	8001404 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ea:	e00d      	b.n	8002408 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7ff f80a 	bl	8001404 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d906      	bls.n	8002408 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1ca      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002408:	4b8c      	ldr	r3, [pc, #560]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 800240a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ea      	bne.n	80023ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80a6 	beq.w	8002570 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002428:	4b84      	ldr	r3, [pc, #528]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_OscConfig+0x2b4>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x2b6>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b7f      	ldr	r3, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a7e      	ldr	r2, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b7c      	ldr	r3, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245a:	4b79      	ldr	r3, [pc, #484]	; (8002640 <HAL_RCC_OscConfig+0x4bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x4bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x4bc>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7fe ffc7 	bl	8001404 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7fe ffc3 	bl	8001404 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e183      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248c:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x4bc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_RCC_OscConfig+0x32e>
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b0:	e024      	b.n	80024fc <HAL_RCC_OscConfig+0x378>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d110      	bne.n	80024dc <HAL_RCC_OscConfig+0x358>
 80024ba:	4b60      	ldr	r3, [pc, #384]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	4a5e      	ldr	r2, [pc, #376]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ca:	4b5c      	ldr	r3, [pc, #368]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024da:	e00f      	b.n	80024fc <HAL_RCC_OscConfig+0x378>
 80024dc:	4b57      	ldr	r3, [pc, #348]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	4a56      	ldr	r2, [pc, #344]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d016      	beq.n	8002532 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe ff7e 	bl	8001404 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe ff7a 	bl	8001404 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e138      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002522:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ed      	beq.n	800250c <HAL_RCC_OscConfig+0x388>
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe ff67 	bl	8001404 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe ff63 	bl	8001404 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e121      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002550:	4b3a      	ldr	r3, [pc, #232]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ed      	bne.n	800253a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a34      	ldr	r2, [pc, #208]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d03c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01c      	beq.n	80025be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800258a:	4a2c      	ldr	r2, [pc, #176]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe ff36 	bl	8001404 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259c:	f7fe ff32 	bl	8001404 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0f2      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ae:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80025b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ef      	beq.n	800259c <HAL_RCC_OscConfig+0x418>
 80025bc:	e01b      	b.n	80025f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025be:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80025c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe ff19 	bl	8001404 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d6:	f7fe ff15 	bl	8001404 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0d5      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ef      	bne.n	80025d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80c9 	beq.w	8002792 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b0c      	cmp	r3, #12
 800260a:	f000 8083 	beq.w	8002714 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d15e      	bne.n	80026d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <HAL_RCC_OscConfig+0x4b8>)
 800261c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe feef 	bl	8001404 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002628:	e00c      	b.n	8002644 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe feeb 	bl	8001404 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d905      	bls.n	8002644 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0ab      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002644:	4b55      	ldr	r3, [pc, #340]	; (800279c <HAL_RCC_OscConfig+0x618>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ec      	bne.n	800262a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002650:	4b52      	ldr	r3, [pc, #328]	; (800279c <HAL_RCC_OscConfig+0x618>)
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <HAL_RCC_OscConfig+0x61c>)
 8002656:	4013      	ands	r3, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6a11      	ldr	r1, [r2, #32]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002660:	3a01      	subs	r2, #1
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	4311      	orrs	r1, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002672:	0852      	lsrs	r2, r2, #1
 8002674:	3a01      	subs	r2, #1
 8002676:	0552      	lsls	r2, r2, #21
 8002678:	4311      	orrs	r1, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800267e:	0852      	lsrs	r2, r2, #1
 8002680:	3a01      	subs	r2, #1
 8002682:	0652      	lsls	r2, r2, #25
 8002684:	4311      	orrs	r1, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800268a:	06d2      	lsls	r2, r2, #27
 800268c:	430a      	orrs	r2, r1
 800268e:	4943      	ldr	r1, [pc, #268]	; (800279c <HAL_RCC_OscConfig+0x618>)
 8002690:	4313      	orrs	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002694:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_RCC_OscConfig+0x618>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a40      	ldr	r2, [pc, #256]	; (800279c <HAL_RCC_OscConfig+0x618>)
 800269a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a0:	4b3e      	ldr	r3, [pc, #248]	; (800279c <HAL_RCC_OscConfig+0x618>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a3d      	ldr	r2, [pc, #244]	; (800279c <HAL_RCC_OscConfig+0x618>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe feaa 	bl	8001404 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fea6 	bl	8001404 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e066      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_RCC_OscConfig+0x618>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x530>
 80026d2:	e05e      	b.n	8002792 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_OscConfig+0x618>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_RCC_OscConfig+0x618>)
 80026da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fe90 	bl	8001404 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fe8c 	bl	8001404 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e04c      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCC_OscConfig+0x618>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_OscConfig+0x618>)
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	4924      	ldr	r1, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x618>)
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0x620>)
 800270e:	4013      	ands	r3, r2
 8002710:	60cb      	str	r3, [r1, #12]
 8002712:	e03e      	b.n	8002792 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e039      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCC_OscConfig+0x618>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	429a      	cmp	r2, r3
 8002732:	d12c      	bne.n	800278e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	3b01      	subs	r3, #1
 8002740:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d123      	bne.n	800278e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d11b      	bne.n	800278e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d113      	bne.n	800278e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d109      	bne.n	800278e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	019f800c 	.word	0x019f800c
 80027a4:	feeefffc 	.word	0xfeeefffc

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e11e      	b.n	80029fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b8e      	ldr	r3, [pc, #568]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 020f 	bic.w	r2, r3, #15
 80027d6:	498c      	ldr	r1, [pc, #560]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b8a      	ldr	r3, [pc, #552]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e106      	b.n	80029fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d073      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d129      	bne.n	8002858 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002804:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0f4      	b.n	80029fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002814:	f000 f99e 	bl	8002b54 <RCC_GetSysClockFreqFromPLLSource>
 8002818:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4a7c      	ldr	r2, [pc, #496]	; (8002a10 <HAL_RCC_ClockConfig+0x268>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d93f      	bls.n	80028a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002836:	2b00      	cmp	r3, #0
 8002838:	d033      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d12f      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002842:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800284a:	4a70      	ldr	r2, [pc, #448]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002850:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	e024      	b.n	80028a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d107      	bne.n	8002870 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0c6      	b.n	80029fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0be      	b.n	80029fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002880:	f000 f8ce 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8002884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4a61      	ldr	r2, [pc, #388]	; (8002a10 <HAL_RCC_ClockConfig+0x268>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d909      	bls.n	80028a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002896:	4a5d      	ldr	r2, [pc, #372]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4957      	ldr	r1, [pc, #348]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b4:	f7fe fda6 	bl	8001404 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7fe fda2 	bl	8001404 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e095      	b.n	80029fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028fc:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a42      	ldr	r2, [pc, #264]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002906:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800291c:	4a3b      	ldr	r2, [pc, #236]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002922:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4936      	ldr	r1, [pc, #216]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
 8002936:	e008      	b.n	800294a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b80      	cmp	r3, #128	; 0x80
 800293c:	d105      	bne.n	800294a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800293e:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4a32      	ldr	r2, [pc, #200]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 8002944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002948:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d21d      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 020f 	bic.w	r2, r3, #15
 8002960:	4929      	ldr	r1, [pc, #164]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002968:	f7fe fd4c 	bl	8001404 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7fe fd48 	bl	8001404 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e03b      	b.n	80029fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d1ed      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4917      	ldr	r1, [pc, #92]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490f      	ldr	r1, [pc, #60]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d2:	f000 f825 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_RCC_ClockConfig+0x264>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490c      	ldr	r1, [pc, #48]	; (8002a14 <HAL_RCC_ClockConfig+0x26c>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x270>)
 80029f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fcb8 	bl	800136c <HAL_InitTick>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	04c4b400 	.word	0x04c4b400
 8002a14:	08005c50 	.word	0x08005c50
 8002a18:	20000200 	.word	0x20000200
 8002a1c:	20000204 	.word	0x20000204

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	e047      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	e03e      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d136      	bne.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d10c      	bne.n	8002a8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a74:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7e:	68d2      	ldr	r2, [r2, #12]
 8002a80:	0a12      	lsrs	r2, r2, #8
 8002a82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	617b      	str	r3, [r7, #20]
      break;
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a98:	68d2      	ldr	r2, [r2, #12]
 8002a9a:	0a12      	lsrs	r2, r2, #8
 8002a9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
      break;
 8002aa6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0e5b      	lsrs	r3, r3, #25
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ac8:	693b      	ldr	r3, [r7, #16]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	016e3600 	.word	0x016e3600

08002ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000200 	.word	0x20000200

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4904      	ldr	r1, [pc, #16]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08005c60 	.word	0x08005c60

08002b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b2c:	f7ff ffda 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0adb      	lsrs	r3, r3, #11
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4904      	ldr	r1, [pc, #16]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	08005c60 	.word	0x08005c60

08002b54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d10c      	bne.n	8002b92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b78:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b82:	68d2      	ldr	r2, [r2, #12]
 8002b84:	0a12      	lsrs	r2, r2, #8
 8002b86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
    break;
 8002b90:	e00c      	b.n	8002bac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	0a12      	lsrs	r2, r2, #8
 8002ba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
    break;
 8002baa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0e5b      	lsrs	r3, r3, #25
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bc6:	687b      	ldr	r3, [r7, #4]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	016e3600 	.word	0x016e3600
 8002bdc:	00f42400 	.word	0x00f42400

08002be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002be8:	2300      	movs	r3, #0
 8002bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bec:	2300      	movs	r3, #0
 8002bee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8098 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	4a3f      	ldr	r2, [pc, #252]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a39      	ldr	r2, [pc, #228]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c36:	f7fe fbe5 	bl	8001404 <HAL_GetTick>
 8002c3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c3c:	e009      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe fbe1 	bl	8001404 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d902      	bls.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	74fb      	strb	r3, [r7, #19]
        break;
 8002c50:	e005      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ef      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d159      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c64:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01e      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d019      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fba1 	bl	8001404 <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc4:	e00b      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fb9d 	bl	8001404 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d902      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	74fb      	strb	r3, [r7, #19]
            break;
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ec      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d08:	e008      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	74bb      	strb	r3, [r7, #18]
 8002d0e:	e005      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d1c:	7c7b      	ldrb	r3, [r7, #17]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4ba7      	ldr	r3, [pc, #668]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	4aa6      	ldr	r2, [pc, #664]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3a:	4ba1      	ldr	r3, [pc, #644]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f023 0203 	bic.w	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	499d      	ldr	r1, [pc, #628]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d5c:	4b98      	ldr	r3, [pc, #608]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f023 020c 	bic.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4995      	ldr	r1, [pc, #596]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d7e:	4b90      	ldr	r3, [pc, #576]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	498c      	ldr	r1, [pc, #560]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002da0:	4b87      	ldr	r3, [pc, #540]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	4984      	ldr	r1, [pc, #528]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dc2:	4b7f      	ldr	r3, [pc, #508]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	497b      	ldr	r1, [pc, #492]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002de4:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	4973      	ldr	r1, [pc, #460]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e06:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	496a      	ldr	r1, [pc, #424]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4962      	ldr	r1, [pc, #392]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e4a:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	4959      	ldr	r1, [pc, #356]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e6c:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e72:	f023 0203 	bic.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	4951      	ldr	r1, [pc, #324]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8e:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4948      	ldr	r1, [pc, #288]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb0:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4940      	ldr	r1, [pc, #256]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ece:	d105      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ee8:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	4932      	ldr	r1, [pc, #200]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f06:	d105      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f08:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	4924      	ldr	r1, [pc, #144]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f40:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d019      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fae:	d109      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a02      	ldr	r2, [pc, #8]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fba:	60d3      	str	r3, [r2, #12]
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4926      	ldr	r1, [pc, #152]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	4918      	ldr	r1, [pc, #96]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a04      	ldr	r2, [pc, #16]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800306c:	7cbb      	ldrb	r3, [r7, #18]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e054      	b.n	8003138 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d111      	bne.n	80030be <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fdd4 	bl	8003c50 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a23      	ldr	r2, [pc, #140]	; (8003140 <HAL_TIM_Base_Init+0xc4>)
 80030b4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f000 fce3 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	0800104d 	.word	0x0800104d

08003144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d001      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e054      	b.n	8003206 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_TIM_Base_Start_IT+0xd0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d022      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x80>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003186:	d01d      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x80>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_TIM_Base_Start_IT+0xd4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x80>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a21      	ldr	r2, [pc, #132]	; (800321c <HAL_TIM_Base_Start_IT+0xd8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x80>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_TIM_Base_Start_IT+0xdc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x80>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_TIM_Base_Start_IT+0xe0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x80>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <HAL_TIM_Base_Start_IT+0xe4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0x80>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_TIM_Base_Start_IT+0xe8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d115      	bne.n	80031f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_TIM_Base_Start_IT+0xec>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d015      	beq.n	8003202 <HAL_TIM_Base_Start_IT+0xbe>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031dc:	d011      	beq.n	8003202 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	e008      	b.n	8003202 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e000      	b.n	8003204 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800
 8003220:	40000c00 	.word	0x40000c00
 8003224:	40013400 	.word	0x40013400
 8003228:	40014000 	.word	0x40014000
 800322c:	40015000 	.word	0x40015000
 8003230:	00010007 	.word	0x00010007

08003234 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e04c      	b.n	80032e2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fcf7 	bl	8003c50 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_TIM_OnePulse_Init+0xb8>)
 800326e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f000 fc06 	bl	8003a9c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0208 	bic.w	r2, r2, #8
 800329e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	080032f1 	.word	0x080032f1

080032f0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003314:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800331c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003324:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d108      	bne.n	8003346 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800333a:	7b7b      	ldrb	r3, [r7, #13]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d102      	bne.n	8003346 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003340:	7b3b      	ldrb	r3, [r7, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d001      	beq.n	800334a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e059      	b.n	80033fe <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0202 	orr.w	r2, r2, #2
 8003378:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0204 	orr.w	r2, r2, #4
 8003388:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fc36 	bl	8003c04 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	2104      	movs	r1, #4
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fc2f 	bl	8003c04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_TIM_OnePulse_Start_IT+0x108>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a14      	ldr	r2, [pc, #80]	; (8003410 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a12      	ldr	r2, [pc, #72]	; (8003414 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a11      	ldr	r2, [pc, #68]	; (8003418 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_TIM_OnePulse_Start_IT+0x118>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40013400 	.word	0x40013400
 8003410:	40014000 	.word	0x40014000
 8003414:	40014400 	.word	0x40014400
 8003418:	40014800 	.word	0x40014800
 800341c:	40015000 	.word	0x40015000

08003420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d026      	beq.n	8003490 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d021      	beq.n	8003490 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0202 	mvn.w	r2, #2
 8003454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e009      	b.n	800348a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d026      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d021      	beq.n	80034e8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0204 	mvn.w	r2, #4
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e009      	b.n	80034e2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d026      	beq.n	8003540 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d021      	beq.n	8003540 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0208 	mvn.w	r2, #8
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2204      	movs	r2, #4
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
 8003524:	e009      	b.n	800353a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d026      	beq.n	8003598 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	d021      	beq.n	8003598 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0210 	mvn.w	r2, #16
 800355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2208      	movs	r2, #8
 8003562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e009      	b.n	8003592 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0201 	mvn.w	r2, #1
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00e      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80035e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800360e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0220 	mvn.w	r2, #32
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80036fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	460b      	mov	r3, r1
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e14a      	b.n	8003a8e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	f040 80dd 	bne.w	80039c0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	2b1f      	cmp	r3, #31
 800380a:	f200 80d6 	bhi.w	80039ba <HAL_TIM_RegisterCallback+0x1de>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <HAL_TIM_RegisterCallback+0x38>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003895 	.word	0x08003895
 8003818:	0800389d 	.word	0x0800389d
 800381c:	080038a5 	.word	0x080038a5
 8003820:	080038ad 	.word	0x080038ad
 8003824:	080038b5 	.word	0x080038b5
 8003828:	080038bd 	.word	0x080038bd
 800382c:	080038c5 	.word	0x080038c5
 8003830:	080038cd 	.word	0x080038cd
 8003834:	080038d5 	.word	0x080038d5
 8003838:	080038dd 	.word	0x080038dd
 800383c:	080038e5 	.word	0x080038e5
 8003840:	080038ed 	.word	0x080038ed
 8003844:	080038f5 	.word	0x080038f5
 8003848:	080038fd 	.word	0x080038fd
 800384c:	08003907 	.word	0x08003907
 8003850:	08003911 	.word	0x08003911
 8003854:	0800391b 	.word	0x0800391b
 8003858:	08003925 	.word	0x08003925
 800385c:	0800392f 	.word	0x0800392f
 8003860:	08003939 	.word	0x08003939
 8003864:	08003943 	.word	0x08003943
 8003868:	0800394d 	.word	0x0800394d
 800386c:	08003957 	.word	0x08003957
 8003870:	08003961 	.word	0x08003961
 8003874:	0800396b 	.word	0x0800396b
 8003878:	08003975 	.word	0x08003975
 800387c:	0800397f 	.word	0x0800397f
 8003880:	08003989 	.word	0x08003989
 8003884:	08003993 	.word	0x08003993
 8003888:	0800399d 	.word	0x0800399d
 800388c:	080039a7 	.word	0x080039a7
 8003890:	080039b1 	.word	0x080039b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800389a:	e0f7      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80038a2:	e0f3      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80038aa:	e0ef      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80038b2:	e0eb      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80038ba:	e0e7      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80038c2:	e0e3      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80038ca:	e0df      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80038d2:	e0db      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80038da:	e0d7      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80038e2:	e0d3      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80038ea:	e0cf      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80038f2:	e0cb      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80038fa:	e0c7      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003904:	e0c2      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800390e:	e0bd      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003918:	e0b8      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003922:	e0b3      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800392c:	e0ae      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003936:	e0a9      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003940:	e0a4      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800394a:	e09f      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003954:	e09a      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800395e:	e095      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003968:	e090      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003972:	e08b      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800397c:	e086      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8003986:	e081      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003990:	e07c      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 800399a:	e077      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 80039a4:	e072      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 80039ae:	e06d      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 80039b8:	e068      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
        break;
 80039be:	e065      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d15d      	bne.n	8003a88 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	2b0d      	cmp	r3, #13
 80039d0:	d857      	bhi.n	8003a82 <HAL_TIM_RegisterCallback+0x2a6>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_TIM_RegisterCallback+0x1fc>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a19 	.word	0x08003a19
 80039e0:	08003a21 	.word	0x08003a21
 80039e4:	08003a29 	.word	0x08003a29
 80039e8:	08003a31 	.word	0x08003a31
 80039ec:	08003a39 	.word	0x08003a39
 80039f0:	08003a41 	.word	0x08003a41
 80039f4:	08003a49 	.word	0x08003a49
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a59 	.word	0x08003a59
 8003a00:	08003a61 	.word	0x08003a61
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003a71 	.word	0x08003a71
 8003a0c:	08003a79 	.word	0x08003a79
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003a16:	e039      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003a1e:	e035      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003a26:	e031      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003a2e:	e02d      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003a36:	e029      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003a3e:	e025      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003a46:	e021      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003a4e:	e01d      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003a56:	e019      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003a5e:	e015      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003a66:	e011      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003a6e:	e00d      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003a76:	e009      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003a80:	e004      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
        break;
 8003a86:	e001      	b.n	8003a8c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a4c      	ldr	r2, [pc, #304]	; (8003be0 <TIM_Base_SetConfig+0x144>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d017      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d013      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a49      	ldr	r2, [pc, #292]	; (8003be4 <TIM_Base_SetConfig+0x148>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00f      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a48      	ldr	r2, [pc, #288]	; (8003be8 <TIM_Base_SetConfig+0x14c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a47      	ldr	r2, [pc, #284]	; (8003bec <TIM_Base_SetConfig+0x150>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d007      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a46      	ldr	r2, [pc, #280]	; (8003bf0 <TIM_Base_SetConfig+0x154>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_Base_SetConfig+0x48>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a45      	ldr	r2, [pc, #276]	; (8003bf4 <TIM_Base_SetConfig+0x158>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d108      	bne.n	8003af6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a39      	ldr	r2, [pc, #228]	; (8003be0 <TIM_Base_SetConfig+0x144>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d023      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d01f      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a36      	ldr	r2, [pc, #216]	; (8003be4 <TIM_Base_SetConfig+0x148>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01b      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a35      	ldr	r2, [pc, #212]	; (8003be8 <TIM_Base_SetConfig+0x14c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d017      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a34      	ldr	r2, [pc, #208]	; (8003bec <TIM_Base_SetConfig+0x150>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <TIM_Base_SetConfig+0x154>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00f      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a33      	ldr	r2, [pc, #204]	; (8003bf8 <TIM_Base_SetConfig+0x15c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a32      	ldr	r2, [pc, #200]	; (8003bfc <TIM_Base_SetConfig+0x160>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a31      	ldr	r2, [pc, #196]	; (8003c00 <TIM_Base_SetConfig+0x164>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_Base_SetConfig+0xaa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <TIM_Base_SetConfig+0x158>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <TIM_Base_SetConfig+0x144>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <TIM_Base_SetConfig+0x110>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <TIM_Base_SetConfig+0x154>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00f      	beq.n	8003bac <TIM_Base_SetConfig+0x110>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <TIM_Base_SetConfig+0x15c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_Base_SetConfig+0x110>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <TIM_Base_SetConfig+0x160>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_Base_SetConfig+0x110>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <TIM_Base_SetConfig+0x164>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_Base_SetConfig+0x110>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <TIM_Base_SetConfig+0x158>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40013400 	.word	0x40013400
 8003bf4:	40015000 	.word	0x40015000
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800

08003c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2201      	movs	r2, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1a      	ldr	r2, [r3, #32]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	401a      	ands	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <TIM_ResetCallback+0xa4>)
 8003c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <TIM_ResetCallback+0xa8>)
 8003c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <TIM_ResetCallback+0xac>)
 8003c6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <TIM_ResetCallback+0xb0>)
 8003c74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a22      	ldr	r2, [pc, #136]	; (8003d04 <TIM_ResetCallback+0xb4>)
 8003c7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <TIM_ResetCallback+0xb8>)
 8003c84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a20      	ldr	r2, [pc, #128]	; (8003d0c <TIM_ResetCallback+0xbc>)
 8003c8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <TIM_ResetCallback+0xc0>)
 8003c94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1e      	ldr	r2, [pc, #120]	; (8003d14 <TIM_ResetCallback+0xc4>)
 8003c9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <TIM_ResetCallback+0xc8>)
 8003ca4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <TIM_ResetCallback+0xcc>)
 8003cac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <TIM_ResetCallback+0xd0>)
 8003cb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <TIM_ResetCallback+0xd4>)
 8003cbc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <TIM_ResetCallback+0xd8>)
 8003cc4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <TIM_ResetCallback+0xdc>)
 8003ccc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <TIM_ResetCallback+0xe0>)
 8003cd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <TIM_ResetCallback+0xe4>)
 8003cdc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <TIM_ResetCallback+0xe8>)
 8003ce4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	08003713 	.word	0x08003713
 8003cf8:	08003727 	.word	0x08003727
 8003cfc:	0800379f 	.word	0x0800379f
 8003d00:	080037b3 	.word	0x080037b3
 8003d04:	0800374f 	.word	0x0800374f
 8003d08:	08003763 	.word	0x08003763
 8003d0c:	0800373b 	.word	0x0800373b
 8003d10:	08003777 	.word	0x08003777
 8003d14:	0800378b 	.word	0x0800378b
 8003d18:	080037c7 	.word	0x080037c7
 8003d1c:	08003d3d 	.word	0x08003d3d
 8003d20:	08003d51 	.word	0x08003d51
 8003d24:	08003d65 	.word	0x08003d65
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d8d 	.word	0x08003d8d
 8003d30:	08003da1 	.word	0x08003da1
 8003d34:	08003db5 	.word	0x08003db5
 8003d38:	08003dc9 	.word	0x08003dc9

08003d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e050      	b.n	8003e90 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d114      	bne.n	8003e22 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fdc5 	bl	8004990 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <HAL_UART_Init+0xbc>)
 8003e14:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2224      	movs	r2, #36	; 0x24
 8003e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f001 f8f2 	bl	800502c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fdf3 	bl	8004a34 <UART_SetConfig>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01b      	b.n	8003e90 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f001 f971 	bl	8005170 <UART_CheckIdleState>
 8003e8e:	4603      	mov	r3, r0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	08001099 	.word	0x08001099

08003e9c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e09c      	b.n	8004002 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d16c      	bne.n	8003fac <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d85e      	bhi.n	8003f96 <HAL_UART_RegisterCallback+0xfa>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_UART_RegisterCallback+0x44>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f1f 	.word	0x08003f1f
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f33 	.word	0x08003f33
 8003ef0:	08003f3d 	.word	0x08003f3d
 8003ef4:	08003f47 	.word	0x08003f47
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003f5b 	.word	0x08003f5b
 8003f00:	08003f65 	.word	0x08003f65
 8003f04:	08003f6f 	.word	0x08003f6f
 8003f08:	08003f79 	.word	0x08003f79
 8003f0c:	08003f83 	.word	0x08003f83
 8003f10:	08003f8d 	.word	0x08003f8d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003f1c:	e070      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003f26:	e06b      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003f30:	e066      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003f3a:	e061      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003f44:	e05c      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003f4e:	e057      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003f58:	e052      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003f62:	e04d      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8003f6c:	e048      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003f76:	e043      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8003f80:	e03e      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003f8a:	e039      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003f94:	e034      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
        break;
 8003faa:	e029      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11a      	bne.n	8003fec <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	2b0b      	cmp	r3, #11
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_RegisterCallback+0x126>
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	d005      	beq.n	8003fcc <HAL_UART_RegisterCallback+0x130>
 8003fc0:	e009      	b.n	8003fd6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003fca:	e019      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003fd4:	e014      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
        break;
 8003fea:	e009      	b.n	8004000 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
}
 8004002:	4618      	mov	r0, r3
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	; 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	2b20      	cmp	r3, #32
 8004026:	d167      	bne.n	80040f8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_UART_Transmit_DMA+0x24>
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e060      	b.n	80040fa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	88fa      	ldrh	r2, [r7, #6]
 800404a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d028      	beq.n	80040b8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_UART_Transmit_DMA+0xf4>)
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004072:	4a25      	ldr	r2, [pc, #148]	; (8004108 <HAL_UART_Transmit_DMA+0xf8>)
 8004074:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407a:	4a24      	ldr	r2, [pc, #144]	; (800410c <HAL_UART_Transmit_DMA+0xfc>)
 800407c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004082:	2200      	movs	r2, #0
 8004084:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	4619      	mov	r1, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3328      	adds	r3, #40	; 0x28
 8004096:	461a      	mov	r2, r3
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	f7fd fb77 	bl	800178c <HAL_DMA_Start_IT>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2210      	movs	r2, #16
 80040a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e020      	b.n	80040fa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2240      	movs	r2, #64	; 0x40
 80040be:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	613b      	str	r3, [r7, #16]
   return(result);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	623a      	str	r2, [r7, #32]
 80040e2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	69f9      	ldr	r1, [r7, #28]
 80040e6:	6a3a      	ldr	r2, [r7, #32]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	; 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	0800563b 	.word	0x0800563b
 8004108:	080056d9 	.word	0x080056d9
 800410c:	08005873 	.word	0x08005873

08004110 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004124:	2b20      	cmp	r3, #32
 8004126:	d137      	bne.n	8004198 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_UART_Receive_DMA+0x24>
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e030      	b.n	800419a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_UART_Receive_DMA+0x94>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d01f      	beq.n	8004188 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	613b      	str	r3, [r7, #16]
   return(result);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	623b      	str	r3, [r7, #32]
 8004176:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	69f9      	ldr	r1, [r7, #28]
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	61bb      	str	r3, [r7, #24]
   return(result);
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e6      	bne.n	8004156 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	461a      	mov	r2, r3
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f001 f906 	bl	80053a0 <UART_Start_Receive_DMA>
 8004194:	4603      	mov	r3, r0
 8004196:	e000      	b.n	800419a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3728      	adds	r7, #40	; 0x28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40008000 	.word	0x40008000

080041a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b0ba      	sub	sp, #232	; 0xe8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041d6:	4013      	ands	r3, r2
 80041d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11b      	bne.n	800421c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 82f3 	beq.w	80047f8 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
      }
      return;
 800421a:	e2ed      	b.n	80047f8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800421c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8129 	beq.w	8004478 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800422a:	4b90      	ldr	r3, [pc, #576]	; (800446c <HAL_UART_IRQHandler+0x2c4>)
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004236:	4b8e      	ldr	r3, [pc, #568]	; (8004470 <HAL_UART_IRQHandler+0x2c8>)
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 811c 	beq.w	8004478 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d011      	beq.n	8004270 <HAL_UART_IRQHandler+0xc8>
 800424c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00b      	beq.n	8004270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2201      	movs	r2, #1
 800425e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d011      	beq.n	80042a0 <HAL_UART_IRQHandler+0xf8>
 800427c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2202      	movs	r2, #2
 800428e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f043 0204 	orr.w	r2, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d011      	beq.n	80042d0 <HAL_UART_IRQHandler+0x128>
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2204      	movs	r2, #4
 80042be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80042e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042ec:	4b5f      	ldr	r3, [pc, #380]	; (800446c <HAL_UART_IRQHandler+0x2c4>)
 80042ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2208      	movs	r2, #8
 80042fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f043 0208 	orr.w	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_UART_IRQHandler+0x196>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8259 	beq.w	80047fc <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d013      	beq.n	800437e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d105      	bne.n	800436e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d005      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800439a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d058      	beq.n	8004454 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 f8e3 	bl	800556e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d148      	bne.n	8004448 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1d9      	bne.n	80043b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004408:	2b00      	cmp	r3, #0
 800440a:	d017      	beq.n	800443c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004412:	4a18      	ldr	r2, [pc, #96]	; (8004474 <HAL_UART_IRQHandler+0x2cc>)
 8004414:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd fa89 	bl	8001934 <HAL_DMA_Abort_IT>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01f      	beq.n	8004468 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004436:	4610      	mov	r0, r2
 8004438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443a:	e015      	b.n	8004468 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004446:	e00f      	b.n	8004468 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004452:	e009      	b.n	8004468 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004466:	e1c9      	b.n	80047fc <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	bf00      	nop
    return;
 800446a:	e1c7      	b.n	80047fc <HAL_UART_IRQHandler+0x654>
 800446c:	10000001 	.word	0x10000001
 8004470:	04000120 	.word	0x04000120
 8004474:	080058f7 	.word	0x080058f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 8157 	bne.w	8004730 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8150 	beq.w	8004730 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8149 	beq.w	8004730 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2210      	movs	r2, #16
 80044a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	f040 80bd 	bne.w	8004630 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8199 	beq.w	8004800 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044d8:	429a      	cmp	r2, r3
 80044da:	f080 8191 	bcs.w	8004800 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 8087 	bne.w	800460a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800452a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800453e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1da      	bne.n	80044fc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800456a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800456e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800457c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e1      	bne.n	8004546 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3308      	adds	r3, #8
 8004588:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3308      	adds	r3, #8
 80045a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e3      	bne.n	8004582 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d8:	f023 0310 	bic.w	r3, r3, #16
 80045dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80045ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e4      	bne.n	80045c8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004604:	4618      	mov	r0, r3
 8004606:	f7fd f93c 	bl	8001882 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8004622:	b292      	uxth	r2, r2
 8004624:	1a8a      	subs	r2, r1, r2
 8004626:	b292      	uxth	r2, r2
 8004628:	4611      	mov	r1, r2
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800462e:	e0e7      	b.n	8004800 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800463c:	b29b      	uxth	r3, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80d9 	beq.w	8004804 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80d4 	beq.w	8004804 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800467e:	647b      	str	r3, [r7, #68]	; 0x44
 8004680:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800468c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e4      	bne.n	800465c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3308      	adds	r3, #8
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	623b      	str	r3, [r7, #32]
   return(result);
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046ba:	633a      	str	r2, [r7, #48]	; 0x30
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e1      	bne.n	8004692 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0310 	bic.w	r3, r3, #16
 80046f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	69b9      	ldr	r1, [r7, #24]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	617b      	str	r3, [r7, #20]
   return(result);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e4      	bne.n	80046e2 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004724:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004728:	4611      	mov	r1, r2
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800472e:	e069      	b.n	8004804 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d010      	beq.n	800475e <HAL_UART_IRQHandler+0x5b6>
 800473c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004750:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800475c:	e055      	b.n	800480a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d014      	beq.n	8004794 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03e      	beq.n	8004808 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
    }
    return;
 8004792:	e039      	b.n	8004808 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <HAL_UART_IRQHandler+0x60c>
 80047a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 f8ba 	bl	8005926 <UART_EndTransmit_IT>
    return;
 80047b2:	e02a      	b.n	800480a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <HAL_UART_IRQHandler+0x630>
 80047c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047d6:	e018      	b.n	800480a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d012      	beq.n	800480a <HAL_UART_IRQHandler+0x662>
 80047e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da0e      	bge.n	800480a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047f6:	e008      	b.n	800480a <HAL_UART_IRQHandler+0x662>
      return;
 80047f8:	bf00      	nop
 80047fa:	e006      	b.n	800480a <HAL_UART_IRQHandler+0x662>
    return;
 80047fc:	bf00      	nop
 80047fe:	e004      	b.n	800480a <HAL_UART_IRQHandler+0x662>
      return;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <HAL_UART_IRQHandler+0x662>
      return;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_UART_IRQHandler+0x662>
    return;
 8004808:	bf00      	nop
  }
}
 800480a:	37e8      	adds	r7, #232	; 0xe8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <HAL_UART_ReceiverTimeout_Config+0x34>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	615a      	str	r2, [r3, #20]
  }
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40008000 	.word	0x40008000

08004900 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a18      	ldr	r2, [pc, #96]	; (8004970 <HAL_UART_EnableReceiverTimeout+0x70>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d027      	beq.n	8004962 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	2b20      	cmp	r3, #32
 800491a:	d120      	bne.n	800495e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_UART_EnableReceiverTimeout+0x2a>
 8004926:	2302      	movs	r3, #2
 8004928:	e01c      	b.n	8004964 <HAL_UART_EnableReceiverTimeout+0x64>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2224      	movs	r2, #36	; 0x24
 8004936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004948:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e002      	b.n	8004964 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
 8004960:	e000      	b.n	8004964 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40008000 	.word	0x40008000

08004974 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <UART_InitCallbacksToDefault+0x74>)
 800499c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <UART_InitCallbacksToDefault+0x78>)
 80049a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <UART_InitCallbacksToDefault+0x7c>)
 80049ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <UART_InitCallbacksToDefault+0x80>)
 80049b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <UART_InitCallbacksToDefault+0x84>)
 80049bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <UART_InitCallbacksToDefault+0x88>)
 80049c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <UART_InitCallbacksToDefault+0x8c>)
 80049cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <UART_InitCallbacksToDefault+0x90>)
 80049d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <UART_InitCallbacksToDefault+0x94>)
 80049dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <UART_InitCallbacksToDefault+0x98>)
 80049e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <UART_InitCallbacksToDefault+0x9c>)
 80049ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a0f      	ldr	r2, [pc, #60]	; (8004a30 <UART_InitCallbacksToDefault+0xa0>)
 80049f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	08004825 	.word	0x08004825
 8004a08:	08004811 	.word	0x08004811
 8004a0c:	0800484d 	.word	0x0800484d
 8004a10:	08004839 	.word	0x08004839
 8004a14:	08004861 	.word	0x08004861
 8004a18:	08004875 	.word	0x08004875
 8004a1c:	08004889 	.word	0x08004889
 8004a20:	0800489d 	.word	0x0800489d
 8004a24:	08005981 	.word	0x08005981
 8004a28:	08005995 	.word	0x08005995
 8004a2c:	080059a9 	.word	0x080059a9
 8004a30:	080048b1 	.word	0x080048b1

08004a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a38:	b08c      	sub	sp, #48	; 0x30
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4baa      	ldr	r3, [pc, #680]	; (8004d0c <UART_SetConfig+0x2d8>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a9f      	ldr	r2, [pc, #636]	; (8004d10 <UART_SetConfig+0x2dc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004aaa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	f023 010f 	bic.w	r1, r3, #15
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a90      	ldr	r2, [pc, #576]	; (8004d14 <UART_SetConfig+0x2e0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d125      	bne.n	8004b24 <UART_SetConfig+0xf0>
 8004ad8:	4b8f      	ldr	r3, [pc, #572]	; (8004d18 <UART_SetConfig+0x2e4>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d81a      	bhi.n	8004b1c <UART_SetConfig+0xe8>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0xb8>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b15 	.word	0x08004b15
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b02:	e116      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b04:	2302      	movs	r3, #2
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b0a:	e112      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b12:	e10e      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b14:	2308      	movs	r3, #8
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1a:	e10a      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b22:	e106      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a7c      	ldr	r2, [pc, #496]	; (8004d1c <UART_SetConfig+0x2e8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d138      	bne.n	8004ba0 <UART_SetConfig+0x16c>
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	; (8004d18 <UART_SetConfig+0x2e4>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d82d      	bhi.n	8004b98 <UART_SetConfig+0x164>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0x110>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004b99 	.word	0x08004b99
 8004b4c:	08004b99 	.word	0x08004b99
 8004b50:	08004b99 	.word	0x08004b99
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004b99 	.word	0x08004b99
 8004b5c:	08004b99 	.word	0x08004b99
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004b91 	.word	0x08004b91
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7e:	e0d8      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b86:	e0d4      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8e:	e0d0      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e0cc      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e0c8      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5e      	ldr	r2, [pc, #376]	; (8004d20 <UART_SetConfig+0x2ec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d125      	bne.n	8004bf6 <UART_SetConfig+0x1c2>
 8004baa:	4b5b      	ldr	r3, [pc, #364]	; (8004d18 <UART_SetConfig+0x2e4>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bb4:	2b30      	cmp	r3, #48	; 0x30
 8004bb6:	d016      	beq.n	8004be6 <UART_SetConfig+0x1b2>
 8004bb8:	2b30      	cmp	r3, #48	; 0x30
 8004bba:	d818      	bhi.n	8004bee <UART_SetConfig+0x1ba>
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d00a      	beq.n	8004bd6 <UART_SetConfig+0x1a2>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d814      	bhi.n	8004bee <UART_SetConfig+0x1ba>
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <UART_SetConfig+0x19a>
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d008      	beq.n	8004bde <UART_SetConfig+0x1aa>
 8004bcc:	e00f      	b.n	8004bee <UART_SetConfig+0x1ba>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd4:	e0ad      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bdc:	e0a9      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004bde:	2304      	movs	r3, #4
 8004be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be4:	e0a5      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004be6:	2308      	movs	r3, #8
 8004be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bec:	e0a1      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf4:	e09d      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a4a      	ldr	r2, [pc, #296]	; (8004d24 <UART_SetConfig+0x2f0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d125      	bne.n	8004c4c <UART_SetConfig+0x218>
 8004c00:	4b45      	ldr	r3, [pc, #276]	; (8004d18 <UART_SetConfig+0x2e4>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c0c:	d016      	beq.n	8004c3c <UART_SetConfig+0x208>
 8004c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c10:	d818      	bhi.n	8004c44 <UART_SetConfig+0x210>
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d00a      	beq.n	8004c2c <UART_SetConfig+0x1f8>
 8004c16:	2b80      	cmp	r3, #128	; 0x80
 8004c18:	d814      	bhi.n	8004c44 <UART_SetConfig+0x210>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <UART_SetConfig+0x1f0>
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d008      	beq.n	8004c34 <UART_SetConfig+0x200>
 8004c22:	e00f      	b.n	8004c44 <UART_SetConfig+0x210>
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2a:	e082      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c32:	e07e      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c34:	2304      	movs	r3, #4
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3a:	e07a      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c42:	e076      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c44:	2310      	movs	r3, #16
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4a:	e072      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a35      	ldr	r2, [pc, #212]	; (8004d28 <UART_SetConfig+0x2f4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d12a      	bne.n	8004cac <UART_SetConfig+0x278>
 8004c56:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <UART_SetConfig+0x2e4>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c64:	d01a      	beq.n	8004c9c <UART_SetConfig+0x268>
 8004c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c6a:	d81b      	bhi.n	8004ca4 <UART_SetConfig+0x270>
 8004c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c70:	d00c      	beq.n	8004c8c <UART_SetConfig+0x258>
 8004c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c76:	d815      	bhi.n	8004ca4 <UART_SetConfig+0x270>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <UART_SetConfig+0x250>
 8004c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c80:	d008      	beq.n	8004c94 <UART_SetConfig+0x260>
 8004c82:	e00f      	b.n	8004ca4 <UART_SetConfig+0x270>
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8a:	e052      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c92:	e04e      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e04a      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca2:	e046      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004caa:	e042      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <UART_SetConfig+0x2dc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d13a      	bne.n	8004d2c <UART_SetConfig+0x2f8>
 8004cb6:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <UART_SetConfig+0x2e4>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cc4:	d01a      	beq.n	8004cfc <UART_SetConfig+0x2c8>
 8004cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cca:	d81b      	bhi.n	8004d04 <UART_SetConfig+0x2d0>
 8004ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd0:	d00c      	beq.n	8004cec <UART_SetConfig+0x2b8>
 8004cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd6:	d815      	bhi.n	8004d04 <UART_SetConfig+0x2d0>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <UART_SetConfig+0x2b0>
 8004cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce0:	d008      	beq.n	8004cf4 <UART_SetConfig+0x2c0>
 8004ce2:	e00f      	b.n	8004d04 <UART_SetConfig+0x2d0>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cea:	e022      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004cec:	2302      	movs	r3, #2
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf2:	e01e      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfa:	e01a      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d02:	e016      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004d04:	2310      	movs	r3, #16
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	e012      	b.n	8004d32 <UART_SetConfig+0x2fe>
 8004d0c:	cfff69f3 	.word	0xcfff69f3
 8004d10:	40008000 	.word	0x40008000
 8004d14:	40013800 	.word	0x40013800
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40004400 	.word	0x40004400
 8004d20:	40004800 	.word	0x40004800
 8004d24:	40004c00 	.word	0x40004c00
 8004d28:	40005000 	.word	0x40005000
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4aae      	ldr	r2, [pc, #696]	; (8004ff0 <UART_SetConfig+0x5bc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	f040 8097 	bne.w	8004e6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d823      	bhi.n	8004d8e <UART_SetConfig+0x35a>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x318>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d71 	.word	0x08004d71
 8004d50:	08004d8f 	.word	0x08004d8f
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d8f 	.word	0x08004d8f
 8004d5c:	08004d7f 	.word	0x08004d7f
 8004d60:	08004d8f 	.word	0x08004d8f
 8004d64:	08004d8f 	.word	0x08004d8f
 8004d68:	08004d8f 	.word	0x08004d8f
 8004d6c:	08004d87 	.word	0x08004d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d70:	f7fd fec4 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004d74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d76:	e010      	b.n	8004d9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d78:	4b9e      	ldr	r3, [pc, #632]	; (8004ff4 <UART_SetConfig+0x5c0>)
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d7c:	e00d      	b.n	8004d9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7e:	f7fd fe4f 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8004d82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d84:	e009      	b.n	8004d9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d8c:	e005      	b.n	8004d9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8130 	beq.w	8005002 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	4a94      	ldr	r2, [pc, #592]	; (8004ff8 <UART_SetConfig+0x5c4>)
 8004da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d305      	bcc.n	8004dd2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d903      	bls.n	8004dda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dd8:	e113      	b.n	8005002 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	60fa      	str	r2, [r7, #12]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	4a84      	ldr	r2, [pc, #528]	; (8004ff8 <UART_SetConfig+0x5c4>)
 8004de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2200      	movs	r2, #0
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dfc:	f7fb fa0c 	bl	8000218 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4610      	mov	r0, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	020b      	lsls	r3, r1, #8
 8004e12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e16:	0202      	lsls	r2, r0, #8
 8004e18:	6979      	ldr	r1, [r7, #20]
 8004e1a:	6849      	ldr	r1, [r1, #4]
 8004e1c:	0849      	lsrs	r1, r1, #1
 8004e1e:	2000      	movs	r0, #0
 8004e20:	460c      	mov	r4, r1
 8004e22:	4605      	mov	r5, r0
 8004e24:	eb12 0804 	adds.w	r8, r2, r4
 8004e28:	eb43 0905 	adc.w	r9, r3, r5
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	469a      	mov	sl, r3
 8004e34:	4693      	mov	fp, r2
 8004e36:	4652      	mov	r2, sl
 8004e38:	465b      	mov	r3, fp
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	f7fb f9eb 	bl	8000218 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4613      	mov	r3, r2
 8004e48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e50:	d308      	bcc.n	8004e64 <UART_SetConfig+0x430>
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e58:	d204      	bcs.n	8004e64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6a3a      	ldr	r2, [r7, #32]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e0ce      	b.n	8005002 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e6a:	e0ca      	b.n	8005002 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e74:	d166      	bne.n	8004f44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d827      	bhi.n	8004ece <UART_SetConfig+0x49a>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <UART_SetConfig+0x450>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	08004ecf 	.word	0x08004ecf
 8004e94:	08004ebf 	.word	0x08004ebf
 8004e98:	08004ecf 	.word	0x08004ecf
 8004e9c:	08004ecf 	.word	0x08004ecf
 8004ea0:	08004ecf 	.word	0x08004ecf
 8004ea4:	08004ec7 	.word	0x08004ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea8:	f7fd fe28 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eae:	e014      	b.n	8004eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb0:	f7fd fe3a 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eb6:	e010      	b.n	8004eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb8:	4b4e      	ldr	r3, [pc, #312]	; (8004ff4 <UART_SetConfig+0x5c0>)
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ebc:	e00d      	b.n	8004eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebe:	f7fd fdaf 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8004ec2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ec4:	e009      	b.n	8004eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ecc:	e005      	b.n	8004eda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8090 	beq.w	8005002 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	4a44      	ldr	r2, [pc, #272]	; (8004ff8 <UART_SetConfig+0x5c4>)
 8004ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ef4:	005a      	lsls	r2, r3, #1
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	441a      	add	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	d916      	bls.n	8004f3c <UART_SetConfig+0x508>
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f14:	d212      	bcs.n	8004f3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f023 030f 	bic.w	r3, r3, #15
 8004f1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	8bfb      	ldrh	r3, [r7, #30]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	8bfa      	ldrh	r2, [r7, #30]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	e062      	b.n	8005002 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f42:	e05e      	b.n	8005002 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d828      	bhi.n	8004f9e <UART_SetConfig+0x56a>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0x520>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f79 	.word	0x08004f79
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	08004f9f 	.word	0x08004f9f
 8004f64:	08004f8f 	.word	0x08004f8f
 8004f68:	08004f9f 	.word	0x08004f9f
 8004f6c:	08004f9f 	.word	0x08004f9f
 8004f70:	08004f9f 	.word	0x08004f9f
 8004f74:	08004f97 	.word	0x08004f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f78:	f7fd fdc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f7e:	e014      	b.n	8004faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f80:	f7fd fdd2 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8004f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f86:	e010      	b.n	8004faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <UART_SetConfig+0x5c0>)
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f8c:	e00d      	b.n	8004faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8e:	f7fd fd47 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8004f92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f94:	e009      	b.n	8004faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f9c:	e005      	b.n	8004faa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fa8:	bf00      	nop
    }

    if (pclk != 0U)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d028      	beq.n	8005002 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <UART_SetConfig+0x5c4>)
 8004fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	441a      	add	r2, r3
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	d910      	bls.n	8004ffc <UART_SetConfig+0x5c8>
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d20c      	bcs.n	8004ffc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60da      	str	r2, [r3, #12]
 8004fec:	e009      	b.n	8005002 <UART_SetConfig+0x5ce>
 8004fee:	bf00      	nop
 8004ff0:	40008000 	.word	0x40008000
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	08005c68 	.word	0x08005c68
      }
      else
      {
        ret = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2201      	movs	r2, #1
 8005006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2201      	movs	r2, #1
 800500e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2200      	movs	r2, #0
 800501c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800501e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005022:	4618      	mov	r0, r3
 8005024:	3730      	adds	r7, #48	; 0x30
 8005026:	46bd      	mov	sp, r7
 8005028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800502c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01a      	beq.n	8005142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800512a:	d10a      	bne.n	8005142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b098      	sub	sp, #96	; 0x60
 8005174:	af02      	add	r7, sp, #8
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005180:	f7fc f940 	bl	8001404 <HAL_GetTick>
 8005184:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b08      	cmp	r3, #8
 8005192:	d12f      	bne.n	80051f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519c:	2200      	movs	r2, #0
 800519e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f88e 	bl	80052c4 <UART_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d022      	beq.n	80051f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c2:	653b      	str	r3, [r7, #80]	; 0x50
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	647b      	str	r3, [r7, #68]	; 0x44
 80051ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e6      	bne.n	80051ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e063      	b.n	80052bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d149      	bne.n	8005296 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005202:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520a:	2200      	movs	r2, #0
 800520c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f857 	bl	80052c4 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d03c      	beq.n	8005296 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	623b      	str	r3, [r7, #32]
   return(result);
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005230:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523a:	633b      	str	r3, [r7, #48]	; 0x30
 800523c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e6      	bne.n	800521c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3308      	adds	r3, #8
 8005254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	60fb      	str	r3, [r7, #12]
   return(result);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	64bb      	str	r3, [r7, #72]	; 0x48
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800526e:	61fa      	str	r2, [r7, #28]
 8005270:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	69b9      	ldr	r1, [r7, #24]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	617b      	str	r3, [r7, #20]
   return(result);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e5      	bne.n	800524e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e012      	b.n	80052bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3758      	adds	r7, #88	; 0x58
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d4:	e04f      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d04b      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fc f891 	bl	8001404 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e04e      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d037      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b80      	cmp	r3, #128	; 0x80
 800530a:	d034      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xb2>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b40      	cmp	r3, #64	; 0x40
 8005310:	d031      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d110      	bne.n	8005342 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2208      	movs	r2, #8
 8005326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f920 	bl	800556e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2208      	movs	r2, #8
 8005332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e029      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005350:	d111      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f906 	bl	800556e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e00f      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	429a      	cmp	r2, r3
 8005392:	d0a0      	beq.n	80052d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b096      	sub	sp, #88	; 0x58
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2222      	movs	r2, #34	; 0x22
 80053c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d02d      	beq.n	8005432 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	4a40      	ldr	r2, [pc, #256]	; (80054e0 <UART_Start_Receive_DMA+0x140>)
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e6:	4a3f      	ldr	r2, [pc, #252]	; (80054e4 <UART_Start_Receive_DMA+0x144>)
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f0:	4a3d      	ldr	r2, [pc, #244]	; (80054e8 <UART_Start_Receive_DMA+0x148>)
 80053f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	2200      	movs	r2, #0
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3324      	adds	r3, #36	; 0x24
 800540a:	4619      	mov	r1, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005410:	461a      	mov	r2, r3
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	f7fc f9ba 	bl	800178c <HAL_DMA_Start_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2210      	movs	r2, #16
 8005422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e051      	b.n	80054d6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d018      	beq.n	800546c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005458:	64bb      	str	r3, [r7, #72]	; 0x48
 800545a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800545e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e6      	bne.n	800543a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	653b      	str	r3, [r7, #80]	; 0x50
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800548c:	637a      	str	r2, [r7, #52]	; 0x34
 800548e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3308      	adds	r3, #8
 80054a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	613b      	str	r3, [r7, #16]
   return(result);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c0:	623a      	str	r2, [r7, #32]
 80054c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	69f9      	ldr	r1, [r7, #28]
 80054c6:	6a3a      	ldr	r2, [r7, #32]
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3758      	adds	r7, #88	; 0x58
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	080056f9 	.word	0x080056f9
 80054e4:	0800582d 	.word	0x0800582d
 80054e8:	08005873 	.word	0x08005873

080054ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b08f      	sub	sp, #60	; 0x3c
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	61fb      	str	r3, [r7, #28]
   return(result);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005514:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	60bb      	str	r3, [r7, #8]
   return(result);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005546:	61ba      	str	r2, [r7, #24]
 8005548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6979      	ldr	r1, [r7, #20]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	613b      	str	r3, [r7, #16]
   return(result);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e5      	bne.n	8005526 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005562:	bf00      	nop
 8005564:	373c      	adds	r7, #60	; 0x3c
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800556e:	b480      	push	{r7}
 8005570:	b095      	sub	sp, #84	; 0x54
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800558a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005594:	643b      	str	r3, [r7, #64]	; 0x40
 8005596:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800559a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e6      	bne.n	8005576 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3308      	adds	r3, #8
 80055ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e3      	bne.n	80055a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d118      	bne.n	800561a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f023 0310 	bic.w	r3, r3, #16
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6979      	ldr	r1, [r7, #20]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	613b      	str	r3, [r7, #16]
   return(result);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e6      	bne.n	80055e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800562e:	bf00      	nop
 8005630:	3754      	adds	r7, #84	; 0x54
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b090      	sub	sp, #64	; 0x40
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d137      	bne.n	80056c6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	2200      	movs	r2, #0
 800565a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	623b      	str	r3, [r7, #32]
   return(result);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
 8005676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800567e:	633a      	str	r2, [r7, #48]	; 0x30
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e5      	bne.n	800565e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	617b      	str	r3, [r7, #20]
   return(result);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056c4:	e004      	b.n	80056d0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80056c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056ce:	4798      	blx	r3
}
 80056d0:	bf00      	nop
 80056d2:	3740      	adds	r7, #64	; 0x40
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b09c      	sub	sp, #112	; 0x70
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d171      	bne.n	80057f8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	2200      	movs	r2, #0
 8005718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800572a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005730:	66bb      	str	r3, [r7, #104]	; 0x68
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800573a:	65bb      	str	r3, [r7, #88]	; 0x58
 800573c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e6      	bne.n	800571c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	667b      	str	r3, [r7, #100]	; 0x64
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800576e:	647a      	str	r2, [r7, #68]	; 0x44
 8005770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e5      	bne.n	800574e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	623b      	str	r3, [r7, #32]
   return(result);
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005798:	663b      	str	r3, [r7, #96]	; 0x60
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057a2:	633a      	str	r2, [r7, #48]	; 0x30
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b8:	2220      	movs	r2, #32
 80057ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d118      	bne.n	80057f8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0310 	bic.w	r3, r3, #16
 80057da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	617b      	str	r3, [r7, #20]
   return(result);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fa:	2200      	movs	r2, #0
 80057fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d109      	bne.n	800581a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800580c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800580e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8005812:	4611      	mov	r1, r2
 8005814:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005816:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005818:	e004      	b.n	8005824 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005820:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005822:	4798      	blx	r3
}
 8005824:	bf00      	nop
 8005826:	3770      	adds	r7, #112	; 0x70
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d10b      	bne.n	8005860 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8005854:	0852      	lsrs	r2, r2, #1
 8005856:	b292      	uxth	r2, r2
 8005858:	4611      	mov	r1, r2
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800585e:	e004      	b.n	800586a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	4798      	blx	r3
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b086      	sub	sp, #24
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d109      	bne.n	80058b2 <UART_DMAError+0x40>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b21      	cmp	r3, #33	; 0x21
 80058a2:	d106      	bne.n	80058b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80058ac:	6978      	ldr	r0, [r7, #20]
 80058ae:	f7ff fe1d 	bl	80054ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d109      	bne.n	80058d4 <UART_DMAError+0x62>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b22      	cmp	r3, #34	; 0x22
 80058c4:	d106      	bne.n	80058d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	f7ff fe4d 	bl	800556e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f043 0210 	orr.w	r2, r3, #16
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058ea:	6978      	ldr	r0, [r7, #20]
 80058ec:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b088      	sub	sp, #32
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60bb      	str	r3, [r7, #8]
   return(result);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	613b      	str	r3, [r7, #16]
   return(result);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005978:	bf00      	nop
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e027      	b.n	8005a22 <HAL_UARTEx_DisableFifoMode+0x66>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2224      	movs	r2, #36	; 0x24
 80059de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e02d      	b.n	8005aa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2224      	movs	r2, #36	; 0x24
 8005a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f850 	bl	8005b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e02d      	b.n	8005b1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2224      	movs	r2, #36	; 0x24
 8005ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f812 	bl	8005b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d108      	bne.n	8005b4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b48:	e031      	b.n	8005bae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b4e:	2308      	movs	r3, #8
 8005b50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	0e5b      	lsrs	r3, r3, #25
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	0f5b      	lsrs	r3, r3, #29
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	7b3a      	ldrb	r2, [r7, #12]
 8005b76:	4911      	ldr	r1, [pc, #68]	; (8005bbc <UARTEx_SetNbDataToProcess+0x94>)
 8005b78:	5c8a      	ldrb	r2, [r1, r2]
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b7e:	7b3a      	ldrb	r2, [r7, #12]
 8005b80:	490f      	ldr	r1, [pc, #60]	; (8005bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8005b82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	7b7a      	ldrb	r2, [r7, #13]
 8005b94:	4909      	ldr	r1, [pc, #36]	; (8005bbc <UARTEx_SetNbDataToProcess+0x94>)
 8005b96:	5c8a      	ldrb	r2, [r1, r2]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b9c:	7b7a      	ldrb	r2, [r7, #13]
 8005b9e:	4908      	ldr	r1, [pc, #32]	; (8005bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	08005c80 	.word	0x08005c80
 8005bc0:	08005c88 	.word	0x08005c88

08005bc4 <memset>:
 8005bc4:	4402      	add	r2, r0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d100      	bne.n	8005bce <memset+0xa>
 8005bcc:	4770      	bx	lr
 8005bce:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd2:	e7f9      	b.n	8005bc8 <memset+0x4>

08005bd4 <__libc_init_array>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4d0d      	ldr	r5, [pc, #52]	; (8005c0c <__libc_init_array+0x38>)
 8005bd8:	4c0d      	ldr	r4, [pc, #52]	; (8005c10 <__libc_init_array+0x3c>)
 8005bda:	1b64      	subs	r4, r4, r5
 8005bdc:	10a4      	asrs	r4, r4, #2
 8005bde:	2600      	movs	r6, #0
 8005be0:	42a6      	cmp	r6, r4
 8005be2:	d109      	bne.n	8005bf8 <__libc_init_array+0x24>
 8005be4:	4d0b      	ldr	r5, [pc, #44]	; (8005c14 <__libc_init_array+0x40>)
 8005be6:	4c0c      	ldr	r4, [pc, #48]	; (8005c18 <__libc_init_array+0x44>)
 8005be8:	f000 f826 	bl	8005c38 <_init>
 8005bec:	1b64      	subs	r4, r4, r5
 8005bee:	10a4      	asrs	r4, r4, #2
 8005bf0:	2600      	movs	r6, #0
 8005bf2:	42a6      	cmp	r6, r4
 8005bf4:	d105      	bne.n	8005c02 <__libc_init_array+0x2e>
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfc:	4798      	blx	r3
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7ee      	b.n	8005be0 <__libc_init_array+0xc>
 8005c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c06:	4798      	blx	r3
 8005c08:	3601      	adds	r6, #1
 8005c0a:	e7f2      	b.n	8005bf2 <__libc_init_array+0x1e>
 8005c0c:	08005c98 	.word	0x08005c98
 8005c10:	08005c98 	.word	0x08005c98
 8005c14:	08005c98 	.word	0x08005c98
 8005c18:	08005c9c 	.word	0x08005c9c

08005c1c <memcpy>:
 8005c1c:	440a      	add	r2, r1
 8005c1e:	4291      	cmp	r1, r2
 8005c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c24:	d100      	bne.n	8005c28 <memcpy+0xc>
 8005c26:	4770      	bx	lr
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c32:	4291      	cmp	r1, r2
 8005c34:	d1f9      	bne.n	8005c2a <memcpy+0xe>
 8005c36:	bd10      	pop	{r4, pc}

08005c38 <_init>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr

08005c44 <_fini>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr
